// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"boyi/pkg/delivery/graph/view"
	"boyi/pkg/infra/graph/value"
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AuditLog struct {
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Method       func(childComplexity int) int
		RequestInput func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	Claims struct {
		AccountType func(childComplexity int) int
		AliasName   func(childComplexity int) int
		AvatarURL   func(childComplexity int) int
		ID          func(childComplexity int) int
		Menu        func(childComplexity int) int
		Status      func(childComplexity int) int
		Username    func(childComplexity int) int
		Whitelists  func(childComplexity int) int
	}

	Common struct {
		CreatedAt   func(childComplexity int) int
		CreatorID   func(childComplexity int) int
		CreatorName func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdaterID   func(childComplexity int) int
		UpdaterName func(childComplexity int) int
	}

	CreateCommonUserResp struct {
		User func(childComplexity int) int
	}

	CreateUploadURLResp struct {
		Files func(childComplexity int) int
	}

	CreateUserResp struct {
		User func(childComplexity int) int
	}

	DataList struct {
		Data func(childComplexity int) int
		Meta func(childComplexity int) int
	}

	File struct {
		Content     func(childComplexity int) int
		ContentType func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	FileInfo struct {
		FileName  func(childComplexity int) int
		UploadURL func(childComplexity int) int
	}

	HostsDeny struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		IsEnabled    func(childComplexity int) int
		Remark       func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	HubClient struct {
		Devices func(childComplexity int) int
		UserID  func(childComplexity int) int
	}

	HubDevice struct {
		DeviceUID func(childComplexity int) int
		RoomID    func(childComplexity int) int
		Token     func(childComplexity int) int
	}

	ListAuditLogResp struct {
		AuditLogs func(childComplexity int) int
		Meta      func(childComplexity int) int
	}

	ListHostsDenyResp struct {
		HostsDenys func(childComplexity int) int
		Meta       func(childComplexity int) int
	}

	ListMetadata struct {
		Count func(childComplexity int) int
	}

	ListRoleResp struct {
		Meta  func(childComplexity int) int
		Roles func(childComplexity int) int
	}

	ListTagResp struct {
		Meta func(childComplexity int) int
		Tags func(childComplexity int) int
	}

	ListUserLoginHistoryResp struct {
		Meta               func(childComplexity int) int
		UserLoginHistories func(childComplexity int) int
	}

	ListUserResp struct {
		Meta  func(childComplexity int) int
		Users func(childComplexity int) int
	}

	ListUserRoleResp struct {
		Meta      func(childComplexity int) int
		UserRoles func(childComplexity int) int
	}

	ListUserTagResp struct {
		Meta     func(childComplexity int) int
		UserTags func(childComplexity int) int
	}

	ListUserWhitelistResp struct {
		Meta           func(childComplexity int) int
		UserWhitelists func(childComplexity int) int
	}

	LoginResp struct {
		DeviceUID func(childComplexity int) int
		Token     func(childComplexity int) int
		UserAgent func(childComplexity int) int
	}

	Menu struct {
		Key      func(childComplexity int) int
		Name     func(childComplexity int) int
		Next     func(childComplexity int) int
		SuperKey func(childComplexity int) int
	}

	Meta struct {
		Page      func(childComplexity int) int
		PerPage   func(childComplexity int) int
		Total     func(childComplexity int) int
		TotalPage func(childComplexity int) int
	}

	Mutation struct {
		CreateAuditLog      func(childComplexity int, in view.AuditLogCreateInput) int
		CreateCommonUser    func(childComplexity int, in view.CreateCommonUserReqInput) int
		CreateHostsDeny     func(childComplexity int, in view.HostsDenyCreateInput) int
		CreateRole          func(childComplexity int, in view.RoleCreateInput) int
		CreateTag           func(childComplexity int, in view.TagCreateInput) int
		CreateUser          func(childComplexity int, in view.CreateUserReqInput) int
		CreateUserRole      func(childComplexity int, in view.UserRoleCreateInput) int
		CreateUserTag       func(childComplexity int, in view.UserTagCreateInput) int
		CreateUserWhitelist func(childComplexity int, in view.UserWhitelistCreateInput) int
		DeleteHostsDeny     func(childComplexity int, filter view.HostsDenyFilterInput) int
		DeleteRole          func(childComplexity int, filter view.RoleFilterInput) int
		DeleteTag           func(childComplexity int, filter view.TagFilterInput) int
		DeleteUser          func(childComplexity int, filter view.UserFilterInput) int
		DeleteUserRole      func(childComplexity int, filter view.UserRoleFilterInput) int
		DeleteUserTag       func(childComplexity int, filter view.UserTagFilterInput) int
		DeleteUserWhitelist func(childComplexity int, filter view.UserWhitelistFilterInput) int
		FlushAllCache       func(childComplexity int) int
		Login               func(childComplexity int, in view.LoginReqInput) int
		Logout              func(childComplexity int) int
		RefreshToken        func(childComplexity int) int
		UpdateHostsDeny     func(childComplexity int, filter view.HostsDenyFilterInput, in view.HostsDenyUpdateInput) int
		UpdateRole          func(childComplexity int, filter view.RoleFilterInput, in view.RoleUpdateInput) int
		UpdateTag           func(childComplexity int, filter view.TagFilterInput, in view.TagUpdateInput) int
		UpdateUser          func(childComplexity int, filter view.UserFilterInput, in view.UserUpdateInput) int
		UpdateUserPassword  func(childComplexity int, in view.UserUpdatePasswordInput) int
		UpdateUserRole      func(childComplexity int, filter view.UserRoleFilterInput, in view.UserRoleUpdateInput) int
		UpdateUserTag       func(childComplexity int, filter view.UserTagFilterInput, in view.UserTagUpdateInput) int
		UpdateUserWhitelist func(childComplexity int, filter view.UserWhitelistFilterInput, in view.UserWhitelistUpdateInput) int
	}

	Query struct {
		GetAuditLog          func(childComplexity int, filter view.AuditLogFilterInput) int
		GetHostsDeny         func(childComplexity int, filter view.HostsDenyFilterInput) int
		GetRole              func(childComplexity int, filter view.RoleFilterInput) int
		GetTag               func(childComplexity int, filter view.TagFilterInput) int
		GetUser              func(childComplexity int, filter view.UserFilterInput) int
		GetUserRole          func(childComplexity int, filter view.UserRoleFilterInput) int
		GetUserTag           func(childComplexity int, filter view.UserTagFilterInput) int
		GetUserWhitelist     func(childComplexity int, filter view.UserWhitelistFilterInput) int
		ListAuditLog         func(childComplexity int, filter view.AuditLogFilterInput, pagination *view.PaginationInput) int
		ListHostsDeny        func(childComplexity int, filter *view.HostsDenyFilterInput, pagination *view.PaginationInput) int
		ListHubClients       func(childComplexity int) int
		ListMenu             func(childComplexity int) int
		ListRole             func(childComplexity int, filter view.RoleFilterInput, pagination *view.PaginationInput) int
		ListTag              func(childComplexity int, filter view.TagFilterInput, pagination *view.PaginationInput) int
		ListUser             func(childComplexity int, filter view.UserFilterInput, pagination *view.PaginationInput) int
		ListUserLoginHistory func(childComplexity int, filter view.UserLoginHistoryFilterInput, pagination *view.PaginationInput) int
		ListUserRole         func(childComplexity int, filter view.UserRoleFilterInput, pagination *view.PaginationInput) int
		ListUserTag          func(childComplexity int, filter view.UserTagFilterInput, pagination *view.PaginationInput) int
		ListUserWhitelist    func(childComplexity int, filter view.UserWhitelistFilterInput, pagination *view.PaginationInput) int
		Me                   func(childComplexity int) int
	}

	RefreshTokenResp struct {
		Expires func(childComplexity int) int
		Token   func(childComplexity int) int
	}

	Role struct {
		Authority          func(childComplexity int) int
		CreateUserID       func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		ID                 func(childComplexity int) int
		Name               func(childComplexity int) int
		SupportAccountType func(childComplexity int) int
		UpdateUserID       func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	Subscription struct {
		ReceiveMessage func(childComplexity int, userAuth view.UserAuth) int
	}

	Tag struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		IsEnable     func(childComplexity int) int
		Name         func(childComplexity int) int
		RGBHex       func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	User struct {
		AccountType  func(childComplexity int) int
		AliasName    func(childComplexity int) int
		Area         func(childComplexity int) int
		AvatarURL    func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Email        func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		LastLoginAt  func(childComplexity int) int
		LastLoginIP  func(childComplexity int) int
		Notes        func(childComplexity int) int
		Roles        func(childComplexity int) int
		Status       func(childComplexity int) int
		Tags         func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		Username     func(childComplexity int) int
		Whitelists   func(childComplexity int) int
	}

	UserLoginHistory struct {
		AdministrativeArea func(childComplexity int) int
		Country            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeviceOs           func(childComplexity int) int
		ID                 func(childComplexity int) int
		IPAddress          func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	UserRole struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		IsAdmin      func(childComplexity int) int
		Role         func(childComplexity int) int
		RoleID       func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	UserTag struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Tag          func(childComplexity int) int
		TagID        func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	UserWhitelist struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IPAddress func(childComplexity int) int
		UserID    func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateAuditLog(ctx context.Context, in view.AuditLogCreateInput) (uint64, error)
	CreateCommonUser(ctx context.Context, in view.CreateCommonUserReqInput) (*view.CreateCommonUserResp, error)
	Login(ctx context.Context, in view.LoginReqInput) (*view.LoginResp, error)
	Logout(ctx context.Context) (uint64, error)
	FlushAllCache(ctx context.Context) (uint64, error)
	RefreshToken(ctx context.Context) (*view.RefreshTokenResp, error)
	CreateRole(ctx context.Context, in view.RoleCreateInput) (uint64, error)
	UpdateRole(ctx context.Context, filter view.RoleFilterInput, in view.RoleUpdateInput) (uint64, error)
	DeleteRole(ctx context.Context, filter view.RoleFilterInput) (uint64, error)
	CreateHostsDeny(ctx context.Context, in view.HostsDenyCreateInput) (*view.HostsDeny, error)
	UpdateHostsDeny(ctx context.Context, filter view.HostsDenyFilterInput, in view.HostsDenyUpdateInput) (*view.HostsDeny, error)
	DeleteHostsDeny(ctx context.Context, filter view.HostsDenyFilterInput) (uint64, error)
	CreateTag(ctx context.Context, in view.TagCreateInput) (uint64, error)
	UpdateTag(ctx context.Context, filter view.TagFilterInput, in view.TagUpdateInput) (uint64, error)
	DeleteTag(ctx context.Context, filter view.TagFilterInput) (uint64, error)
	CreateUser(ctx context.Context, in view.CreateUserReqInput) (*view.CreateUserResp, error)
	UpdateUser(ctx context.Context, filter view.UserFilterInput, in view.UserUpdateInput) (uint64, error)
	DeleteUser(ctx context.Context, filter view.UserFilterInput) (uint64, error)
	UpdateUserPassword(ctx context.Context, in view.UserUpdatePasswordInput) (uint64, error)
	CreateUserWhitelist(ctx context.Context, in view.UserWhitelistCreateInput) (uint64, error)
	UpdateUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput, in view.UserWhitelistUpdateInput) (uint64, error)
	DeleteUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput) (uint64, error)
	CreateUserRole(ctx context.Context, in view.UserRoleCreateInput) (uint64, error)
	UpdateUserRole(ctx context.Context, filter view.UserRoleFilterInput, in view.UserRoleUpdateInput) (uint64, error)
	DeleteUserRole(ctx context.Context, filter view.UserRoleFilterInput) (uint64, error)
	CreateUserTag(ctx context.Context, in view.UserTagCreateInput) (uint64, error)
	UpdateUserTag(ctx context.Context, filter view.UserTagFilterInput, in view.UserTagUpdateInput) (uint64, error)
	DeleteUserTag(ctx context.Context, filter view.UserTagFilterInput) (uint64, error)
}
type QueryResolver interface {
	GetAuditLog(ctx context.Context, filter view.AuditLogFilterInput) (*view.AuditLog, error)
	ListAuditLog(ctx context.Context, filter view.AuditLogFilterInput, pagination *view.PaginationInput) (*view.ListAuditLogResp, error)
	Me(ctx context.Context) (*view.Claims, error)
	ListHubClients(ctx context.Context) ([]*view.HubClient, error)
	ListMenu(ctx context.Context) ([]*view.Menu, error)
	GetRole(ctx context.Context, filter view.RoleFilterInput) (*view.Role, error)
	ListRole(ctx context.Context, filter view.RoleFilterInput, pagination *view.PaginationInput) (*view.ListRoleResp, error)
	GetHostsDeny(ctx context.Context, filter view.HostsDenyFilterInput) (*view.HostsDeny, error)
	ListHostsDeny(ctx context.Context, filter *view.HostsDenyFilterInput, pagination *view.PaginationInput) (*view.ListHostsDenyResp, error)
	GetTag(ctx context.Context, filter view.TagFilterInput) (*view.Tag, error)
	ListTag(ctx context.Context, filter view.TagFilterInput, pagination *view.PaginationInput) (*view.ListTagResp, error)
	GetUser(ctx context.Context, filter view.UserFilterInput) (*view.User, error)
	ListUser(ctx context.Context, filter view.UserFilterInput, pagination *view.PaginationInput) (*view.ListUserResp, error)
	GetUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput) (*view.UserWhitelist, error)
	ListUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput, pagination *view.PaginationInput) (*view.ListUserWhitelistResp, error)
	GetUserRole(ctx context.Context, filter view.UserRoleFilterInput) (*view.UserRole, error)
	ListUserRole(ctx context.Context, filter view.UserRoleFilterInput, pagination *view.PaginationInput) (*view.ListUserRoleResp, error)
	GetUserTag(ctx context.Context, filter view.UserTagFilterInput) (*view.UserTag, error)
	ListUserTag(ctx context.Context, filter view.UserTagFilterInput, pagination *view.PaginationInput) (*view.ListUserTagResp, error)
	ListUserLoginHistory(ctx context.Context, filter view.UserLoginHistoryFilterInput, pagination *view.PaginationInput) (*view.ListUserLoginHistoryResp, error)
}
type SubscriptionResolver interface {
	ReceiveMessage(ctx context.Context, userAuth view.UserAuth) (<-chan string, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AuditLog.createdAt":
		if e.complexity.AuditLog.CreatedAt == nil {
			break
		}

		return e.complexity.AuditLog.CreatedAt(childComplexity), true

	case "AuditLog.id":
		if e.complexity.AuditLog.ID == nil {
			break
		}

		return e.complexity.AuditLog.ID(childComplexity), true

	case "AuditLog.method":
		if e.complexity.AuditLog.Method == nil {
			break
		}

		return e.complexity.AuditLog.Method(childComplexity), true

	case "AuditLog.requestInput":
		if e.complexity.AuditLog.RequestInput == nil {
			break
		}

		return e.complexity.AuditLog.RequestInput(childComplexity), true

	case "AuditLog.userID":
		if e.complexity.AuditLog.UserID == nil {
			break
		}

		return e.complexity.AuditLog.UserID(childComplexity), true

	case "Claims.accountType":
		if e.complexity.Claims.AccountType == nil {
			break
		}

		return e.complexity.Claims.AccountType(childComplexity), true

	case "Claims.aliasName":
		if e.complexity.Claims.AliasName == nil {
			break
		}

		return e.complexity.Claims.AliasName(childComplexity), true

	case "Claims.avatarURL":
		if e.complexity.Claims.AvatarURL == nil {
			break
		}

		return e.complexity.Claims.AvatarURL(childComplexity), true

	case "Claims.id":
		if e.complexity.Claims.ID == nil {
			break
		}

		return e.complexity.Claims.ID(childComplexity), true

	case "Claims.menu":
		if e.complexity.Claims.Menu == nil {
			break
		}

		return e.complexity.Claims.Menu(childComplexity), true

	case "Claims.status":
		if e.complexity.Claims.Status == nil {
			break
		}

		return e.complexity.Claims.Status(childComplexity), true

	case "Claims.username":
		if e.complexity.Claims.Username == nil {
			break
		}

		return e.complexity.Claims.Username(childComplexity), true

	case "Claims.whitelists":
		if e.complexity.Claims.Whitelists == nil {
			break
		}

		return e.complexity.Claims.Whitelists(childComplexity), true

	case "Common.createdAt":
		if e.complexity.Common.CreatedAt == nil {
			break
		}

		return e.complexity.Common.CreatedAt(childComplexity), true

	case "Common.creatorID":
		if e.complexity.Common.CreatorID == nil {
			break
		}

		return e.complexity.Common.CreatorID(childComplexity), true

	case "Common.creatorName":
		if e.complexity.Common.CreatorName == nil {
			break
		}

		return e.complexity.Common.CreatorName(childComplexity), true

	case "Common.updatedAt":
		if e.complexity.Common.UpdatedAt == nil {
			break
		}

		return e.complexity.Common.UpdatedAt(childComplexity), true

	case "Common.updaterID":
		if e.complexity.Common.UpdaterID == nil {
			break
		}

		return e.complexity.Common.UpdaterID(childComplexity), true

	case "Common.updaterName":
		if e.complexity.Common.UpdaterName == nil {
			break
		}

		return e.complexity.Common.UpdaterName(childComplexity), true

	case "CreateCommonUserResp.user":
		if e.complexity.CreateCommonUserResp.User == nil {
			break
		}

		return e.complexity.CreateCommonUserResp.User(childComplexity), true

	case "CreateUploadURLResp.files":
		if e.complexity.CreateUploadURLResp.Files == nil {
			break
		}

		return e.complexity.CreateUploadURLResp.Files(childComplexity), true

	case "CreateUserResp.user":
		if e.complexity.CreateUserResp.User == nil {
			break
		}

		return e.complexity.CreateUserResp.User(childComplexity), true

	case "DataList.data":
		if e.complexity.DataList.Data == nil {
			break
		}

		return e.complexity.DataList.Data(childComplexity), true

	case "DataList.meta":
		if e.complexity.DataList.Meta == nil {
			break
		}

		return e.complexity.DataList.Meta(childComplexity), true

	case "File.content":
		if e.complexity.File.Content == nil {
			break
		}

		return e.complexity.File.Content(childComplexity), true

	case "File.contentType":
		if e.complexity.File.ContentType == nil {
			break
		}

		return e.complexity.File.ContentType(childComplexity), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.name":
		if e.complexity.File.Name == nil {
			break
		}

		return e.complexity.File.Name(childComplexity), true

	case "FileInfo.fileName":
		if e.complexity.FileInfo.FileName == nil {
			break
		}

		return e.complexity.FileInfo.FileName(childComplexity), true

	case "FileInfo.uploadURL":
		if e.complexity.FileInfo.UploadURL == nil {
			break
		}

		return e.complexity.FileInfo.UploadURL(childComplexity), true

	case "HostsDeny.createUserID":
		if e.complexity.HostsDeny.CreateUserID == nil {
			break
		}

		return e.complexity.HostsDeny.CreateUserID(childComplexity), true

	case "HostsDeny.createdAt":
		if e.complexity.HostsDeny.CreatedAt == nil {
			break
		}

		return e.complexity.HostsDeny.CreatedAt(childComplexity), true

	case "HostsDeny.id":
		if e.complexity.HostsDeny.ID == nil {
			break
		}

		return e.complexity.HostsDeny.ID(childComplexity), true

	case "HostsDeny.ipAddress":
		if e.complexity.HostsDeny.IPAddress == nil {
			break
		}

		return e.complexity.HostsDeny.IPAddress(childComplexity), true

	case "HostsDeny.isEnabled":
		if e.complexity.HostsDeny.IsEnabled == nil {
			break
		}

		return e.complexity.HostsDeny.IsEnabled(childComplexity), true

	case "HostsDeny.remark":
		if e.complexity.HostsDeny.Remark == nil {
			break
		}

		return e.complexity.HostsDeny.Remark(childComplexity), true

	case "HostsDeny.updateUserID":
		if e.complexity.HostsDeny.UpdateUserID == nil {
			break
		}

		return e.complexity.HostsDeny.UpdateUserID(childComplexity), true

	case "HostsDeny.updatedAt":
		if e.complexity.HostsDeny.UpdatedAt == nil {
			break
		}

		return e.complexity.HostsDeny.UpdatedAt(childComplexity), true

	case "HubClient.devices":
		if e.complexity.HubClient.Devices == nil {
			break
		}

		return e.complexity.HubClient.Devices(childComplexity), true

	case "HubClient.userID":
		if e.complexity.HubClient.UserID == nil {
			break
		}

		return e.complexity.HubClient.UserID(childComplexity), true

	case "HubDevice.deviceUID":
		if e.complexity.HubDevice.DeviceUID == nil {
			break
		}

		return e.complexity.HubDevice.DeviceUID(childComplexity), true

	case "HubDevice.roomID":
		if e.complexity.HubDevice.RoomID == nil {
			break
		}

		return e.complexity.HubDevice.RoomID(childComplexity), true

	case "HubDevice.token":
		if e.complexity.HubDevice.Token == nil {
			break
		}

		return e.complexity.HubDevice.Token(childComplexity), true

	case "ListAuditLogResp.auditLogs":
		if e.complexity.ListAuditLogResp.AuditLogs == nil {
			break
		}

		return e.complexity.ListAuditLogResp.AuditLogs(childComplexity), true

	case "ListAuditLogResp.meta":
		if e.complexity.ListAuditLogResp.Meta == nil {
			break
		}

		return e.complexity.ListAuditLogResp.Meta(childComplexity), true

	case "ListHostsDenyResp.hostsDenys":
		if e.complexity.ListHostsDenyResp.HostsDenys == nil {
			break
		}

		return e.complexity.ListHostsDenyResp.HostsDenys(childComplexity), true

	case "ListHostsDenyResp.meta":
		if e.complexity.ListHostsDenyResp.Meta == nil {
			break
		}

		return e.complexity.ListHostsDenyResp.Meta(childComplexity), true

	case "ListMetadata.count":
		if e.complexity.ListMetadata.Count == nil {
			break
		}

		return e.complexity.ListMetadata.Count(childComplexity), true

	case "ListRoleResp.meta":
		if e.complexity.ListRoleResp.Meta == nil {
			break
		}

		return e.complexity.ListRoleResp.Meta(childComplexity), true

	case "ListRoleResp.roles":
		if e.complexity.ListRoleResp.Roles == nil {
			break
		}

		return e.complexity.ListRoleResp.Roles(childComplexity), true

	case "ListTagResp.meta":
		if e.complexity.ListTagResp.Meta == nil {
			break
		}

		return e.complexity.ListTagResp.Meta(childComplexity), true

	case "ListTagResp.tags":
		if e.complexity.ListTagResp.Tags == nil {
			break
		}

		return e.complexity.ListTagResp.Tags(childComplexity), true

	case "ListUserLoginHistoryResp.meta":
		if e.complexity.ListUserLoginHistoryResp.Meta == nil {
			break
		}

		return e.complexity.ListUserLoginHistoryResp.Meta(childComplexity), true

	case "ListUserLoginHistoryResp.userLoginHistories":
		if e.complexity.ListUserLoginHistoryResp.UserLoginHistories == nil {
			break
		}

		return e.complexity.ListUserLoginHistoryResp.UserLoginHistories(childComplexity), true

	case "ListUserResp.meta":
		if e.complexity.ListUserResp.Meta == nil {
			break
		}

		return e.complexity.ListUserResp.Meta(childComplexity), true

	case "ListUserResp.users":
		if e.complexity.ListUserResp.Users == nil {
			break
		}

		return e.complexity.ListUserResp.Users(childComplexity), true

	case "ListUserRoleResp.meta":
		if e.complexity.ListUserRoleResp.Meta == nil {
			break
		}

		return e.complexity.ListUserRoleResp.Meta(childComplexity), true

	case "ListUserRoleResp.userRoles":
		if e.complexity.ListUserRoleResp.UserRoles == nil {
			break
		}

		return e.complexity.ListUserRoleResp.UserRoles(childComplexity), true

	case "ListUserTagResp.meta":
		if e.complexity.ListUserTagResp.Meta == nil {
			break
		}

		return e.complexity.ListUserTagResp.Meta(childComplexity), true

	case "ListUserTagResp.userTags":
		if e.complexity.ListUserTagResp.UserTags == nil {
			break
		}

		return e.complexity.ListUserTagResp.UserTags(childComplexity), true

	case "ListUserWhitelistResp.meta":
		if e.complexity.ListUserWhitelistResp.Meta == nil {
			break
		}

		return e.complexity.ListUserWhitelistResp.Meta(childComplexity), true

	case "ListUserWhitelistResp.userWhitelists":
		if e.complexity.ListUserWhitelistResp.UserWhitelists == nil {
			break
		}

		return e.complexity.ListUserWhitelistResp.UserWhitelists(childComplexity), true

	case "LoginResp.deviceUID":
		if e.complexity.LoginResp.DeviceUID == nil {
			break
		}

		return e.complexity.LoginResp.DeviceUID(childComplexity), true

	case "LoginResp.token":
		if e.complexity.LoginResp.Token == nil {
			break
		}

		return e.complexity.LoginResp.Token(childComplexity), true

	case "LoginResp.userAgent":
		if e.complexity.LoginResp.UserAgent == nil {
			break
		}

		return e.complexity.LoginResp.UserAgent(childComplexity), true

	case "Menu.key":
		if e.complexity.Menu.Key == nil {
			break
		}

		return e.complexity.Menu.Key(childComplexity), true

	case "Menu.name":
		if e.complexity.Menu.Name == nil {
			break
		}

		return e.complexity.Menu.Name(childComplexity), true

	case "Menu.next":
		if e.complexity.Menu.Next == nil {
			break
		}

		return e.complexity.Menu.Next(childComplexity), true

	case "Menu.superKey":
		if e.complexity.Menu.SuperKey == nil {
			break
		}

		return e.complexity.Menu.SuperKey(childComplexity), true

	case "Meta.page":
		if e.complexity.Meta.Page == nil {
			break
		}

		return e.complexity.Meta.Page(childComplexity), true

	case "Meta.perPage":
		if e.complexity.Meta.PerPage == nil {
			break
		}

		return e.complexity.Meta.PerPage(childComplexity), true

	case "Meta.total":
		if e.complexity.Meta.Total == nil {
			break
		}

		return e.complexity.Meta.Total(childComplexity), true

	case "Meta.totalPage":
		if e.complexity.Meta.TotalPage == nil {
			break
		}

		return e.complexity.Meta.TotalPage(childComplexity), true

	case "Mutation.createAuditLog":
		if e.complexity.Mutation.CreateAuditLog == nil {
			break
		}

		args, err := ec.field_Mutation_createAuditLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAuditLog(childComplexity, args["in"].(view.AuditLogCreateInput)), true

	case "Mutation.CreateCommonUser":
		if e.complexity.Mutation.CreateCommonUser == nil {
			break
		}

		args, err := ec.field_Mutation_CreateCommonUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCommonUser(childComplexity, args["in"].(view.CreateCommonUserReqInput)), true

	case "Mutation.createHostsDeny":
		if e.complexity.Mutation.CreateHostsDeny == nil {
			break
		}

		args, err := ec.field_Mutation_createHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHostsDeny(childComplexity, args["in"].(view.HostsDenyCreateInput)), true

	case "Mutation.createRole":
		if e.complexity.Mutation.CreateRole == nil {
			break
		}

		args, err := ec.field_Mutation_createRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRole(childComplexity, args["in"].(view.RoleCreateInput)), true

	case "Mutation.createTag":
		if e.complexity.Mutation.CreateTag == nil {
			break
		}

		args, err := ec.field_Mutation_createTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTag(childComplexity, args["in"].(view.TagCreateInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["in"].(view.CreateUserReqInput)), true

	case "Mutation.createUserRole":
		if e.complexity.Mutation.CreateUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_createUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserRole(childComplexity, args["in"].(view.UserRoleCreateInput)), true

	case "Mutation.createUserTag":
		if e.complexity.Mutation.CreateUserTag == nil {
			break
		}

		args, err := ec.field_Mutation_createUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserTag(childComplexity, args["in"].(view.UserTagCreateInput)), true

	case "Mutation.createUserWhitelist":
		if e.complexity.Mutation.CreateUserWhitelist == nil {
			break
		}

		args, err := ec.field_Mutation_createUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserWhitelist(childComplexity, args["in"].(view.UserWhitelistCreateInput)), true

	case "Mutation.deleteHostsDeny":
		if e.complexity.Mutation.DeleteHostsDeny == nil {
			break
		}

		args, err := ec.field_Mutation_deleteHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHostsDeny(childComplexity, args["filter"].(view.HostsDenyFilterInput)), true

	case "Mutation.deleteRole":
		if e.complexity.Mutation.DeleteRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRole(childComplexity, args["filter"].(view.RoleFilterInput)), true

	case "Mutation.deleteTag":
		if e.complexity.Mutation.DeleteTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTag(childComplexity, args["filter"].(view.TagFilterInput)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["filter"].(view.UserFilterInput)), true

	case "Mutation.deleteUserRole":
		if e.complexity.Mutation.DeleteUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserRole(childComplexity, args["filter"].(view.UserRoleFilterInput)), true

	case "Mutation.deleteUserTag":
		if e.complexity.Mutation.DeleteUserTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserTag(childComplexity, args["filter"].(view.UserTagFilterInput)), true

	case "Mutation.deleteUserWhitelist":
		if e.complexity.Mutation.DeleteUserWhitelist == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserWhitelist(childComplexity, args["filter"].(view.UserWhitelistFilterInput)), true

	case "Mutation.FlushAllCache":
		if e.complexity.Mutation.FlushAllCache == nil {
			break
		}

		return e.complexity.Mutation.FlushAllCache(childComplexity), true

	case "Mutation.Login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_Login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["in"].(view.LoginReqInput)), true

	case "Mutation.Logout":
		if e.complexity.Mutation.Logout == nil {
			break
		}

		return e.complexity.Mutation.Logout(childComplexity), true

	case "Mutation.RefreshToken":
		if e.complexity.Mutation.RefreshToken == nil {
			break
		}

		return e.complexity.Mutation.RefreshToken(childComplexity), true

	case "Mutation.updateHostsDeny":
		if e.complexity.Mutation.UpdateHostsDeny == nil {
			break
		}

		args, err := ec.field_Mutation_updateHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHostsDeny(childComplexity, args["filter"].(view.HostsDenyFilterInput), args["in"].(view.HostsDenyUpdateInput)), true

	case "Mutation.updateRole":
		if e.complexity.Mutation.UpdateRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRole(childComplexity, args["filter"].(view.RoleFilterInput), args["in"].(view.RoleUpdateInput)), true

	case "Mutation.updateTag":
		if e.complexity.Mutation.UpdateTag == nil {
			break
		}

		args, err := ec.field_Mutation_updateTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTag(childComplexity, args["filter"].(view.TagFilterInput), args["in"].(view.TagUpdateInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["filter"].(view.UserFilterInput), args["in"].(view.UserUpdateInput)), true

	case "Mutation.updateUserPassword":
		if e.complexity.Mutation.UpdateUserPassword == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPassword(childComplexity, args["in"].(view.UserUpdatePasswordInput)), true

	case "Mutation.updateUserRole":
		if e.complexity.Mutation.UpdateUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserRole(childComplexity, args["filter"].(view.UserRoleFilterInput), args["in"].(view.UserRoleUpdateInput)), true

	case "Mutation.updateUserTag":
		if e.complexity.Mutation.UpdateUserTag == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserTag(childComplexity, args["filter"].(view.UserTagFilterInput), args["in"].(view.UserTagUpdateInput)), true

	case "Mutation.updateUserWhitelist":
		if e.complexity.Mutation.UpdateUserWhitelist == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserWhitelist(childComplexity, args["filter"].(view.UserWhitelistFilterInput), args["in"].(view.UserWhitelistUpdateInput)), true

	case "Query.getAuditLog":
		if e.complexity.Query.GetAuditLog == nil {
			break
		}

		args, err := ec.field_Query_getAuditLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAuditLog(childComplexity, args["filter"].(view.AuditLogFilterInput)), true

	case "Query.getHostsDeny":
		if e.complexity.Query.GetHostsDeny == nil {
			break
		}

		args, err := ec.field_Query_getHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHostsDeny(childComplexity, args["filter"].(view.HostsDenyFilterInput)), true

	case "Query.getRole":
		if e.complexity.Query.GetRole == nil {
			break
		}

		args, err := ec.field_Query_getRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRole(childComplexity, args["filter"].(view.RoleFilterInput)), true

	case "Query.getTag":
		if e.complexity.Query.GetTag == nil {
			break
		}

		args, err := ec.field_Query_getTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTag(childComplexity, args["filter"].(view.TagFilterInput)), true

	case "Query.getUser":
		if e.complexity.Query.GetUser == nil {
			break
		}

		args, err := ec.field_Query_getUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUser(childComplexity, args["filter"].(view.UserFilterInput)), true

	case "Query.getUserRole":
		if e.complexity.Query.GetUserRole == nil {
			break
		}

		args, err := ec.field_Query_getUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserRole(childComplexity, args["filter"].(view.UserRoleFilterInput)), true

	case "Query.getUserTag":
		if e.complexity.Query.GetUserTag == nil {
			break
		}

		args, err := ec.field_Query_getUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserTag(childComplexity, args["filter"].(view.UserTagFilterInput)), true

	case "Query.getUserWhitelist":
		if e.complexity.Query.GetUserWhitelist == nil {
			break
		}

		args, err := ec.field_Query_getUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserWhitelist(childComplexity, args["filter"].(view.UserWhitelistFilterInput)), true

	case "Query.listAuditLog":
		if e.complexity.Query.ListAuditLog == nil {
			break
		}

		args, err := ec.field_Query_listAuditLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListAuditLog(childComplexity, args["filter"].(view.AuditLogFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listHostsDeny":
		if e.complexity.Query.ListHostsDeny == nil {
			break
		}

		args, err := ec.field_Query_listHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListHostsDeny(childComplexity, args["filter"].(*view.HostsDenyFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listHubClients":
		if e.complexity.Query.ListHubClients == nil {
			break
		}

		return e.complexity.Query.ListHubClients(childComplexity), true

	case "Query.listMenu":
		if e.complexity.Query.ListMenu == nil {
			break
		}

		return e.complexity.Query.ListMenu(childComplexity), true

	case "Query.listRole":
		if e.complexity.Query.ListRole == nil {
			break
		}

		args, err := ec.field_Query_listRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListRole(childComplexity, args["filter"].(view.RoleFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listTag":
		if e.complexity.Query.ListTag == nil {
			break
		}

		args, err := ec.field_Query_listTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListTag(childComplexity, args["filter"].(view.TagFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUser":
		if e.complexity.Query.ListUser == nil {
			break
		}

		args, err := ec.field_Query_listUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUser(childComplexity, args["filter"].(view.UserFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUserLoginHistory":
		if e.complexity.Query.ListUserLoginHistory == nil {
			break
		}

		args, err := ec.field_Query_listUserLoginHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUserLoginHistory(childComplexity, args["filter"].(view.UserLoginHistoryFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUserRole":
		if e.complexity.Query.ListUserRole == nil {
			break
		}

		args, err := ec.field_Query_listUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUserRole(childComplexity, args["filter"].(view.UserRoleFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUserTag":
		if e.complexity.Query.ListUserTag == nil {
			break
		}

		args, err := ec.field_Query_listUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUserTag(childComplexity, args["filter"].(view.UserTagFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUserWhitelist":
		if e.complexity.Query.ListUserWhitelist == nil {
			break
		}

		args, err := ec.field_Query_listUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUserWhitelist(childComplexity, args["filter"].(view.UserWhitelistFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.Me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "RefreshTokenResp.expires":
		if e.complexity.RefreshTokenResp.Expires == nil {
			break
		}

		return e.complexity.RefreshTokenResp.Expires(childComplexity), true

	case "RefreshTokenResp.token":
		if e.complexity.RefreshTokenResp.Token == nil {
			break
		}

		return e.complexity.RefreshTokenResp.Token(childComplexity), true

	case "Role.authority":
		if e.complexity.Role.Authority == nil {
			break
		}

		return e.complexity.Role.Authority(childComplexity), true

	case "Role.createUserID":
		if e.complexity.Role.CreateUserID == nil {
			break
		}

		return e.complexity.Role.CreateUserID(childComplexity), true

	case "Role.createdAt":
		if e.complexity.Role.CreatedAt == nil {
			break
		}

		return e.complexity.Role.CreatedAt(childComplexity), true

	case "Role.id":
		if e.complexity.Role.ID == nil {
			break
		}

		return e.complexity.Role.ID(childComplexity), true

	case "Role.name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "Role.supportAccountType":
		if e.complexity.Role.SupportAccountType == nil {
			break
		}

		return e.complexity.Role.SupportAccountType(childComplexity), true

	case "Role.updateUserID":
		if e.complexity.Role.UpdateUserID == nil {
			break
		}

		return e.complexity.Role.UpdateUserID(childComplexity), true

	case "Role.updatedAt":
		if e.complexity.Role.UpdatedAt == nil {
			break
		}

		return e.complexity.Role.UpdatedAt(childComplexity), true

	case "Subscription.receiveMessage":
		if e.complexity.Subscription.ReceiveMessage == nil {
			break
		}

		args, err := ec.field_Subscription_receiveMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ReceiveMessage(childComplexity, args["userAuth"].(view.UserAuth)), true

	case "Tag.createUserID":
		if e.complexity.Tag.CreateUserID == nil {
			break
		}

		return e.complexity.Tag.CreateUserID(childComplexity), true

	case "Tag.createdAt":
		if e.complexity.Tag.CreatedAt == nil {
			break
		}

		return e.complexity.Tag.CreatedAt(childComplexity), true

	case "Tag.id":
		if e.complexity.Tag.ID == nil {
			break
		}

		return e.complexity.Tag.ID(childComplexity), true

	case "Tag.isEnable":
		if e.complexity.Tag.IsEnable == nil {
			break
		}

		return e.complexity.Tag.IsEnable(childComplexity), true

	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "Tag.RGBHex":
		if e.complexity.Tag.RGBHex == nil {
			break
		}

		return e.complexity.Tag.RGBHex(childComplexity), true

	case "Tag.updateUserID":
		if e.complexity.Tag.UpdateUserID == nil {
			break
		}

		return e.complexity.Tag.UpdateUserID(childComplexity), true

	case "Tag.updatedAt":
		if e.complexity.Tag.UpdatedAt == nil {
			break
		}

		return e.complexity.Tag.UpdatedAt(childComplexity), true

	case "User.accountType":
		if e.complexity.User.AccountType == nil {
			break
		}

		return e.complexity.User.AccountType(childComplexity), true

	case "User.aliasName":
		if e.complexity.User.AliasName == nil {
			break
		}

		return e.complexity.User.AliasName(childComplexity), true

	case "User.area":
		if e.complexity.User.Area == nil {
			break
		}

		return e.complexity.User.Area(childComplexity), true

	case "User.avatarURL":
		if e.complexity.User.AvatarURL == nil {
			break
		}

		return e.complexity.User.AvatarURL(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isDelete":
		if e.complexity.User.IsDelete == nil {
			break
		}

		return e.complexity.User.IsDelete(childComplexity), true

	case "User.lastLoginAt":
		if e.complexity.User.LastLoginAt == nil {
			break
		}

		return e.complexity.User.LastLoginAt(childComplexity), true

	case "User.lastLoginIP":
		if e.complexity.User.LastLoginIP == nil {
			break
		}

		return e.complexity.User.LastLoginIP(childComplexity), true

	case "User.notes":
		if e.complexity.User.Notes == nil {
			break
		}

		return e.complexity.User.Notes(childComplexity), true

	case "User.roles":
		if e.complexity.User.Roles == nil {
			break
		}

		return e.complexity.User.Roles(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.tags":
		if e.complexity.User.Tags == nil {
			break
		}

		return e.complexity.User.Tags(childComplexity), true

	case "User.updateUserID":
		if e.complexity.User.UpdateUserID == nil {
			break
		}

		return e.complexity.User.UpdateUserID(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "User.whitelists":
		if e.complexity.User.Whitelists == nil {
			break
		}

		return e.complexity.User.Whitelists(childComplexity), true

	case "UserLoginHistory.administrativeArea":
		if e.complexity.UserLoginHistory.AdministrativeArea == nil {
			break
		}

		return e.complexity.UserLoginHistory.AdministrativeArea(childComplexity), true

	case "UserLoginHistory.country":
		if e.complexity.UserLoginHistory.Country == nil {
			break
		}

		return e.complexity.UserLoginHistory.Country(childComplexity), true

	case "UserLoginHistory.createdAt":
		if e.complexity.UserLoginHistory.CreatedAt == nil {
			break
		}

		return e.complexity.UserLoginHistory.CreatedAt(childComplexity), true

	case "UserLoginHistory.deviceOS":
		if e.complexity.UserLoginHistory.DeviceOs == nil {
			break
		}

		return e.complexity.UserLoginHistory.DeviceOs(childComplexity), true

	case "UserLoginHistory.id":
		if e.complexity.UserLoginHistory.ID == nil {
			break
		}

		return e.complexity.UserLoginHistory.ID(childComplexity), true

	case "UserLoginHistory.ipAddress":
		if e.complexity.UserLoginHistory.IPAddress == nil {
			break
		}

		return e.complexity.UserLoginHistory.IPAddress(childComplexity), true

	case "UserLoginHistory.userID":
		if e.complexity.UserLoginHistory.UserID == nil {
			break
		}

		return e.complexity.UserLoginHistory.UserID(childComplexity), true

	case "UserRole.createUserID":
		if e.complexity.UserRole.CreateUserID == nil {
			break
		}

		return e.complexity.UserRole.CreateUserID(childComplexity), true

	case "UserRole.createdAt":
		if e.complexity.UserRole.CreatedAt == nil {
			break
		}

		return e.complexity.UserRole.CreatedAt(childComplexity), true

	case "UserRole.id":
		if e.complexity.UserRole.ID == nil {
			break
		}

		return e.complexity.UserRole.ID(childComplexity), true

	case "UserRole.isAdmin":
		if e.complexity.UserRole.IsAdmin == nil {
			break
		}

		return e.complexity.UserRole.IsAdmin(childComplexity), true

	case "UserRole.role":
		if e.complexity.UserRole.Role == nil {
			break
		}

		return e.complexity.UserRole.Role(childComplexity), true

	case "UserRole.roleID":
		if e.complexity.UserRole.RoleID == nil {
			break
		}

		return e.complexity.UserRole.RoleID(childComplexity), true

	case "UserRole.updateUserID":
		if e.complexity.UserRole.UpdateUserID == nil {
			break
		}

		return e.complexity.UserRole.UpdateUserID(childComplexity), true

	case "UserRole.updatedAt":
		if e.complexity.UserRole.UpdatedAt == nil {
			break
		}

		return e.complexity.UserRole.UpdatedAt(childComplexity), true

	case "UserRole.userID":
		if e.complexity.UserRole.UserID == nil {
			break
		}

		return e.complexity.UserRole.UserID(childComplexity), true

	case "UserTag.createUserID":
		if e.complexity.UserTag.CreateUserID == nil {
			break
		}

		return e.complexity.UserTag.CreateUserID(childComplexity), true

	case "UserTag.createdAt":
		if e.complexity.UserTag.CreatedAt == nil {
			break
		}

		return e.complexity.UserTag.CreatedAt(childComplexity), true

	case "UserTag.id":
		if e.complexity.UserTag.ID == nil {
			break
		}

		return e.complexity.UserTag.ID(childComplexity), true

	case "UserTag.tag":
		if e.complexity.UserTag.Tag == nil {
			break
		}

		return e.complexity.UserTag.Tag(childComplexity), true

	case "UserTag.tagID":
		if e.complexity.UserTag.TagID == nil {
			break
		}

		return e.complexity.UserTag.TagID(childComplexity), true

	case "UserTag.updateUserID":
		if e.complexity.UserTag.UpdateUserID == nil {
			break
		}

		return e.complexity.UserTag.UpdateUserID(childComplexity), true

	case "UserTag.updatedAt":
		if e.complexity.UserTag.UpdatedAt == nil {
			break
		}

		return e.complexity.UserTag.UpdatedAt(childComplexity), true

	case "UserTag.userID":
		if e.complexity.UserTag.UserID == nil {
			break
		}

		return e.complexity.UserTag.UserID(childComplexity), true

	case "UserWhitelist.createdAt":
		if e.complexity.UserWhitelist.CreatedAt == nil {
			break
		}

		return e.complexity.UserWhitelist.CreatedAt(childComplexity), true

	case "UserWhitelist.id":
		if e.complexity.UserWhitelist.ID == nil {
			break
		}

		return e.complexity.UserWhitelist.ID(childComplexity), true

	case "UserWhitelist.ipAddress":
		if e.complexity.UserWhitelist.IPAddress == nil {
			break
		}

		return e.complexity.UserWhitelist.IPAddress(childComplexity), true

	case "UserWhitelist.userID":
		if e.complexity.UserWhitelist.UserID == nil {
			break
		}

		return e.complexity.UserWhitelist.UserID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAuditLogCreateInput,
		ec.unmarshalInputAuditLogFilterInput,
		ec.unmarshalInputAuditLogInput,
		ec.unmarshalInputBaseFilterInput,
		ec.unmarshalInputCreateCommonUserReqInput,
		ec.unmarshalInputCreateUploadURLInput,
		ec.unmarshalInputCreateUserReqInput,
		ec.unmarshalInputFileInfoInput,
		ec.unmarshalInputHostsDenyCreateInput,
		ec.unmarshalInputHostsDenyFilterInput,
		ec.unmarshalInputHostsDenyInput,
		ec.unmarshalInputHostsDenyUpdateInput,
		ec.unmarshalInputLoginReqInput,
		ec.unmarshalInputMenuInput,
		ec.unmarshalInputPaginationInput,
		ec.unmarshalInputRoleCreateInput,
		ec.unmarshalInputRoleFilterInput,
		ec.unmarshalInputRoleInput,
		ec.unmarshalInputRoleUpdateInput,
		ec.unmarshalInputTagCreateInput,
		ec.unmarshalInputTagFilterInput,
		ec.unmarshalInputTagInput,
		ec.unmarshalInputTagUpdateInput,
		ec.unmarshalInputUserAuth,
		ec.unmarshalInputUserFilterInput,
		ec.unmarshalInputUserInput,
		ec.unmarshalInputUserLoginHistoryFilterInput,
		ec.unmarshalInputUserLoginHistoryInput,
		ec.unmarshalInputUserRoleCreateInput,
		ec.unmarshalInputUserRoleFilterInput,
		ec.unmarshalInputUserRoleInput,
		ec.unmarshalInputUserRoleUpdateInput,
		ec.unmarshalInputUserTagCreateInput,
		ec.unmarshalInputUserTagFilterInput,
		ec.unmarshalInputUserTagInput,
		ec.unmarshalInputUserTagUpdateInput,
		ec.unmarshalInputUserUpdateInput,
		ec.unmarshalInputUserUpdatePasswordInput,
		ec.unmarshalInputUserWhitelistCreateInput,
		ec.unmarshalInputUserWhitelistFilterInput,
		ec.unmarshalInputUserWhitelistInput,
		ec.unmarshalInputUserWhitelistUpdateInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../../docs/graphql/schema/audit_log.graphql", Input: `type AuditLog {
	id: Uint64!
	userID: Uint64!
	method: String!
	requestInput: String!
	createdAt: Timestamp!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/audit_log_input.graphql", Input: `type ListAuditLogResp {
	auditLogs: [AuditLog!]!
	meta: Meta!
}

input AuditLogCreateInput {
	method: String!
	userID: Uint64!
	requestInput: String!
}

input AuditLogInput {
	id: Uint64
	method: String
	userID: Uint64
}

input AuditLogFilterInput {
	auditLog: AuditLogInput
	baseFilter: BaseFilterInput
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/auth.graphql", Input: `input LoginReqInput {
	username: String!
	password: String!
}
type LoginResp {
	token: String!
	deviceUID: String!
	userAgent: String!
}

type Claims {
	"""
	id
	"""
	id: Uint64!
	"""
	帳號類型
	"""
	accountType: AccountType!
	"""
	狀態
	"""
	status: UserStatus!
	"""
	用户名
	"""
	username: String!
	"""
	別名（聊天室顯示用）
	"""
	aliasName: String!
	"""
	頭像鏈結
	"""
	avatarURL: String!
	whitelists: [UserWhitelist!]!
	menu: [Menu!]!
}


input UserAuth {
	token: String!
	deviceUID: String!
}

input CreateCommonUserReqInput {
	username: String!
	password: String!
	accountType: AccountType!
}

type CreateCommonUserResp {
	user: User!   
}

type RefreshTokenResp {
	token: String!
	expires: Timestamp! 
}

`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/base.graphql", Input: `scalar Timestamp

scalar Map

scalar Upload

scalar Any


type Common {
	creatorID: Uint64
	creatorName: String
	createdAt: Timestamp
	updaterID: Uint64
	updaterName: String
	updatedAt: Timestamp
}

type ListMetadata {
	count: Uint64
}

input BaseFilterInput {
	IDs: [Uint64!]
	searchIn: String
	keyword: String
	createdAtLT: Uint64
	createdAtLTE: Uint64
	createdAtGT: Uint64
	createdAtGTE: Uint64
	sortField: String
	sortType: SortType
	rangeField: String
	rangeType: RangeType
	lessThan: Int64
	lessThanEqual: Int64
	greaterThan: Int64
	greaterThanEqual: Int64
}

input PaginationInput {
	page: Uint64
	perPage: Uint64
	offsetType: OffsetType
	offsetID: Uint64
	limit: Uint64
}

enum SortType {
	Unknown
	ASC
	DESC
}

enum OffsetType {
	Unknown
	Old
	New
}

type File implements Data {
	id: Uint64!
	name: String!
	content: String!
	contentType: String!
}

enum YesNo {
	Unknown
	Yes
	No
}

enum RangeType {
	ByDateTime
	ByNumber
}

enum Position {
	Top
	Bottom
	Left
	Right
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/common.graphql", Input: `type Query

type Mutation

type Subscription

scalar Uint64

scalar Int64


interface Data {
	id: Uint64!
}

type Meta {
	total: Uint64!
	page: Uint64
	perPage: Uint64
	totalPage: Uint64
}

type DataList {
	data: [Data]!
	meta: Meta!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/hub.graphql", Input: `type HubClient {
	userID: Uint64!
	devices: [HubDevice!]!
}

type HubDevice {
	token: String!
	deviceUID: String!
	roomID: Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/menu.graphql", Input: `type Menu {
	name: String!
	key: String!
	superKey: String!
	next: [Menu!]!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/menu_input.graphql", Input: `input MenuInput {
	key: String!
	next: [MenuInput!]!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/role.graphql", Input: `type Role {
	id: Uint64!
	name: String!
	authority: [Menu!]!
	supportAccountType: AccountType!
	createdAt: Timestamp!
	createUserID: Uint64!
	updatedAt: Timestamp!
	updateUserID: Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/role_input.graphql", Input: `input RoleCreateInput {
	name: String!
	supportAccountType: AccountType!
	authority: [MenuInput!]!
}

input RoleInput {
	id: Uint64
	name: String
	supportAccountType: AccountType
}

input RoleUpdateInput {
	name: String
	supportAccountType: AccountType
	authority: [MenuInput!]
}

input RoleFilterInput {
	role: RoleInput
	baseFilter: BaseFilterInput
}

type ListRoleResp {
	roles: [Role!]!
	meta: Meta!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/support.graphql", Input: `"""黑名單系統"""
type HostsDeny {
	"""id"""
	id: Uint64!
	"""ip"""
	ipAddress: String!
	"""是否啟用"""
	isEnabled: YesNo!
	"""備註"""
	remark: String!
	"""建立時間"""
	createdAt: Timestamp!
	"""建立者"""
	createUserID: Uint64!
	"""更新時間"""
	updatedAt: Timestamp!
	"""更新者"""
	updateUserID: Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/support_input.graphql", Input: `input CreateUploadURLInput {
	expireSec: Int64
	files: [FileInfoInput]!
}

input FileInfoInput {
	fileName: String!
	"""檔案大小"""
	size: Int64!
	"""檔案 MD5 The base64-encoded 128-bit MD5 digest"""
	md5: String!
}

type FileInfo {
	fileName: String!
	uploadURL: String!
}

type CreateUploadURLResp {
	files: [FileInfo]!
}

enum MoreInformationType {
	Unknown
	HTML
	URL
}

# hosts_deny
input HostsDenyInput {
	"""id"""
	id: Uint64
	"""IP"""
	ipAddress: String
	"""是否啟用"""
	isEnabled: YesNo
}

input HostsDenyFilterInput {
	hostsDeny: HostsDenyInput
	baseFilter: BaseFilterInput
}


input HostsDenyCreateInput {
	"""IP"""
	ipAddress: String!
	"""是否啟用"""
	isEnabled: YesNo!
	"""備註"""
	remark: String
}

input HostsDenyUpdateInput {
	"""IP"""
	ipAddress: String
	"""是否啟用"""
	isEnabled: YesNo
	"""備註"""
	remark: String
}

type ListHostsDenyResp {
	hostsDenys: [HostsDeny!]!
	meta: Meta!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/tag.graphql", Input: `type Tag {
	"""id"""
	id: Uint64!
	name: String!
	"""色碼 # 000000 """
	RGBHex: String!
	"""是否啟用"""
	isEnable: YesNo!
	createdAt: Timestamp!
	updatedAt: Timestamp!
	createUserID: Uint64!
	updateUserID: Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/tag_input.graphql", Input: `input TagCreateInput {
	name: String!
	"""色碼 # 000000 """
	RGBHex: String!
}

input TagInput {
	id: Uint64
	name: String
	isEnable: YesNo
}

input TagUpdateInput {
	name: String
	RGBHex: String
	isEnable: YesNo
}

input TagFilterInput {
	tag: TagInput
	baseFilter: BaseFilterInput
}

type ListTagResp {
	tags: [Tag!]!
	meta: Meta!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/user.graphql", Input: `enum UserStatus {
	Unknown
	"""未驗證"""
	UnVerified
	"""啟用中"""
	Actived
	"""鎖定"""
	Locked
	"""停用中"""
	Disabled
	"""已刪除"""
	Deleted
}

enum AccountType {
	Unknown
	"""系統管理員"""
	Admin
	"""系統"""
	System
	"""管理員"""
	Manager
	"""客服"""
	CustomerService
	"""一般會員"""
	Member
	"""遊客"""
	Tourist
}

enum DeviceOS {
	Unknown
	"""IOS"""
	IOS
	"""Android"""
	Android
	"""Windows"""
	Windows
	"""Mac"""
	Mac
	"""其他"""
	Other
}


type User {
	"""id"""
	id: Uint64!
	"""帳號類型"""
	accountType: AccountType!
	"""狀態"""
	status: UserStatus!
	"""用户名"""
	username: String!
	"""別名（聊天室顯示用)"""
	aliasName: String!
	"""電子郵件"""
	email: String!
	"""居住地區"""
	area: String!
	"""備註"""
	notes: String!
	"""頭像鏈結"""
	avatarURL: String!
	"""最後登陸時間"""
	lastLoginAt: Timestamp!
	"""最後登陸的IP"""
	lastLoginIP: String!
	"""是否已刪除"""
	isDelete: YesNo!
	"""建立时间"""
	createdAt: Timestamp!
	"""更新時間"""
	updatedAt: Timestamp!
	"""更新人"""
	updateUserID: Uint64!
	roles: [UserRole!]!
	whitelists: [UserWhitelist!]!
	tags: [UserTag!]!
}


type UserRole {
	"""
	id
	"""
	id: Uint64!
	"""
	user id
	"""
	userID: Uint64!
	"""
	角色 id
	"""
	roleID: Uint64!
	"""
	是否為管理員
	"""
	isAdmin: YesNo!
	"""
	創建 user id
	"""
	createUserID: Uint64!
	"""
	更新 user id
	"""
	updateUserID: Uint64!
	"""
	建立时间
	"""
	createdAt: Timestamp!
	"""
	建立时间
	"""
	updatedAt: Timestamp!
	"""
	角色
	"""
	role: Role!
}

type UserWhitelist {
	"""
	id
	"""
	id: Uint64!
	"""
	user id
	"""
	userID: Uint64!
	"""
	ip 地址
	"""
	ipAddress: String!
	"""
	建立时间
	"""
	createdAt: Timestamp!
}

type UserTag {
	"""id"""
	id: Uint64!
	userID: Uint64!
	tagID: Uint64!
	createdAt: Timestamp!
	updatedAt: Timestamp!
	createUserID: Uint64!
	updateUserID: Uint64!
	tag: Tag!
}

type UserLoginHistory {
	id: Uint64!
	userID: Uint64!
	ipAddress: String!
	country: String!
	administrativeArea: String!
	deviceOS: DeviceOS!
	createdAt: Timestamp!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/user_input.graphql", Input: `input UserFilterInput {
	user: UserInput
	baseFilter: BaseFilterInput
	tagIDs: [Uint64!]
	roleIDs: [Uint64!]
}

input UserUpdateInput {
	"""狀態"""
	status: UserStatus
	"""別名（聊天室顯示用）"""
	aliasName: String 
	"""居住地區"""
	area: String
	"""備註"""
	notes: String
	"""頭像鏈結"""
	avatarContent: Upload
	"""帳戶類型 使用者 / 員工 / 客服"""
	accountType: AccountType
}

input UserWhitelistFilterInput {
	userWhitelist: UserWhitelistInput
	baseFilter: BaseFilterInput
}

input UserWhitelistUpdateInput {
	ipAddress: String
}

input UserRoleFilterInput {
	userRole: UserRoleInput
	baseFilter: BaseFilterInput
}

input UserRoleUpdateInput {
	roleID: Uint64
}

input UserTagFilterInput {
	userTag: UserTagInput
	baseFilter: BaseFilterInput
}

input UserTagUpdateInput {
	tagID: Uint64
}


input UserRoleCreateInput {
	"""
	user id
	"""
	userID: Uint64!
	"""
	角色 id
	"""
	roleID: Uint64!
	"""
	是否為管理員
	"""
	isAdmin: YesNo!
}

input UserInput {
	"""id"""
	id: Uint64
	"""帳號類型"""
	accountType: AccountType
	"""狀態"""
	status: UserStatus
	"""用户名"""
	username: String
	"""別名（聊天室顯示用）"""
	aliasName: String
	"""電子郵件"""
	email: String
	"""居住地區"""
	area: String
	"""備註"""
	notes: String
	"""頭像鏈結"""
	avatarURL: String
}

input UserRoleInput {
	"""
	id
	"""
	id: Uint64
	"""
	user id
	"""
	userID: Uint64
	"""
	ip 地址
	"""
	roleID: Uint64
	"""
	是否為管理員
	"""
	isAdmin: YesNo
}

input UserWhitelistInput {
	"""
	id
	"""
	id: Uint64
	"""
	user id
	"""
	userID: Uint64
	"""
	ip 地址
	"""
	ipAddress: String
}

input UserWhitelistCreateInput {
	userID: Uint64!
	ipAddress: String!
}

input UserTagInput {
	id: Uint64
	userID: Uint64
	tagID: Uint64
}

input UserTagCreateInput {
	userID: Uint64!
	tagID: Uint64!
}

type ListUserResp {
	users:  [User!]!
	meta: Meta!
}

type ListUserRoleResp {
	userRoles: [UserRole!]!
	meta: Meta!
}

type ListUserWhitelistResp {
	userWhitelists: [UserWhitelist!]!
	meta: Meta!
}

type ListUserTagResp {
	userTags: [UserTag!]!
	meta: Meta!
}

input UserLoginHistoryInput {
	userID: Uint64
}

input UserLoginHistoryFilterInput {
	baseFilter: BaseFilterInput
	userLoginHistory: UserLoginHistoryInput
}

type ListUserLoginHistoryResp {
	userLoginHistories: [UserLoginHistory!]!
	meta: Meta
}

input CreateUserReqInput {
	username: String!
	password: String!
	accountType: AccountType!
	aliasName: String!
}

type CreateUserResp {
	user: User!   
}
input UserUpdatePasswordInput {
	userID: Uint64!
	password: String!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/audit_log_svc.graphql", Input: `extend type Query {
	"""數據軌跡"""
	getAuditLog(filter: AuditLogFilterInput!): AuditLog!
	"""數據軌跡列表"""
	listAuditLog(filter: AuditLogFilterInput!, pagination: PaginationInput): ListAuditLogResp!
}

extend type Mutation {
	createAuditLog(in: AuditLogCreateInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/auth_svc.graphql", Input: `extend type Query {
	Me: Claims!
}

extend type Mutation {
	CreateCommonUser(in: CreateCommonUserReqInput!): CreateCommonUserResp!
	Login(in: LoginReqInput!): LoginResp!
	Logout: Uint64!
	FlushAllCache: Uint64!
	RefreshToken: RefreshTokenResp!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/hub.graphql", Input: `extend type Query {
	listHubClients: [HubClient!]!
}

extend type Subscription {
	receiveMessage(userAuth: UserAuth!): String!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/menu_svc.graphql", Input: `extend type Query {
	"""所有列表"""
	listMenu: [Menu!]!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/role_svc.graphql", Input: `extend type Query {
	"""角色"""
	getRole(filter: RoleFilterInput!): Role!
	"""角色列表"""
	listRole(filter: RoleFilterInput!, pagination: PaginationInput): ListRoleResp!
}

extend type Mutation {
	createRole(in: RoleCreateInput!): Uint64!
	"""更新角色"""
	updateRole(filter: RoleFilterInput!, in: RoleUpdateInput!): Uint64!
	"""刪除角色"""
	deleteRole(filter: RoleFilterInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/support_svc.graphql", Input: `extend type Query {

	"""黑名單IP"""
	getHostsDeny(filter: HostsDenyFilterInput!): HostsDeny!
	"""黑名單IP清單"""
	listHostsDeny(filter: HostsDenyFilterInput, pagination:PaginationInput): ListHostsDenyResp!
}

extend type Mutation {
	"""新增黑名單IP"""
	createHostsDeny(in: HostsDenyCreateInput!): HostsDeny!
	"""更新黑名單IP"""
	updateHostsDeny(filter: HostsDenyFilterInput!, in: HostsDenyUpdateInput!): HostsDeny!
	"""刪除黑名單IP"""
	deleteHostsDeny(filter: HostsDenyFilterInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/tag_svc.graphql", Input: `extend type Query {
	"""標籤"""
	getTag(filter: TagFilterInput!): Tag!
	"""標籤列表"""
	listTag(filter: TagFilterInput!, pagination: PaginationInput): ListTagResp!
}

extend type Mutation {
	createTag(in: TagCreateInput!): Uint64!
	"""更新標籤"""
	updateTag(filter: TagFilterInput!, in: TagUpdateInput!): Uint64!
	"""刪除標籤"""
	deleteTag(filter: TagFilterInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/user_svc.graphql", Input: `extend type Query {
	"""用戶"""
	getUser(filter: UserFilterInput!): User!
	"""用戶列表"""
	listUser(filter: UserFilterInput!, pagination: PaginationInput): ListUserResp!
	"""用戶白名單"""
	getUserWhitelist(filter: UserWhitelistFilterInput!): UserWhitelist!
	"""用戶白名單列表"""
	listUserWhitelist(filter: UserWhitelistFilterInput!, pagination: PaginationInput): ListUserWhitelistResp!
	"""用戶角色"""
	getUserRole(filter: UserRoleFilterInput!): UserRole!
	"""用戶角色列表"""
	listUserRole(filter: UserRoleFilterInput!, pagination: PaginationInput): ListUserRoleResp!
	"""用戶標籤"""
	getUserTag(filter: UserTagFilterInput!): UserTag!
	"""用戶標籤列表"""
	listUserTag(filter: UserTagFilterInput!, pagination: PaginationInput): ListUserTagResp!
	
	"""用戶登錄歷史列表"""
	listUserLoginHistory(filter: UserLoginHistoryFilterInput!, pagination: PaginationInput): ListUserLoginHistoryResp!

}

extend type Mutation {
	"""建立登入用戶"""
	createUser(in: CreateUserReqInput!): CreateUserResp!
	"""用戶更新"""
	updateUser(filter: UserFilterInput!, in: UserUpdateInput!): Uint64!
	"""刪除用戶"""
	deleteUser(filter: UserFilterInput!): Uint64!

	"""更新用戶密碼"""
	updateUserPassword(in: UserUpdatePasswordInput!): Uint64!

	"""新增用戶白名單"""
	createUserWhitelist(in: UserWhitelistCreateInput!): Uint64!
	"""更新用戶白名單"""
	updateUserWhitelist(filter: UserWhitelistFilterInput!, in: UserWhitelistUpdateInput!): Uint64!
	"""刪除用戶白名單"""
	deleteUserWhitelist(filter: UserWhitelistFilterInput!): Uint64!


	"""新增用戶角色"""
	createUserRole(in: UserRoleCreateInput!): Uint64!
	"""更新用戶角色"""
	updateUserRole(filter: UserRoleFilterInput!, in: UserRoleUpdateInput!): Uint64!
	"""刪除用戶角色"""
	deleteUserRole(filter: UserRoleFilterInput!): Uint64!

	"""新增用戶標籤"""
	createUserTag(in: UserTagCreateInput!): Uint64!
	"""更新用戶標籤"""
	updateUserTag(filter: UserTagFilterInput!, in: UserTagUpdateInput!): Uint64!
	"""刪除用戶標籤"""
	deleteUserTag(filter: UserTagFilterInput!): Uint64!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_CreateCommonUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.CreateCommonUserReqInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNCreateCommonUserReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserReqInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.LoginReqInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNLoginReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginReqInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAuditLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.AuditLogCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNAuditLogCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.HostsDenyCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNHostsDenyCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNRoleCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNTagCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNUserRoleCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNUserTagCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNUserWhitelistCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.CreateUserReqInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNCreateUserReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserReqInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.HostsDenyFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNHostsDenyFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.HostsDenyFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNHostsDenyFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.HostsDenyUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNHostsDenyUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.RoleUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNRoleUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.TagUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNTagUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserUpdatePasswordInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNUserUpdatePasswordInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserUpdatePasswordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.UserRoleUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNUserRoleUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.UserTagUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNUserTagUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.UserWhitelistUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNUserWhitelistUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.UserUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNUserUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAuditLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.AuditLogFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNAuditLogFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.HostsDenyFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNHostsDenyFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listAuditLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.AuditLogFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNAuditLogFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.HostsDenyFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOHostsDenyFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUserLoginHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserLoginHistoryFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserLoginHistoryFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_receiveMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserAuth
	if tmp, ok := rawArgs["userAuth"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userAuth"))
		arg0, err = ec.unmarshalNUserAuth2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserAuth(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userAuth"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AuditLog_id(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_userID(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_method(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_requestInput(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_requestInput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_requestInput(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_id(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_accountType(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_accountType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.AccountType)
	fc.Result = res
	return ec.marshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_accountType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_status(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.UserStatus)
	fc.Result = res
	return ec.marshalNUserStatus2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_username(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_aliasName(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_aliasName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AliasName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_aliasName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_avatarURL(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_avatarURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_avatarURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_whitelists(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_whitelists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Whitelists, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserWhitelist)
	fc.Result = res
	return ec.marshalNUserWhitelist2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_whitelists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserWhitelist_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserWhitelist_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserWhitelist_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserWhitelist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_menu(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_menu(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Menu, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Menu)
	fc.Result = res
	return ec.marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_menu(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Menu_name(ctx, field)
			case "key":
				return ec.fieldContext_Menu_key(ctx, field)
			case "superKey":
				return ec.fieldContext_Menu_superKey(ctx, field)
			case "next":
				return ec.fieldContext_Menu_next(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Menu", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_creatorID(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_creatorID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_creatorID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_creatorName(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_creatorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_creatorName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_updaterID(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_updaterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdaterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_updaterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_updaterName(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_updaterName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdaterName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_updaterName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCommonUserResp_user(ctx context.Context, field graphql.CollectedField, obj *view.CreateCommonUserResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCommonUserResp_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.User)
	fc.Result = res
	return ec.marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCommonUserResp_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCommonUserResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "accountType":
				return ec.fieldContext_User_accountType(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_User_aliasName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "area":
				return ec.fieldContext_User_area(ctx, field)
			case "notes":
				return ec.fieldContext_User_notes(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "lastLoginIP":
				return ec.fieldContext_User_lastLoginIP(ctx, field)
			case "isDelete":
				return ec.fieldContext_User_isDelete(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_User_updateUserID(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "whitelists":
				return ec.fieldContext_User_whitelists(ctx, field)
			case "tags":
				return ec.fieldContext_User_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUploadURLResp_files(ctx context.Context, field graphql.CollectedField, obj *view.CreateUploadURLResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUploadURLResp_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.FileInfo)
	fc.Result = res
	return ec.marshalNFileInfo2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUploadURLResp_files(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUploadURLResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fileName":
				return ec.fieldContext_FileInfo_fileName(ctx, field)
			case "uploadURL":
				return ec.fieldContext_FileInfo_uploadURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUserResp_user(ctx context.Context, field graphql.CollectedField, obj *view.CreateUserResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUserResp_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.User)
	fc.Result = res
	return ec.marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUserResp_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUserResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "accountType":
				return ec.fieldContext_User_accountType(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_User_aliasName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "area":
				return ec.fieldContext_User_area(ctx, field)
			case "notes":
				return ec.fieldContext_User_notes(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "lastLoginIP":
				return ec.fieldContext_User_lastLoginIP(ctx, field)
			case "isDelete":
				return ec.fieldContext_User_isDelete(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_User_updateUserID(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "whitelists":
				return ec.fieldContext_User_whitelists(ctx, field)
			case "tags":
				return ec.fieldContext_User_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataList_data(ctx context.Context, field graphql.CollectedField, obj *view.DataList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataList_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]view.Data)
	fc.Result = res
	return ec.marshalNData2ᚕboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataList_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataList_meta(ctx context.Context, field graphql.CollectedField, obj *view.DataList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataList_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataList_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_id(ctx context.Context, field graphql.CollectedField, obj *view.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_name(ctx context.Context, field graphql.CollectedField, obj *view.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_content(ctx context.Context, field graphql.CollectedField, obj *view.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_contentType(ctx context.Context, field graphql.CollectedField, obj *view.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileInfo_fileName(ctx context.Context, field graphql.CollectedField, obj *view.FileInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileInfo_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileInfo_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileInfo_uploadURL(ctx context.Context, field graphql.CollectedField, obj *view.FileInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileInfo_uploadURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileInfo_uploadURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_id(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_ipAddress(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_ipAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_ipAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_isEnabled(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_isEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_isEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_remark(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_remark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_remark(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubClient_userID(ctx context.Context, field graphql.CollectedField, obj *view.HubClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubClient_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubClient_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubClient_devices(ctx context.Context, field graphql.CollectedField, obj *view.HubClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubClient_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.HubDevice)
	fc.Result = res
	return ec.marshalNHubDevice2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubDeviceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubClient_devices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_HubDevice_token(ctx, field)
			case "deviceUID":
				return ec.fieldContext_HubDevice_deviceUID(ctx, field)
			case "roomID":
				return ec.fieldContext_HubDevice_roomID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HubDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubDevice_token(ctx context.Context, field graphql.CollectedField, obj *view.HubDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubDevice_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubDevice_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubDevice_deviceUID(ctx context.Context, field graphql.CollectedField, obj *view.HubDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubDevice_deviceUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubDevice_deviceUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubDevice_roomID(ctx context.Context, field graphql.CollectedField, obj *view.HubDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubDevice_roomID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoomID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubDevice_roomID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListAuditLogResp_auditLogs(ctx context.Context, field graphql.CollectedField, obj *view.ListAuditLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAuditLogResp_auditLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLogs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.AuditLog)
	fc.Result = res
	return ec.marshalNAuditLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAuditLogResp_auditLogs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAuditLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuditLog_id(ctx, field)
			case "userID":
				return ec.fieldContext_AuditLog_userID(ctx, field)
			case "method":
				return ec.fieldContext_AuditLog_method(ctx, field)
			case "requestInput":
				return ec.fieldContext_AuditLog_requestInput(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuditLog_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListAuditLogResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListAuditLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAuditLogResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAuditLogResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAuditLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListHostsDenyResp_hostsDenys(ctx context.Context, field graphql.CollectedField, obj *view.ListHostsDenyResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListHostsDenyResp_hostsDenys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostsDenys, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.HostsDeny)
	fc.Result = res
	return ec.marshalNHostsDeny2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListHostsDenyResp_hostsDenys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListHostsDenyResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HostsDeny_id(ctx, field)
			case "ipAddress":
				return ec.fieldContext_HostsDeny_ipAddress(ctx, field)
			case "isEnabled":
				return ec.fieldContext_HostsDeny_isEnabled(ctx, field)
			case "remark":
				return ec.fieldContext_HostsDeny_remark(ctx, field)
			case "createdAt":
				return ec.fieldContext_HostsDeny_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_HostsDeny_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HostsDeny_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_HostsDeny_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HostsDeny", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListHostsDenyResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListHostsDenyResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListHostsDenyResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListHostsDenyResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListHostsDenyResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMetadata_count(ctx context.Context, field graphql.CollectedField, obj *view.ListMetadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMetadata_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMetadata_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMetadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListRoleResp_roles(ctx context.Context, field graphql.CollectedField, obj *view.ListRoleResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListRoleResp_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListRoleResp_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListRoleResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "name":
				return ec.fieldContext_Role_name(ctx, field)
			case "authority":
				return ec.fieldContext_Role_authority(ctx, field)
			case "supportAccountType":
				return ec.fieldContext_Role_supportAccountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Role_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Role_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListRoleResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListRoleResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListRoleResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListRoleResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListRoleResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTagResp_tags(ctx context.Context, field graphql.CollectedField, obj *view.ListTagResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTagResp_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTagResp_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTagResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "RGBHex":
				return ec.fieldContext_Tag_RGBHex(ctx, field)
			case "isEnable":
				return ec.fieldContext_Tag_isEnable(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Tag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Tag_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTagResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListTagResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTagResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTagResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTagResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserLoginHistoryResp_userLoginHistories(ctx context.Context, field graphql.CollectedField, obj *view.ListUserLoginHistoryResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserLoginHistoryResp_userLoginHistories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLoginHistories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserLoginHistory)
	fc.Result = res
	return ec.marshalNUserLoginHistory2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserLoginHistoryResp_userLoginHistories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserLoginHistoryResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserLoginHistory_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserLoginHistory_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserLoginHistory_ipAddress(ctx, field)
			case "country":
				return ec.fieldContext_UserLoginHistory_country(ctx, field)
			case "administrativeArea":
				return ec.fieldContext_UserLoginHistory_administrativeArea(ctx, field)
			case "deviceOS":
				return ec.fieldContext_UserLoginHistory_deviceOS(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserLoginHistory_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserLoginHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserLoginHistoryResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserLoginHistoryResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserLoginHistoryResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalOMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserLoginHistoryResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserLoginHistoryResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserResp_users(ctx context.Context, field graphql.CollectedField, obj *view.ListUserResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserResp_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserResp_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "accountType":
				return ec.fieldContext_User_accountType(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_User_aliasName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "area":
				return ec.fieldContext_User_area(ctx, field)
			case "notes":
				return ec.fieldContext_User_notes(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "lastLoginIP":
				return ec.fieldContext_User_lastLoginIP(ctx, field)
			case "isDelete":
				return ec.fieldContext_User_isDelete(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_User_updateUserID(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "whitelists":
				return ec.fieldContext_User_whitelists(ctx, field)
			case "tags":
				return ec.fieldContext_User_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserRoleResp_userRoles(ctx context.Context, field graphql.CollectedField, obj *view.ListUserRoleResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserRoleResp_userRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRoles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserRole)
	fc.Result = res
	return ec.marshalNUserRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserRoleResp_userRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserRoleResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserRole_userID(ctx, field)
			case "roleID":
				return ec.fieldContext_UserRole_roleID(ctx, field)
			case "isAdmin":
				return ec.fieldContext_UserRole_isAdmin(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserRole_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserRole_updateUserID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserRole_updatedAt(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserRoleResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserRoleResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserRoleResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserRoleResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserRoleResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserTagResp_userTags(ctx context.Context, field graphql.CollectedField, obj *view.ListUserTagResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserTagResp_userTags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserTag)
	fc.Result = res
	return ec.marshalNUserTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserTagResp_userTags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserTagResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserTag_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserTag_userID(ctx, field)
			case "tagID":
				return ec.fieldContext_UserTag_tagID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserTag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserTag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserTag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserTag_updateUserID(ctx, field)
			case "tag":
				return ec.fieldContext_UserTag_tag(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserTag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserTagResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserTagResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserTagResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserTagResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserTagResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserWhitelistResp_userWhitelists(ctx context.Context, field graphql.CollectedField, obj *view.ListUserWhitelistResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserWhitelistResp_userWhitelists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserWhitelists, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserWhitelist)
	fc.Result = res
	return ec.marshalNUserWhitelist2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserWhitelistResp_userWhitelists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserWhitelistResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserWhitelist_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserWhitelist_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserWhitelist_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserWhitelist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserWhitelistResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserWhitelistResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserWhitelistResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserWhitelistResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserWhitelistResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginResp_token(ctx context.Context, field graphql.CollectedField, obj *view.LoginResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginResp_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginResp_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginResp_deviceUID(ctx context.Context, field graphql.CollectedField, obj *view.LoginResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginResp_deviceUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginResp_deviceUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginResp_userAgent(ctx context.Context, field graphql.CollectedField, obj *view.LoginResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginResp_userAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginResp_userAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_name(ctx context.Context, field graphql.CollectedField, obj *view.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_key(ctx context.Context, field graphql.CollectedField, obj *view.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_superKey(ctx context.Context, field graphql.CollectedField, obj *view.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_superKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_superKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_next(ctx context.Context, field graphql.CollectedField, obj *view.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_next(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Next, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Menu)
	fc.Result = res
	return ec.marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_next(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Menu_name(ctx, field)
			case "key":
				return ec.fieldContext_Menu_key(ctx, field)
			case "superKey":
				return ec.fieldContext_Menu_superKey(ctx, field)
			case "next":
				return ec.fieldContext_Menu_next(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Menu", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_total(ctx context.Context, field graphql.CollectedField, obj *view.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_page(ctx context.Context, field graphql.CollectedField, obj *view.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_perPage(ctx context.Context, field graphql.CollectedField, obj *view.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_perPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_perPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_totalPage(ctx context.Context, field graphql.CollectedField, obj *view.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_totalPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_totalPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAuditLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAuditLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAuditLog(rctx, fc.Args["in"].(view.AuditLogCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAuditLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAuditLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateCommonUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateCommonUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCommonUser(rctx, fc.Args["in"].(view.CreateCommonUserReqInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.CreateCommonUserResp)
	fc.Result = res
	return ec.marshalNCreateCommonUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateCommonUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_CreateCommonUserResp_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateCommonUserResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateCommonUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, fc.Args["in"].(view.LoginReqInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.LoginResp)
	fc.Result = res
	return ec.marshalNLoginResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_LoginResp_token(ctx, field)
			case "deviceUID":
				return ec.fieldContext_LoginResp_deviceUID(ctx, field)
			case "userAgent":
				return ec.fieldContext_LoginResp_userAgent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LoginResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Logout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Logout(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Logout(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_FlushAllCache(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_FlushAllCache(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().FlushAllCache(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_FlushAllCache(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_RefreshToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_RefreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RefreshToken(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.RefreshTokenResp)
	fc.Result = res
	return ec.marshalNRefreshTokenResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRefreshTokenResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_RefreshToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_RefreshTokenResp_token(ctx, field)
			case "expires":
				return ec.fieldContext_RefreshTokenResp_expires(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RefreshTokenResp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRole(rctx, fc.Args["in"].(view.RoleCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRole(rctx, fc.Args["filter"].(view.RoleFilterInput), fc.Args["in"].(view.RoleUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRole(rctx, fc.Args["filter"].(view.RoleFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateHostsDeny(rctx, fc.Args["in"].(view.HostsDenyCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.HostsDeny)
	fc.Result = res
	return ec.marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HostsDeny_id(ctx, field)
			case "ipAddress":
				return ec.fieldContext_HostsDeny_ipAddress(ctx, field)
			case "isEnabled":
				return ec.fieldContext_HostsDeny_isEnabled(ctx, field)
			case "remark":
				return ec.fieldContext_HostsDeny_remark(ctx, field)
			case "createdAt":
				return ec.fieldContext_HostsDeny_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_HostsDeny_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HostsDeny_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_HostsDeny_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HostsDeny", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateHostsDeny(rctx, fc.Args["filter"].(view.HostsDenyFilterInput), fc.Args["in"].(view.HostsDenyUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.HostsDeny)
	fc.Result = res
	return ec.marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HostsDeny_id(ctx, field)
			case "ipAddress":
				return ec.fieldContext_HostsDeny_ipAddress(ctx, field)
			case "isEnabled":
				return ec.fieldContext_HostsDeny_isEnabled(ctx, field)
			case "remark":
				return ec.fieldContext_HostsDeny_remark(ctx, field)
			case "createdAt":
				return ec.fieldContext_HostsDeny_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_HostsDeny_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HostsDeny_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_HostsDeny_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HostsDeny", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteHostsDeny(rctx, fc.Args["filter"].(view.HostsDenyFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTag(rctx, fc.Args["in"].(view.TagCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTag(rctx, fc.Args["filter"].(view.TagFilterInput), fc.Args["in"].(view.TagUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTag(rctx, fc.Args["filter"].(view.TagFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["in"].(view.CreateUserReqInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.CreateUserResp)
	fc.Result = res
	return ec.marshalNCreateUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_CreateUserResp_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateUserResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["filter"].(view.UserFilterInput), fc.Args["in"].(view.UserUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, fc.Args["filter"].(view.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserPassword(rctx, fc.Args["in"].(view.UserUpdatePasswordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserWhitelist(rctx, fc.Args["in"].(view.UserWhitelistCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserWhitelist(rctx, fc.Args["filter"].(view.UserWhitelistFilterInput), fc.Args["in"].(view.UserWhitelistUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserWhitelist(rctx, fc.Args["filter"].(view.UserWhitelistFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserRole(rctx, fc.Args["in"].(view.UserRoleCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserRole(rctx, fc.Args["filter"].(view.UserRoleFilterInput), fc.Args["in"].(view.UserRoleUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserRole(rctx, fc.Args["filter"].(view.UserRoleFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserTag(rctx, fc.Args["in"].(view.UserTagCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserTag(rctx, fc.Args["filter"].(view.UserTagFilterInput), fc.Args["in"].(view.UserTagUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserTag(rctx, fc.Args["filter"].(view.UserTagFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAuditLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAuditLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAuditLog(rctx, fc.Args["filter"].(view.AuditLogFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.AuditLog)
	fc.Result = res
	return ec.marshalNAuditLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLog(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAuditLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuditLog_id(ctx, field)
			case "userID":
				return ec.fieldContext_AuditLog_userID(ctx, field)
			case "method":
				return ec.fieldContext_AuditLog_method(ctx, field)
			case "requestInput":
				return ec.fieldContext_AuditLog_requestInput(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuditLog_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditLog", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAuditLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listAuditLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listAuditLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListAuditLog(rctx, fc.Args["filter"].(view.AuditLogFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListAuditLogResp)
	fc.Result = res
	return ec.marshalNListAuditLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListAuditLogResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listAuditLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "auditLogs":
				return ec.fieldContext_ListAuditLogResp_auditLogs(ctx, field)
			case "meta":
				return ec.fieldContext_ListAuditLogResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListAuditLogResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listAuditLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_Me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Me(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Me(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Claims)
	fc.Result = res
	return ec.marshalNClaims2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐClaims(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Me(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Claims_id(ctx, field)
			case "accountType":
				return ec.fieldContext_Claims_accountType(ctx, field)
			case "status":
				return ec.fieldContext_Claims_status(ctx, field)
			case "username":
				return ec.fieldContext_Claims_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_Claims_aliasName(ctx, field)
			case "avatarURL":
				return ec.fieldContext_Claims_avatarURL(ctx, field)
			case "whitelists":
				return ec.fieldContext_Claims_whitelists(ctx, field)
			case "menu":
				return ec.fieldContext_Claims_menu(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Claims", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listHubClients(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listHubClients(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListHubClients(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.HubClient)
	fc.Result = res
	return ec.marshalNHubClient2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubClientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listHubClients(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userID":
				return ec.fieldContext_HubClient_userID(ctx, field)
			case "devices":
				return ec.fieldContext_HubClient_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HubClient", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMenu(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMenu(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMenu(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Menu)
	fc.Result = res
	return ec.marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMenu(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Menu_name(ctx, field)
			case "key":
				return ec.fieldContext_Menu_key(ctx, field)
			case "superKey":
				return ec.fieldContext_Menu_superKey(ctx, field)
			case "next":
				return ec.fieldContext_Menu_next(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Menu", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRole(rctx, fc.Args["filter"].(view.RoleFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Role)
	fc.Result = res
	return ec.marshalNRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "name":
				return ec.fieldContext_Role_name(ctx, field)
			case "authority":
				return ec.fieldContext_Role_authority(ctx, field)
			case "supportAccountType":
				return ec.fieldContext_Role_supportAccountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Role_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Role_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListRole(rctx, fc.Args["filter"].(view.RoleFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListRoleResp)
	fc.Result = res
	return ec.marshalNListRoleResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListRoleResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "roles":
				return ec.fieldContext_ListRoleResp_roles(ctx, field)
			case "meta":
				return ec.fieldContext_ListRoleResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListRoleResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHostsDeny(rctx, fc.Args["filter"].(view.HostsDenyFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.HostsDeny)
	fc.Result = res
	return ec.marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HostsDeny_id(ctx, field)
			case "ipAddress":
				return ec.fieldContext_HostsDeny_ipAddress(ctx, field)
			case "isEnabled":
				return ec.fieldContext_HostsDeny_isEnabled(ctx, field)
			case "remark":
				return ec.fieldContext_HostsDeny_remark(ctx, field)
			case "createdAt":
				return ec.fieldContext_HostsDeny_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_HostsDeny_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HostsDeny_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_HostsDeny_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HostsDeny", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListHostsDeny(rctx, fc.Args["filter"].(*view.HostsDenyFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListHostsDenyResp)
	fc.Result = res
	return ec.marshalNListHostsDenyResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListHostsDenyResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hostsDenys":
				return ec.fieldContext_ListHostsDenyResp_hostsDenys(ctx, field)
			case "meta":
				return ec.fieldContext_ListHostsDenyResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListHostsDenyResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTag(rctx, fc.Args["filter"].(view.TagFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "RGBHex":
				return ec.fieldContext_Tag_RGBHex(ctx, field)
			case "isEnable":
				return ec.fieldContext_Tag_isEnable(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Tag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Tag_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListTag(rctx, fc.Args["filter"].(view.TagFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListTagResp)
	fc.Result = res
	return ec.marshalNListTagResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListTagResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tags":
				return ec.fieldContext_ListTagResp_tags(ctx, field)
			case "meta":
				return ec.fieldContext_ListTagResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListTagResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUser(rctx, fc.Args["filter"].(view.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.User)
	fc.Result = res
	return ec.marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "accountType":
				return ec.fieldContext_User_accountType(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_User_aliasName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "area":
				return ec.fieldContext_User_area(ctx, field)
			case "notes":
				return ec.fieldContext_User_notes(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "lastLoginIP":
				return ec.fieldContext_User_lastLoginIP(ctx, field)
			case "isDelete":
				return ec.fieldContext_User_isDelete(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_User_updateUserID(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "whitelists":
				return ec.fieldContext_User_whitelists(ctx, field)
			case "tags":
				return ec.fieldContext_User_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUser(rctx, fc.Args["filter"].(view.UserFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserResp)
	fc.Result = res
	return ec.marshalNListUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "users":
				return ec.fieldContext_ListUserResp_users(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserWhitelist(rctx, fc.Args["filter"].(view.UserWhitelistFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.UserWhitelist)
	fc.Result = res
	return ec.marshalNUserWhitelist2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelist(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserWhitelist_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserWhitelist_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserWhitelist_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserWhitelist", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserWhitelist(rctx, fc.Args["filter"].(view.UserWhitelistFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserWhitelistResp)
	fc.Result = res
	return ec.marshalNListUserWhitelistResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserWhitelistResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userWhitelists":
				return ec.fieldContext_ListUserWhitelistResp_userWhitelists(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserWhitelistResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserWhitelistResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserRole(rctx, fc.Args["filter"].(view.UserRoleFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.UserRole)
	fc.Result = res
	return ec.marshalNUserRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserRole_userID(ctx, field)
			case "roleID":
				return ec.fieldContext_UserRole_roleID(ctx, field)
			case "isAdmin":
				return ec.fieldContext_UserRole_isAdmin(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserRole_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserRole_updateUserID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserRole_updatedAt(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserRole(rctx, fc.Args["filter"].(view.UserRoleFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserRoleResp)
	fc.Result = res
	return ec.marshalNListUserRoleResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserRoleResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userRoles":
				return ec.fieldContext_ListUserRoleResp_userRoles(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserRoleResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserRoleResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserTag(rctx, fc.Args["filter"].(view.UserTagFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.UserTag)
	fc.Result = res
	return ec.marshalNUserTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserTag_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserTag_userID(ctx, field)
			case "tagID":
				return ec.fieldContext_UserTag_tagID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserTag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserTag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserTag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserTag_updateUserID(ctx, field)
			case "tag":
				return ec.fieldContext_UserTag_tag(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserTag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserTag(rctx, fc.Args["filter"].(view.UserTagFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserTagResp)
	fc.Result = res
	return ec.marshalNListUserTagResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserTagResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userTags":
				return ec.fieldContext_ListUserTagResp_userTags(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserTagResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserTagResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserLoginHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserLoginHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserLoginHistory(rctx, fc.Args["filter"].(view.UserLoginHistoryFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserLoginHistoryResp)
	fc.Result = res
	return ec.marshalNListUserLoginHistoryResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserLoginHistoryResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserLoginHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userLoginHistories":
				return ec.fieldContext_ListUserLoginHistoryResp_userLoginHistories(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserLoginHistoryResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserLoginHistoryResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUserLoginHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RefreshTokenResp_token(ctx context.Context, field graphql.CollectedField, obj *view.RefreshTokenResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RefreshTokenResp_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RefreshTokenResp_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RefreshTokenResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RefreshTokenResp_expires(ctx context.Context, field graphql.CollectedField, obj *view.RefreshTokenResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RefreshTokenResp_expires(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expires, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RefreshTokenResp_expires(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RefreshTokenResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_id(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_name(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_authority(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_authority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Menu)
	fc.Result = res
	return ec.marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_authority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Menu_name(ctx, field)
			case "key":
				return ec.fieldContext_Menu_key(ctx, field)
			case "superKey":
				return ec.fieldContext_Menu_superKey(ctx, field)
			case "next":
				return ec.fieldContext_Menu_next(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Menu", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_supportAccountType(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_supportAccountType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportAccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.AccountType)
	fc.Result = res
	return ec.marshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_supportAccountType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_receiveMessage(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_receiveMessage(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ReceiveMessage(rctx, fc.Args["userAuth"].(view.UserAuth))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNString2string(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_receiveMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_receiveMessage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_RGBHex(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_RGBHex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RGBHex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_RGBHex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_isEnable(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_isEnable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_isEnable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_accountType(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_accountType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.AccountType)
	fc.Result = res
	return ec.marshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_accountType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_status(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.UserStatus)
	fc.Result = res
	return ec.marshalNUserStatus2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_aliasName(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_aliasName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AliasName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_aliasName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_area(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_area(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_area(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_notes(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_notes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_notes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_avatarURL(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_avatarURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_avatarURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastLoginAt(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastLoginAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastLoginAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastLoginIP(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastLoginIP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastLoginIP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isDelete(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_roles(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserRole)
	fc.Result = res
	return ec.marshalNUserRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserRole_userID(ctx, field)
			case "roleID":
				return ec.fieldContext_UserRole_roleID(ctx, field)
			case "isAdmin":
				return ec.fieldContext_UserRole_isAdmin(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserRole_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserRole_updateUserID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserRole_updatedAt(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_whitelists(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_whitelists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Whitelists, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserWhitelist)
	fc.Result = res
	return ec.marshalNUserWhitelist2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_whitelists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserWhitelist_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserWhitelist_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserWhitelist_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserWhitelist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_tags(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserTag)
	fc.Result = res
	return ec.marshalNUserTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserTag_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserTag_userID(ctx, field)
			case "tagID":
				return ec.fieldContext_UserTag_tagID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserTag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserTag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserTag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserTag_updateUserID(ctx, field)
			case "tag":
				return ec.fieldContext_UserTag_tag(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserTag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_id(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_ipAddress(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_ipAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_ipAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_country(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_administrativeArea(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_administrativeArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdministrativeArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_administrativeArea(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_deviceOS(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_deviceOS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceOs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.DeviceOs)
	fc.Result = res
	return ec.marshalNDeviceOS2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐDeviceOs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_deviceOS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeviceOS does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_id(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_roleID(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_roleID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_roleID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_isAdmin(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_isAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_isAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_role(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Role)
	fc.Result = res
	return ec.marshalNRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "name":
				return ec.fieldContext_Role_name(ctx, field)
			case "authority":
				return ec.fieldContext_Role_authority(ctx, field)
			case "supportAccountType":
				return ec.fieldContext_Role_supportAccountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Role_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Role_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_id(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_tagID(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_tagID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_tagID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_tag(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_tag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_tag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "RGBHex":
				return ec.fieldContext_Tag_RGBHex(ctx, field)
			case "isEnable":
				return ec.fieldContext_Tag_isEnable(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Tag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Tag_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWhitelist_id(ctx context.Context, field graphql.CollectedField, obj *view.UserWhitelist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWhitelist_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWhitelist_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWhitelist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWhitelist_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserWhitelist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWhitelist_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWhitelist_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWhitelist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWhitelist_ipAddress(ctx context.Context, field graphql.CollectedField, obj *view.UserWhitelist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWhitelist_ipAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWhitelist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWhitelist_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserWhitelist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWhitelist_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWhitelist_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWhitelist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAuditLogCreateInput(ctx context.Context, obj interface{}) (view.AuditLogCreateInput, error) {
	var it view.AuditLogCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"method", "userID", "requestInput"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "requestInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestInput"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequestInput = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditLogFilterInput(ctx context.Context, obj interface{}) (view.AuditLogFilterInput, error) {
	var it view.AuditLogFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"auditLog", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "auditLog":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auditLog"))
			data, err := ec.unmarshalOAuditLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuditLog = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditLogInput(ctx context.Context, obj interface{}) (view.AuditLogInput, error) {
	var it view.AuditLogInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "method", "userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBaseFilterInput(ctx context.Context, obj interface{}) (view.BaseFilterInput, error) {
	var it view.BaseFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"IDs", "searchIn", "keyword", "createdAtLT", "createdAtLTE", "createdAtGT", "createdAtGTE", "sortField", "sortType", "rangeField", "rangeType", "lessThan", "lessThanEqual", "greaterThan", "greaterThanEqual"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "IDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IDs"))
			data, err := ec.unmarshalOUint642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDs = data
		case "searchIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchIn"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SearchIn = data
		case "keyword":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLt = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLte = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGt = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGte = data
		case "sortField":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortField"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SortField = data
		case "sortType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortType"))
			data, err := ec.unmarshalOSortType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSortType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SortType = data
		case "rangeField":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rangeField"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RangeField = data
		case "rangeType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rangeType"))
			data, err := ec.unmarshalORangeType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRangeType(ctx, v)
			if err != nil {
				return it, err
			}
			it.RangeType = data
		case "lessThan":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessThan"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LessThan = data
		case "lessThanEqual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessThanEqual"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LessThanEqual = data
		case "greaterThan":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("greaterThan"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GreaterThan = data
		case "greaterThanEqual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("greaterThanEqual"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GreaterThanEqual = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCommonUserReqInput(ctx context.Context, obj interface{}) (view.CreateCommonUserReqInput, error) {
	var it view.CreateCommonUserReqInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password", "accountType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUploadURLInput(ctx context.Context, obj interface{}) (view.CreateUploadURLInput, error) {
	var it view.CreateUploadURLInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"expireSec", "files"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "expireSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expireSec"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpireSec = data
		case "files":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files"))
			data, err := ec.unmarshalNFileInfoInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfoInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Files = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserReqInput(ctx context.Context, obj interface{}) (view.CreateUserReqInput, error) {
	var it view.CreateUserReqInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password", "accountType", "aliasName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "aliasName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliasName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AliasName = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFileInfoInput(ctx context.Context, obj interface{}) (view.FileInfoInput, error) {
	var it view.FileInfoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fileName", "size", "md5"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fileName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileName = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "md5":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("md5"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Md5 = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHostsDenyCreateInput(ctx context.Context, obj interface{}) (view.HostsDenyCreateInput, error) {
	var it view.HostsDenyCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ipAddress", "isEnabled", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		case "isEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnabled"))
			data, err := ec.unmarshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnabled = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHostsDenyFilterInput(ctx context.Context, obj interface{}) (view.HostsDenyFilterInput, error) {
	var it view.HostsDenyFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"hostsDeny", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "hostsDeny":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostsDeny"))
			data, err := ec.unmarshalOHostsDenyInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostsDeny = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHostsDenyInput(ctx context.Context, obj interface{}) (view.HostsDenyInput, error) {
	var it view.HostsDenyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "ipAddress", "isEnabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		case "isEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnabled"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHostsDenyUpdateInput(ctx context.Context, obj interface{}) (view.HostsDenyUpdateInput, error) {
	var it view.HostsDenyUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ipAddress", "isEnabled", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		case "isEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnabled"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnabled = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginReqInput(ctx context.Context, obj interface{}) (view.LoginReqInput, error) {
	var it view.LoginReqInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMenuInput(ctx context.Context, obj interface{}) (view.MenuInput, error) {
	var it view.MenuInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "next"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "next":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("next"))
			data, err := ec.unmarshalNMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Next = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (view.PaginationInput, error) {
	var it view.PaginationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "perPage", "offsetType", "offsetID", "limit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = data
		case "offsetType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offsetType"))
			data, err := ec.unmarshalOOffsetType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐOffsetType(ctx, v)
			if err != nil {
				return it, err
			}
			it.OffsetType = data
		case "offsetID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offsetID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OffsetID = data
		case "limit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Limit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleCreateInput(ctx context.Context, obj interface{}) (view.RoleCreateInput, error) {
	var it view.RoleCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "supportAccountType", "authority"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "supportAccountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportAccountType"))
			data, err := ec.unmarshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupportAccountType = data
		case "authority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authority"))
			data, err := ec.unmarshalNMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Authority = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleFilterInput(ctx context.Context, obj interface{}) (view.RoleFilterInput, error) {
	var it view.RoleFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalORoleInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleInput(ctx context.Context, obj interface{}) (view.RoleInput, error) {
	var it view.RoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "supportAccountType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "supportAccountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportAccountType"))
			data, err := ec.unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupportAccountType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleUpdateInput(ctx context.Context, obj interface{}) (view.RoleUpdateInput, error) {
	var it view.RoleUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "supportAccountType", "authority"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "supportAccountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportAccountType"))
			data, err := ec.unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupportAccountType = data
		case "authority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authority"))
			data, err := ec.unmarshalOMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Authority = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagCreateInput(ctx context.Context, obj interface{}) (view.TagCreateInput, error) {
	var it view.TagCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "RGBHex"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "RGBHex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RGBHex"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RGBHex = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagFilterInput(ctx context.Context, obj interface{}) (view.TagFilterInput, error) {
	var it view.TagFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tag", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tag":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			data, err := ec.unmarshalOTagInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tag = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagInput(ctx context.Context, obj interface{}) (view.TagInput, error) {
	var it view.TagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "isEnable"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "isEnable":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnable"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnable = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagUpdateInput(ctx context.Context, obj interface{}) (view.TagUpdateInput, error) {
	var it view.TagUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "RGBHex", "isEnable"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "RGBHex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RGBHex"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RGBHex = data
		case "isEnable":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnable"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnable = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserAuth(ctx context.Context, obj interface{}) (view.UserAuth, error) {
	var it view.UserAuth
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"token", "deviceUID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "deviceUID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deviceUID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeviceUID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilterInput(ctx context.Context, obj interface{}) (view.UserFilterInput, error) {
	var it view.UserFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user", "baseFilter", "tagIDs", "roleIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			data, err := ec.unmarshalOUserInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.User = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		case "tagIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagIDs"))
			data, err := ec.unmarshalOUint642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagIDs = data
		case "roleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIDs"))
			data, err := ec.unmarshalOUint642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (view.UserInput, error) {
	var it view.UserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "accountType", "status", "username", "aliasName", "email", "area", "notes", "avatarURL"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOUserStatus2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "aliasName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliasName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AliasName = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "area":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Area = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		case "avatarURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLoginHistoryFilterInput(ctx context.Context, obj interface{}) (view.UserLoginHistoryFilterInput, error) {
	var it view.UserLoginHistoryFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"baseFilter", "userLoginHistory"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		case "userLoginHistory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLoginHistory"))
			data, err := ec.unmarshalOUserLoginHistoryInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLoginHistory = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLoginHistoryInput(ctx context.Context, obj interface{}) (view.UserLoginHistoryInput, error) {
	var it view.UserLoginHistoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleCreateInput(ctx context.Context, obj interface{}) (view.UserRoleCreateInput, error) {
	var it view.UserRoleCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "roleID", "isAdmin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "roleID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleID = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleFilterInput(ctx context.Context, obj interface{}) (view.UserRoleFilterInput, error) {
	var it view.UserRoleFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userRole", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userRole":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userRole"))
			data, err := ec.unmarshalOUserRoleInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserRole = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleInput(ctx context.Context, obj interface{}) (view.UserRoleInput, error) {
	var it view.UserRoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userID", "roleID", "isAdmin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "roleID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleID = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleUpdateInput(ctx context.Context, obj interface{}) (view.UserRoleUpdateInput, error) {
	var it view.UserRoleUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roleID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roleID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTagCreateInput(ctx context.Context, obj interface{}) (view.UserTagCreateInput, error) {
	var it view.UserTagCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "tagID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "tagID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTagFilterInput(ctx context.Context, obj interface{}) (view.UserTagFilterInput, error) {
	var it view.UserTagFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userTag", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userTag":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTag"))
			data, err := ec.unmarshalOUserTagInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTag = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTagInput(ctx context.Context, obj interface{}) (view.UserTagInput, error) {
	var it view.UserTagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userID", "tagID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "tagID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTagUpdateInput(ctx context.Context, obj interface{}) (view.UserTagUpdateInput, error) {
	var it view.UserTagUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tagID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tagID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateInput(ctx context.Context, obj interface{}) (view.UserUpdateInput, error) {
	var it view.UserUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "aliasName", "area", "notes", "avatarContent", "accountType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOUserStatus2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "aliasName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliasName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AliasName = data
		case "area":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Area = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		case "avatarContent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarContent"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarContent = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdatePasswordInput(ctx context.Context, obj interface{}) (view.UserUpdatePasswordInput, error) {
	var it view.UserUpdatePasswordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhitelistCreateInput(ctx context.Context, obj interface{}) (view.UserWhitelistCreateInput, error) {
	var it view.UserWhitelistCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "ipAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhitelistFilterInput(ctx context.Context, obj interface{}) (view.UserWhitelistFilterInput, error) {
	var it view.UserWhitelistFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userWhitelist", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userWhitelist":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userWhitelist"))
			data, err := ec.unmarshalOUserWhitelistInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserWhitelist = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhitelistInput(ctx context.Context, obj interface{}) (view.UserWhitelistInput, error) {
	var it view.UserWhitelistInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userID", "ipAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhitelistUpdateInput(ctx context.Context, obj interface{}) (view.UserWhitelistUpdateInput, error) {
	var it view.UserWhitelistUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ipAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Data(ctx context.Context, sel ast.SelectionSet, obj view.Data) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case view.File:
		return ec._File(ctx, sel, &obj)
	case *view.File:
		if obj == nil {
			return graphql.Null
		}
		return ec._File(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var auditLogImplementors = []string{"AuditLog"}

func (ec *executionContext) _AuditLog(ctx context.Context, sel ast.SelectionSet, obj *view.AuditLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditLog")
		case "id":
			out.Values[i] = ec._AuditLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._AuditLog_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "method":
			out.Values[i] = ec._AuditLog_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requestInput":
			out.Values[i] = ec._AuditLog_requestInput(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._AuditLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var claimsImplementors = []string{"Claims"}

func (ec *executionContext) _Claims(ctx context.Context, sel ast.SelectionSet, obj *view.Claims) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, claimsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Claims")
		case "id":
			out.Values[i] = ec._Claims_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountType":
			out.Values[i] = ec._Claims_accountType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Claims_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._Claims_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "aliasName":
			out.Values[i] = ec._Claims_aliasName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "avatarURL":
			out.Values[i] = ec._Claims_avatarURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "whitelists":
			out.Values[i] = ec._Claims_whitelists(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "menu":
			out.Values[i] = ec._Claims_menu(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commonImplementors = []string{"Common"}

func (ec *executionContext) _Common(ctx context.Context, sel ast.SelectionSet, obj *view.Common) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Common")
		case "creatorID":
			out.Values[i] = ec._Common_creatorID(ctx, field, obj)
		case "creatorName":
			out.Values[i] = ec._Common_creatorName(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Common_createdAt(ctx, field, obj)
		case "updaterID":
			out.Values[i] = ec._Common_updaterID(ctx, field, obj)
		case "updaterName":
			out.Values[i] = ec._Common_updaterName(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Common_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createCommonUserRespImplementors = []string{"CreateCommonUserResp"}

func (ec *executionContext) _CreateCommonUserResp(ctx context.Context, sel ast.SelectionSet, obj *view.CreateCommonUserResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCommonUserRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCommonUserResp")
		case "user":
			out.Values[i] = ec._CreateCommonUserResp_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createUploadURLRespImplementors = []string{"CreateUploadURLResp"}

func (ec *executionContext) _CreateUploadURLResp(ctx context.Context, sel ast.SelectionSet, obj *view.CreateUploadURLResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createUploadURLRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateUploadURLResp")
		case "files":
			out.Values[i] = ec._CreateUploadURLResp_files(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createUserRespImplementors = []string{"CreateUserResp"}

func (ec *executionContext) _CreateUserResp(ctx context.Context, sel ast.SelectionSet, obj *view.CreateUserResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createUserRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateUserResp")
		case "user":
			out.Values[i] = ec._CreateUserResp_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dataListImplementors = []string{"DataList"}

func (ec *executionContext) _DataList(ctx context.Context, sel ast.SelectionSet, obj *view.DataList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataList")
		case "data":
			out.Values[i] = ec._DataList_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._DataList_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileImplementors = []string{"File", "Data"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *view.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "id":
			out.Values[i] = ec._File_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._File_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._File_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contentType":
			out.Values[i] = ec._File_contentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileInfoImplementors = []string{"FileInfo"}

func (ec *executionContext) _FileInfo(ctx context.Context, sel ast.SelectionSet, obj *view.FileInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileInfo")
		case "fileName":
			out.Values[i] = ec._FileInfo_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uploadURL":
			out.Values[i] = ec._FileInfo_uploadURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var hostsDenyImplementors = []string{"HostsDeny"}

func (ec *executionContext) _HostsDeny(ctx context.Context, sel ast.SelectionSet, obj *view.HostsDeny) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hostsDenyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HostsDeny")
		case "id":
			out.Values[i] = ec._HostsDeny_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ipAddress":
			out.Values[i] = ec._HostsDeny_ipAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isEnabled":
			out.Values[i] = ec._HostsDeny_isEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "remark":
			out.Values[i] = ec._HostsDeny_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._HostsDeny_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._HostsDeny_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._HostsDeny_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._HostsDeny_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var hubClientImplementors = []string{"HubClient"}

func (ec *executionContext) _HubClient(ctx context.Context, sel ast.SelectionSet, obj *view.HubClient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hubClientImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HubClient")
		case "userID":
			out.Values[i] = ec._HubClient_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "devices":
			out.Values[i] = ec._HubClient_devices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var hubDeviceImplementors = []string{"HubDevice"}

func (ec *executionContext) _HubDevice(ctx context.Context, sel ast.SelectionSet, obj *view.HubDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hubDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HubDevice")
		case "token":
			out.Values[i] = ec._HubDevice_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deviceUID":
			out.Values[i] = ec._HubDevice_deviceUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roomID":
			out.Values[i] = ec._HubDevice_roomID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listAuditLogRespImplementors = []string{"ListAuditLogResp"}

func (ec *executionContext) _ListAuditLogResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListAuditLogResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listAuditLogRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListAuditLogResp")
		case "auditLogs":
			out.Values[i] = ec._ListAuditLogResp_auditLogs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListAuditLogResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listHostsDenyRespImplementors = []string{"ListHostsDenyResp"}

func (ec *executionContext) _ListHostsDenyResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListHostsDenyResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listHostsDenyRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListHostsDenyResp")
		case "hostsDenys":
			out.Values[i] = ec._ListHostsDenyResp_hostsDenys(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListHostsDenyResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMetadataImplementors = []string{"ListMetadata"}

func (ec *executionContext) _ListMetadata(ctx context.Context, sel ast.SelectionSet, obj *view.ListMetadata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMetadataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMetadata")
		case "count":
			out.Values[i] = ec._ListMetadata_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listRoleRespImplementors = []string{"ListRoleResp"}

func (ec *executionContext) _ListRoleResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListRoleResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listRoleRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListRoleResp")
		case "roles":
			out.Values[i] = ec._ListRoleResp_roles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListRoleResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listTagRespImplementors = []string{"ListTagResp"}

func (ec *executionContext) _ListTagResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListTagResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listTagRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListTagResp")
		case "tags":
			out.Values[i] = ec._ListTagResp_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListTagResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserLoginHistoryRespImplementors = []string{"ListUserLoginHistoryResp"}

func (ec *executionContext) _ListUserLoginHistoryResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserLoginHistoryResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserLoginHistoryRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserLoginHistoryResp")
		case "userLoginHistories":
			out.Values[i] = ec._ListUserLoginHistoryResp_userLoginHistories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserLoginHistoryResp_meta(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserRespImplementors = []string{"ListUserResp"}

func (ec *executionContext) _ListUserResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserResp")
		case "users":
			out.Values[i] = ec._ListUserResp_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserRoleRespImplementors = []string{"ListUserRoleResp"}

func (ec *executionContext) _ListUserRoleResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserRoleResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserRoleRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserRoleResp")
		case "userRoles":
			out.Values[i] = ec._ListUserRoleResp_userRoles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserRoleResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserTagRespImplementors = []string{"ListUserTagResp"}

func (ec *executionContext) _ListUserTagResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserTagResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserTagRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserTagResp")
		case "userTags":
			out.Values[i] = ec._ListUserTagResp_userTags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserTagResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserWhitelistRespImplementors = []string{"ListUserWhitelistResp"}

func (ec *executionContext) _ListUserWhitelistResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserWhitelistResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserWhitelistRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserWhitelistResp")
		case "userWhitelists":
			out.Values[i] = ec._ListUserWhitelistResp_userWhitelists(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserWhitelistResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var loginRespImplementors = []string{"LoginResp"}

func (ec *executionContext) _LoginResp(ctx context.Context, sel ast.SelectionSet, obj *view.LoginResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginResp")
		case "token":
			out.Values[i] = ec._LoginResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deviceUID":
			out.Values[i] = ec._LoginResp_deviceUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userAgent":
			out.Values[i] = ec._LoginResp_userAgent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var menuImplementors = []string{"Menu"}

func (ec *executionContext) _Menu(ctx context.Context, sel ast.SelectionSet, obj *view.Menu) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, menuImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Menu")
		case "name":
			out.Values[i] = ec._Menu_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "key":
			out.Values[i] = ec._Menu_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "superKey":
			out.Values[i] = ec._Menu_superKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "next":
			out.Values[i] = ec._Menu_next(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metaImplementors = []string{"Meta"}

func (ec *executionContext) _Meta(ctx context.Context, sel ast.SelectionSet, obj *view.Meta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Meta")
		case "total":
			out.Values[i] = ec._Meta_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._Meta_page(ctx, field, obj)
		case "perPage":
			out.Values[i] = ec._Meta_perPage(ctx, field, obj)
		case "totalPage":
			out.Values[i] = ec._Meta_totalPage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAuditLog":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAuditLog(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "CreateCommonUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateCommonUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Login":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Login(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Logout":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Logout(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "FlushAllCache":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_FlushAllCache(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "RefreshToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_RefreshToken(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createHostsDeny":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createHostsDeny(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateHostsDeny":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateHostsDeny(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteHostsDeny":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteHostsDeny(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserPassword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserWhitelist":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserWhitelist(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserWhitelist":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserWhitelist(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUserWhitelist":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserWhitelist(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUserRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUserTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getAuditLog":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAuditLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listAuditLog":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listAuditLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Me":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Me(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listHubClients":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listHubClients(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMenu":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMenu(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getHostsDeny":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHostsDeny(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listHostsDeny":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listHostsDeny(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTag":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTag(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listTag":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listTag(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserWhitelist":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserWhitelist(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUserWhitelist":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserWhitelist(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUserRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserTag":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserTag(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUserTag":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserTag(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUserLoginHistory":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserLoginHistory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var refreshTokenRespImplementors = []string{"RefreshTokenResp"}

func (ec *executionContext) _RefreshTokenResp(ctx context.Context, sel ast.SelectionSet, obj *view.RefreshTokenResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, refreshTokenRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RefreshTokenResp")
		case "token":
			out.Values[i] = ec._RefreshTokenResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expires":
			out.Values[i] = ec._RefreshTokenResp_expires(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *view.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "id":
			out.Values[i] = ec._Role_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Role_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authority":
			out.Values[i] = ec._Role_authority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "supportAccountType":
			out.Values[i] = ec._Role_supportAccountType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Role_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._Role_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Role_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._Role_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "receiveMessage":
		return ec._Subscription_receiveMessage(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *view.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":
			out.Values[i] = ec._Tag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Tag_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "RGBHex":
			out.Values[i] = ec._Tag_RGBHex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isEnable":
			out.Values[i] = ec._Tag_isEnable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Tag_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Tag_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._Tag_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._Tag_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *view.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountType":
			out.Values[i] = ec._User_accountType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._User_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "aliasName":
			out.Values[i] = ec._User_aliasName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "area":
			out.Values[i] = ec._User_area(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notes":
			out.Values[i] = ec._User_notes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "avatarURL":
			out.Values[i] = ec._User_avatarURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastLoginAt":
			out.Values[i] = ec._User_lastLoginAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastLoginIP":
			out.Values[i] = ec._User_lastLoginIP(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDelete":
			out.Values[i] = ec._User_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._User_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roles":
			out.Values[i] = ec._User_roles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "whitelists":
			out.Values[i] = ec._User_whitelists(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tags":
			out.Values[i] = ec._User_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userLoginHistoryImplementors = []string{"UserLoginHistory"}

func (ec *executionContext) _UserLoginHistory(ctx context.Context, sel ast.SelectionSet, obj *view.UserLoginHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userLoginHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserLoginHistory")
		case "id":
			out.Values[i] = ec._UserLoginHistory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserLoginHistory_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ipAddress":
			out.Values[i] = ec._UserLoginHistory_ipAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "country":
			out.Values[i] = ec._UserLoginHistory_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "administrativeArea":
			out.Values[i] = ec._UserLoginHistory_administrativeArea(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deviceOS":
			out.Values[i] = ec._UserLoginHistory_deviceOS(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserLoginHistory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userRoleImplementors = []string{"UserRole"}

func (ec *executionContext) _UserRole(ctx context.Context, sel ast.SelectionSet, obj *view.UserRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRole")
		case "id":
			out.Values[i] = ec._UserRole_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserRole_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roleID":
			out.Values[i] = ec._UserRole_roleID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isAdmin":
			out.Values[i] = ec._UserRole_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._UserRole_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._UserRole_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserRole_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._UserRole_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "role":
			out.Values[i] = ec._UserRole_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userTagImplementors = []string{"UserTag"}

func (ec *executionContext) _UserTag(ctx context.Context, sel ast.SelectionSet, obj *view.UserTag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userTagImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserTag")
		case "id":
			out.Values[i] = ec._UserTag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserTag_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tagID":
			out.Values[i] = ec._UserTag_tagID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserTag_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._UserTag_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._UserTag_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._UserTag_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tag":
			out.Values[i] = ec._UserTag_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userWhitelistImplementors = []string{"UserWhitelist"}

func (ec *executionContext) _UserWhitelist(ctx context.Context, sel ast.SelectionSet, obj *view.UserWhitelist) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userWhitelistImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserWhitelist")
		case "id":
			out.Values[i] = ec._UserWhitelist_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserWhitelist_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ipAddress":
			out.Values[i] = ec._UserWhitelist_ipAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserWhitelist_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx context.Context, v interface{}) (view.AccountType, error) {
	var res view.AccountType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx context.Context, sel ast.SelectionSet, v view.AccountType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAuditLog2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLog(ctx context.Context, sel ast.SelectionSet, v view.AuditLog) graphql.Marshaler {
	return ec._AuditLog(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuditLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.AuditLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuditLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuditLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLog(ctx context.Context, sel ast.SelectionSet, v *view.AuditLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditLog(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuditLogCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogCreateInput(ctx context.Context, v interface{}) (view.AuditLogCreateInput, error) {
	res, err := ec.unmarshalInputAuditLogCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAuditLogFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogFilterInput(ctx context.Context, v interface{}) (view.AuditLogFilterInput, error) {
	res, err := ec.unmarshalInputAuditLogFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNClaims2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐClaims(ctx context.Context, sel ast.SelectionSet, v view.Claims) graphql.Marshaler {
	return ec._Claims(ctx, sel, &v)
}

func (ec *executionContext) marshalNClaims2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐClaims(ctx context.Context, sel ast.SelectionSet, v *view.Claims) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Claims(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCommonUserReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserReqInput(ctx context.Context, v interface{}) (view.CreateCommonUserReqInput, error) {
	res, err := ec.unmarshalInputCreateCommonUserReqInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateCommonUserResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserResp(ctx context.Context, sel ast.SelectionSet, v view.CreateCommonUserResp) graphql.Marshaler {
	return ec._CreateCommonUserResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateCommonUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserResp(ctx context.Context, sel ast.SelectionSet, v *view.CreateCommonUserResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateCommonUserResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateUserReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserReqInput(ctx context.Context, v interface{}) (view.CreateUserReqInput, error) {
	res, err := ec.unmarshalInputCreateUserReqInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateUserResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserResp(ctx context.Context, sel ast.SelectionSet, v view.CreateUserResp) graphql.Marshaler {
	return ec._CreateUserResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserResp(ctx context.Context, sel ast.SelectionSet, v *view.CreateUserResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateUserResp(ctx, sel, v)
}

func (ec *executionContext) marshalNData2ᚕboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐData(ctx context.Context, sel ast.SelectionSet, v []view.Data) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOData2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNDeviceOS2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐDeviceOs(ctx context.Context, v interface{}) (view.DeviceOs, error) {
	var res view.DeviceOs
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceOS2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐDeviceOs(ctx context.Context, sel ast.SelectionSet, v view.DeviceOs) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFileInfo2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfo(ctx context.Context, sel ast.SelectionSet, v []*view.FileInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFileInfo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNFileInfoInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfoInput(ctx context.Context, v interface{}) ([]*view.FileInfoInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*view.FileInfoInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFileInfoInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfoInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNHostsDeny2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx context.Context, sel ast.SelectionSet, v view.HostsDeny) graphql.Marshaler {
	return ec._HostsDeny(ctx, sel, &v)
}

func (ec *executionContext) marshalNHostsDeny2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.HostsDeny) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx context.Context, sel ast.SelectionSet, v *view.HostsDeny) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HostsDeny(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHostsDenyCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyCreateInput(ctx context.Context, v interface{}) (view.HostsDenyCreateInput, error) {
	res, err := ec.unmarshalInputHostsDenyCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHostsDenyFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx context.Context, v interface{}) (view.HostsDenyFilterInput, error) {
	res, err := ec.unmarshalInputHostsDenyFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHostsDenyUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyUpdateInput(ctx context.Context, v interface{}) (view.HostsDenyUpdateInput, error) {
	res, err := ec.unmarshalInputHostsDenyUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHubClient2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubClientᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.HubClient) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHubClient2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubClient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHubClient2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubClient(ctx context.Context, sel ast.SelectionSet, v *view.HubClient) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HubClient(ctx, sel, v)
}

func (ec *executionContext) marshalNHubDevice2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubDeviceᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.HubDevice) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHubDevice2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHubDevice2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubDevice(ctx context.Context, sel ast.SelectionSet, v *view.HubDevice) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HubDevice(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt642int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNListAuditLogResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListAuditLogResp(ctx context.Context, sel ast.SelectionSet, v view.ListAuditLogResp) graphql.Marshaler {
	return ec._ListAuditLogResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListAuditLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListAuditLogResp(ctx context.Context, sel ast.SelectionSet, v *view.ListAuditLogResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListAuditLogResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListHostsDenyResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListHostsDenyResp(ctx context.Context, sel ast.SelectionSet, v view.ListHostsDenyResp) graphql.Marshaler {
	return ec._ListHostsDenyResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListHostsDenyResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListHostsDenyResp(ctx context.Context, sel ast.SelectionSet, v *view.ListHostsDenyResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListHostsDenyResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListRoleResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListRoleResp(ctx context.Context, sel ast.SelectionSet, v view.ListRoleResp) graphql.Marshaler {
	return ec._ListRoleResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListRoleResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListRoleResp(ctx context.Context, sel ast.SelectionSet, v *view.ListRoleResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListRoleResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListTagResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListTagResp(ctx context.Context, sel ast.SelectionSet, v view.ListTagResp) graphql.Marshaler {
	return ec._ListTagResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListTagResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListTagResp(ctx context.Context, sel ast.SelectionSet, v *view.ListTagResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListTagResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserLoginHistoryResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserLoginHistoryResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserLoginHistoryResp) graphql.Marshaler {
	return ec._ListUserLoginHistoryResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserLoginHistoryResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserLoginHistoryResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserLoginHistoryResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserLoginHistoryResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserResp) graphql.Marshaler {
	return ec._ListUserResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserRoleResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserRoleResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserRoleResp) graphql.Marshaler {
	return ec._ListUserRoleResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserRoleResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserRoleResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserRoleResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserRoleResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserTagResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserTagResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserTagResp) graphql.Marshaler {
	return ec._ListUserTagResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserTagResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserTagResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserTagResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserTagResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserWhitelistResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserWhitelistResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserWhitelistResp) graphql.Marshaler {
	return ec._ListUserWhitelistResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserWhitelistResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserWhitelistResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserWhitelistResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserWhitelistResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLoginReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginReqInput(ctx context.Context, v interface{}) (view.LoginReqInput, error) {
	res, err := ec.unmarshalInputLoginReqInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLoginResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginResp(ctx context.Context, sel ast.SelectionSet, v view.LoginResp) graphql.Marshaler {
	return ec._LoginResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginResp(ctx context.Context, sel ast.SelectionSet, v *view.LoginResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LoginResp(ctx, sel, v)
}

func (ec *executionContext) marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Menu) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMenu2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenu(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMenu2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenu(ctx context.Context, sel ast.SelectionSet, v *view.Menu) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Menu(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx context.Context, v interface{}) ([]*view.MenuInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*view.MenuInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMenuInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMenuInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInput(ctx context.Context, v interface{}) (*view.MenuInput, error) {
	res, err := ec.unmarshalInputMenuInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx context.Context, sel ast.SelectionSet, v *view.Meta) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Meta(ctx, sel, v)
}

func (ec *executionContext) marshalNRefreshTokenResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRefreshTokenResp(ctx context.Context, sel ast.SelectionSet, v view.RefreshTokenResp) graphql.Marshaler {
	return ec._RefreshTokenResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNRefreshTokenResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRefreshTokenResp(ctx context.Context, sel ast.SelectionSet, v *view.RefreshTokenResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RefreshTokenResp(ctx, sel, v)
}

func (ec *executionContext) marshalNRole2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx context.Context, sel ast.SelectionSet, v view.Role) graphql.Marshaler {
	return ec._Role(ctx, sel, &v)
}

func (ec *executionContext) marshalNRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx context.Context, sel ast.SelectionSet, v *view.Role) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleCreateInput(ctx context.Context, v interface{}) (view.RoleCreateInput, error) {
	res, err := ec.unmarshalInputRoleCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx context.Context, v interface{}) (view.RoleFilterInput, error) {
	res, err := ec.unmarshalInputRoleFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleUpdateInput(ctx context.Context, v interface{}) (view.RoleUpdateInput, error) {
	res, err := ec.unmarshalInputRoleUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTag2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx context.Context, sel ast.SelectionSet, v view.Tag) graphql.Marshaler {
	return ec._Tag(ctx, sel, &v)
}

func (ec *executionContext) marshalNTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Tag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx context.Context, sel ast.SelectionSet, v *view.Tag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTagCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagCreateInput(ctx context.Context, v interface{}) (view.TagCreateInput, error) {
	res, err := ec.unmarshalInputTagCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx context.Context, v interface{}) (view.TagFilterInput, error) {
	res, err := ec.unmarshalInputTagFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagUpdateInput(ctx context.Context, v interface{}) (view.TagUpdateInput, error) {
	res, err := ec.unmarshalInputTagUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTimestamp2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := value.UnmarshalTimestamp(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamp2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := value.MarshalTimestamp(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUint642uint64(ctx context.Context, v interface{}) (uint64, error) {
	res, err := value.UnmarshalUint64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUint642uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	res := value.MarshalUint64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx context.Context, sel ast.SelectionSet, v view.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx context.Context, sel ast.SelectionSet, v *view.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserAuth2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserAuth(ctx context.Context, v interface{}) (view.UserAuth, error) {
	res, err := ec.unmarshalInputUserAuth(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx context.Context, v interface{}) (view.UserFilterInput, error) {
	res, err := ec.unmarshalInputUserFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserLoginHistory2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.UserLoginHistory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserLoginHistory2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserLoginHistory2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistory(ctx context.Context, sel ast.SelectionSet, v *view.UserLoginHistory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserLoginHistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserLoginHistoryFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryFilterInput(ctx context.Context, v interface{}) (view.UserLoginHistoryFilterInput, error) {
	res, err := ec.unmarshalInputUserLoginHistoryFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserRole2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRole(ctx context.Context, sel ast.SelectionSet, v view.UserRole) graphql.Marshaler {
	return ec._UserRole(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.UserRole) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRole(ctx context.Context, sel ast.SelectionSet, v *view.UserRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserRole(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserRoleCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleCreateInput(ctx context.Context, v interface{}) (view.UserRoleCreateInput, error) {
	res, err := ec.unmarshalInputUserRoleCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx context.Context, v interface{}) (view.UserRoleFilterInput, error) {
	res, err := ec.unmarshalInputUserRoleFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserRoleUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleUpdateInput(ctx context.Context, v interface{}) (view.UserRoleUpdateInput, error) {
	res, err := ec.unmarshalInputUserRoleUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserStatus2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx context.Context, v interface{}) (view.UserStatus, error) {
	var res view.UserStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserStatus2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx context.Context, sel ast.SelectionSet, v view.UserStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNUserTag2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTag(ctx context.Context, sel ast.SelectionSet, v view.UserTag) graphql.Marshaler {
	return ec._UserTag(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.UserTag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTag(ctx context.Context, sel ast.SelectionSet, v *view.UserTag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserTag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserTagCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagCreateInput(ctx context.Context, v interface{}) (view.UserTagCreateInput, error) {
	res, err := ec.unmarshalInputUserTagCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx context.Context, v interface{}) (view.UserTagFilterInput, error) {
	res, err := ec.unmarshalInputUserTagFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserTagUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagUpdateInput(ctx context.Context, v interface{}) (view.UserTagUpdateInput, error) {
	res, err := ec.unmarshalInputUserTagUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserUpdateInput(ctx context.Context, v interface{}) (view.UserUpdateInput, error) {
	res, err := ec.unmarshalInputUserUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserUpdatePasswordInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserUpdatePasswordInput(ctx context.Context, v interface{}) (view.UserUpdatePasswordInput, error) {
	res, err := ec.unmarshalInputUserUpdatePasswordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserWhitelist2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelist(ctx context.Context, sel ast.SelectionSet, v view.UserWhitelist) graphql.Marshaler {
	return ec._UserWhitelist(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserWhitelist2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.UserWhitelist) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserWhitelist2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelist(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserWhitelist2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelist(ctx context.Context, sel ast.SelectionSet, v *view.UserWhitelist) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserWhitelist(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserWhitelistCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistCreateInput(ctx context.Context, v interface{}) (view.UserWhitelistCreateInput, error) {
	res, err := ec.unmarshalInputUserWhitelistCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx context.Context, v interface{}) (view.UserWhitelistFilterInput, error) {
	res, err := ec.unmarshalInputUserWhitelistFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserWhitelistUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistUpdateInput(ctx context.Context, v interface{}) (view.UserWhitelistUpdateInput, error) {
	res, err := ec.unmarshalInputUserWhitelistUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx context.Context, v interface{}) (view.YesNo, error) {
	var res view.YesNo
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx context.Context, sel ast.SelectionSet, v view.YesNo) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx context.Context, v interface{}) (*view.AccountType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.AccountType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx context.Context, sel ast.SelectionSet, v *view.AccountType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAuditLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogInput(ctx context.Context, v interface{}) (*view.AuditLogInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditLogInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx context.Context, v interface{}) (*view.BaseFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBaseFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOData2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐData(ctx context.Context, sel ast.SelectionSet, v view.Data) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Data(ctx, sel, v)
}

func (ec *executionContext) marshalOFileInfo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfo(ctx context.Context, sel ast.SelectionSet, v *view.FileInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FileInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFileInfoInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfoInput(ctx context.Context, v interface{}) (*view.FileInfoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFileInfoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHostsDenyFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx context.Context, v interface{}) (*view.HostsDenyFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHostsDenyFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHostsDenyInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyInput(ctx context.Context, v interface{}) (*view.HostsDenyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHostsDenyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) unmarshalOMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx context.Context, v interface{}) ([]*view.MenuInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*view.MenuInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMenuInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx context.Context, sel ast.SelectionSet, v *view.Meta) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Meta(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOffsetType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐOffsetType(ctx context.Context, v interface{}) (*view.OffsetType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.OffsetType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOffsetType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐOffsetType(ctx context.Context, sel ast.SelectionSet, v *view.OffsetType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx context.Context, v interface{}) (*view.PaginationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaginationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORangeType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRangeType(ctx context.Context, v interface{}) (*view.RangeType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.RangeType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORangeType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRangeType(ctx context.Context, sel ast.SelectionSet, v *view.RangeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORoleInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleInput(ctx context.Context, v interface{}) (*view.RoleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSortType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSortType(ctx context.Context, v interface{}) (*view.SortType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.SortType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSortType(ctx context.Context, sel ast.SelectionSet, v *view.SortType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTagInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagInput(ctx context.Context, v interface{}) (*view.TagInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTagInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamp2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := value.UnmarshalTimestamp(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamp2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := value.MarshalTimestamp(*v)
	return res
}

func (ec *executionContext) unmarshalOUint642ᚕuint64ᚄ(ctx context.Context, v interface{}) ([]uint64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]uint64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUint642uint64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUint642ᚕuint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUint642uint64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUint642ᚖuint64(ctx context.Context, v interface{}) (*uint64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := value.UnmarshalUint64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUint642ᚖuint64(ctx context.Context, sel ast.SelectionSet, v *uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := value.MarshalUint64(*v)
	return res
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUpload(*v)
	return res
}

func (ec *executionContext) unmarshalOUserInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserInput(ctx context.Context, v interface{}) (*view.UserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserLoginHistoryInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryInput(ctx context.Context, v interface{}) (*view.UserLoginHistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserLoginHistoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserRoleInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleInput(ctx context.Context, v interface{}) (*view.UserRoleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRoleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserStatus2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx context.Context, v interface{}) (*view.UserStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.UserStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserStatus2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx context.Context, sel ast.SelectionSet, v *view.UserStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserTagInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagInput(ctx context.Context, v interface{}) (*view.UserTagInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserTagInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserWhitelistInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistInput(ctx context.Context, v interface{}) (*view.UserWhitelistInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserWhitelistInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx context.Context, v interface{}) (*view.YesNo, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.YesNo)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx context.Context, sel ast.SelectionSet, v *view.YesNo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************

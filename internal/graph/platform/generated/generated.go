// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"boyi/pkg/delivery/graph/view"
	"boyi/pkg/infra/graph/value"
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/shopspring/decimal"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Agent struct {
		Account func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	AuditLog struct {
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Method       func(childComplexity int) int
		RequestInput func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	Claims struct {
		AccountType func(childComplexity int) int
		AliasName   func(childComplexity int) int
		AvatarURL   func(childComplexity int) int
		ID          func(childComplexity int) int
		Menu        func(childComplexity int) int
		Status      func(childComplexity int) int
		Username    func(childComplexity int) int
		Whitelists  func(childComplexity int) int
	}

	Common struct {
		CreatedAt   func(childComplexity int) int
		CreatorID   func(childComplexity int) int
		CreatorName func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdaterID   func(childComplexity int) int
		UpdaterName func(childComplexity int) int
	}

	CreateCommonUserResp struct {
		User func(childComplexity int) int
	}

	CreateUploadURLResp struct {
		Files func(childComplexity int) int
	}

	CreateUserResp struct {
		User func(childComplexity int) int
	}

	DataList struct {
		Data func(childComplexity int) int
		Meta func(childComplexity int) int
	}

	EmailConfig struct {
		SMTPFrom     func(childComplexity int) int
		SMTPFromName func(childComplexity int) int
		SMTPPort     func(childComplexity int) int
		SMTPServer   func(childComplexity int) int
		SMTPSsl      func(childComplexity int) int
		SMTPUser     func(childComplexity int) int
	}

	EmailRecord struct {
		Content      func(childComplexity int) int
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Email        func(childComplexity int) int
		ID           func(childComplexity int) int
		SMTPFrom     func(childComplexity int) int
		SMTPFromName func(childComplexity int) int
		SMTPPort     func(childComplexity int) int
		SMTPServer   func(childComplexity int) int
		SMTPSsl      func(childComplexity int) int
		SMTPUser     func(childComplexity int) int
		SendTime     func(childComplexity int) int
		Subject      func(childComplexity int) int
	}

	Event struct {
		Description func(childComplexity int) int
		EndTime     func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Remark      func(childComplexity int) int
		StartTime   func(childComplexity int) int
	}

	File struct {
		Content     func(childComplexity int) int
		ContentType func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	FileInfo struct {
		FileName  func(childComplexity int) int
		UploadURL func(childComplexity int) int
	}

	Game struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	GamePlayer struct {
		Balance        func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		LastLoginTime  func(childComplexity int) int
		LastLogoutTime func(childComplexity int) int
		Nickname       func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		Username       func(childComplexity int) int
	}

	GameTransferRecord struct {
		Amount       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		GameID       func(childComplexity int) int
		GameName     func(childComplexity int) int
		GamePlayerID func(childComplexity int) int
		ID           func(childComplexity int) int
		Remark       func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	GeneralAgent struct {
		Account func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	HostsDeny struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		IsEnabled    func(childComplexity int) int
		Remark       func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	HubClient struct {
		Devices func(childComplexity int) int
		UserID  func(childComplexity int) int
	}

	HubDevice struct {
		DeviceUID func(childComplexity int) int
		RoomID    func(childComplexity int) int
		Token     func(childComplexity int) int
	}

	LineRate struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rate        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	LineRateHistory struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rate        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	LineRent struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	ListAgentResp struct {
		Agents func(childComplexity int) int
		Meta   func(childComplexity int) int
	}

	ListAuditLogResp struct {
		AuditLogs func(childComplexity int) int
		Meta      func(childComplexity int) int
	}

	ListEmailRecordResp struct {
		EmailRecords func(childComplexity int) int
		Meta         func(childComplexity int) int
	}

	ListEventResp struct {
		Events func(childComplexity int) int
		Meta   func(childComplexity int) int
	}

	ListGamePlayerResp struct {
		Meta    func(childComplexity int) int
		Players func(childComplexity int) int
	}

	ListGameResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListGameTransferRecordResp struct {
		Meta    func(childComplexity int) int
		Records func(childComplexity int) int
	}

	ListGeneralAgentResp struct {
		GeneralAgents func(childComplexity int) int
		Meta          func(childComplexity int) int
	}

	ListHostsDenyResp struct {
		HostsDenys func(childComplexity int) int
		Meta       func(childComplexity int) int
	}

	ListLineRateHistoryResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListLineRateResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListLineRentResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMerchantBalanceLogResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMerchantDepositLogResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMerchantDepositMethodResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMerchantFeeModeResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMerchantLineResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMerchantLoginHistoryResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMerchantResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMerchantWithdrawLogResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMerchantWithdrawMethodResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListMetadata struct {
		Count func(childComplexity int) int
	}

	ListRoleResp struct {
		Meta  func(childComplexity int) int
		Roles func(childComplexity int) int
	}

	ListSecurityEventResp struct {
		Meta           func(childComplexity int) int
		SecurityEvents func(childComplexity int) int
	}

	ListSmsRecordResp struct {
		Meta       func(childComplexity int) int
		SmsRecords func(childComplexity int) int
	}

	ListSystemLineResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListTagResp struct {
		Meta func(childComplexity int) int
		Tags func(childComplexity int) int
	}

	ListTemplateResp struct {
		Meta      func(childComplexity int) int
		Templates func(childComplexity int) int
	}

	ListUserLoginHistoryResp struct {
		Meta               func(childComplexity int) int
		UserLoginHistories func(childComplexity int) int
	}

	ListUserResp struct {
		Meta  func(childComplexity int) int
		Users func(childComplexity int) int
	}

	ListUserRoleResp struct {
		Meta      func(childComplexity int) int
		UserRoles func(childComplexity int) int
	}

	ListUserTagResp struct {
		Meta     func(childComplexity int) int
		UserTags func(childComplexity int) int
	}

	ListUserWhitelistResp struct {
		Meta           func(childComplexity int) int
		UserWhitelists func(childComplexity int) int
	}

	ListVipClaimLogResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListVipLevelResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListVipUpgradeLogResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	LoginResp struct {
		DeviceUID func(childComplexity int) int
		Token     func(childComplexity int) int
		UserAgent func(childComplexity int) int
	}

	Menu struct {
		Key      func(childComplexity int) int
		Name     func(childComplexity int) int
		Next     func(childComplexity int) int
		SuperKey func(childComplexity int) int
	}

	Merchant struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	MerchantBalanceLog struct {
		Amount      func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		MerchantID  func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	MerchantDepositLog struct {
		Amount      func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		MerchantID  func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	MerchantDepositMethod struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	MerchantFeeMode struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	MerchantLine struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	MerchantLoginHistory struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		IP         func(childComplexity int) int
		MerchantID func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	MerchantWithdrawLog struct {
		Amount      func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		MerchantID  func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	MerchantWithdrawMethod struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Meta struct {
		Page      func(childComplexity int) int
		PerPage   func(childComplexity int) int
		Total     func(childComplexity int) int
		TotalPage func(childComplexity int) int
	}

	Mutation struct {
		ApplyMerchantBalance         func(childComplexity int, in view.MerchantBalanceApplyInput) int
		AuditMerchantBalance         func(childComplexity int, filter view.MerchantBalanceFilterInput, in view.MerchantBalanceAuditInput) int
		BanUser                      func(childComplexity int, filter view.UserFilterInput) int
		ClaimVipReward               func(childComplexity int, in view.ClaimVipRewardInput) int
		ConfigEmail                  func(childComplexity int, in view.EmailConfigInput) int
		ConfigSms                    func(childComplexity int, in view.SmsConfigInput) int
		CreateAgent                  func(childComplexity int, in view.AgentCreateInput) int
		CreateCommonUser             func(childComplexity int, in view.CreateCommonUserReqInput) int
		CreateEvent                  func(childComplexity int, in view.EventCreateInput) int
		CreateGame                   func(childComplexity int, in view.GameCreateInput) int
		CreateGeneralAgent           func(childComplexity int, in view.GeneralAgentCreateInput) int
		CreateHostsDeny              func(childComplexity int, in view.HostsDenyCreateInput) int
		CreateLineRate               func(childComplexity int, in view.LineRateCreateInput) int
		CreateLineRent               func(childComplexity int, in view.LineRentCreateInput) int
		CreateMerchant               func(childComplexity int, in view.MerchantCreateInput) int
		CreateMerchantDepositMethod  func(childComplexity int, in view.MerchantDepositMethodCreateInput) int
		CreateMerchantFeeMode        func(childComplexity int, in view.MerchantFeeModeCreateInput) int
		CreateMerchantLine           func(childComplexity int, in view.MerchantLineCreateInput) int
		CreateMerchantWithdrawMethod func(childComplexity int, in view.MerchantWithdrawMethodCreateInput) int
		CreateRole                   func(childComplexity int, in view.RoleCreateInput) int
		CreateSecurityEvent          func(childComplexity int, in view.SecurityEventCreateInput) int
		CreateSystemLine             func(childComplexity int, in view.SystemLineCreateInput) int
		CreateTag                    func(childComplexity int, in view.TagCreateInput) int
		CreateTemplate               func(childComplexity int, in view.TemplateCreateInput) int
		CreateUser                   func(childComplexity int, in view.CreateUserReqInput) int
		CreateUserRole               func(childComplexity int, in view.UserRoleCreateInput) int
		CreateUserTag                func(childComplexity int, in view.UserTagCreateInput) int
		CreateUserWhitelist          func(childComplexity int, in view.UserWhitelistCreateInput) int
		CreateVipLevel               func(childComplexity int, in view.VipLevelCreateInput) int
		DeleteAgent                  func(childComplexity int, filter view.AgentFilterInput) int
		DeleteEvent                  func(childComplexity int, filter view.EventFilterInput) int
		DeleteGame                   func(childComplexity int, filter view.GameFilterInput) int
		DeleteGeneralAgent           func(childComplexity int, filter view.GeneralAgentFilterInput) int
		DeleteHostsDeny              func(childComplexity int, filter view.HostsDenyFilterInput) int
		DeleteLineRate               func(childComplexity int, filter view.LineRateFilterInput) int
		DeleteLineRent               func(childComplexity int, filter view.LineRentFilterInput) int
		DeleteMerchant               func(childComplexity int, filter view.MerchantFilterInput) int
		DeleteMerchantDepositMethod  func(childComplexity int, filter view.MerchantDepositMethodFilterInput) int
		DeleteMerchantFeeMode        func(childComplexity int, filter view.MerchantFeeModeFilterInput) int
		DeleteMerchantLine           func(childComplexity int, filter view.MerchantLineFilterInput) int
		DeleteMerchantWithdrawMethod func(childComplexity int, filter view.MerchantWithdrawMethodFilterInput) int
		DeleteRole                   func(childComplexity int, filter view.RoleFilterInput) int
		DeleteSecurityEvent          func(childComplexity int, filter view.SecurityEventFilterInput) int
		DeleteSystemLine             func(childComplexity int, filter view.SystemLineFilterInput) int
		DeleteTag                    func(childComplexity int, filter view.TagFilterInput) int
		DeleteTemplate               func(childComplexity int, filter view.TemplateFilterInput) int
		DeleteUser                   func(childComplexity int, filter view.UserFilterInput) int
		DeleteUserRole               func(childComplexity int, filter view.UserRoleFilterInput) int
		DeleteUserTag                func(childComplexity int, filter view.UserTagFilterInput) int
		DeleteUserWhitelist          func(childComplexity int, filter view.UserWhitelistFilterInput) int
		DeleteVipLevel               func(childComplexity int, filter view.VipLevelFilterInput) int
		Login                        func(childComplexity int, in view.LoginReqInput) int
		Logout                       func(childComplexity int) int
		RefreshToken                 func(childComplexity int) int
		UnbanUser                    func(childComplexity int, filter view.UserFilterInput) int
		UpdateAgent                  func(childComplexity int, filter view.AgentFilterInput, in view.AgentUpdateInput) int
		UpdateEvent                  func(childComplexity int, filter view.EventFilterInput, in view.EventUpdateInput) int
		UpdateGame                   func(childComplexity int, filter view.GameFilterInput, in view.GameUpdateInput) int
		UpdateGeneralAgent           func(childComplexity int, filter view.GeneralAgentFilterInput, in view.GeneralAgentUpdateInput) int
		UpdateHostsDeny              func(childComplexity int, filter view.HostsDenyFilterInput, in view.HostsDenyUpdateInput) int
		UpdateLineRate               func(childComplexity int, filter view.LineRateFilterInput, in view.LineRateUpdateInput) int
		UpdateLineRent               func(childComplexity int, filter view.LineRentFilterInput, in view.LineRentUpdateInput) int
		UpdateMerchant               func(childComplexity int, filter view.MerchantFilterInput, in view.MerchantUpdateInput) int
		UpdateMerchantDepositMethod  func(childComplexity int, filter view.MerchantDepositMethodFilterInput, in view.MerchantDepositMethodUpdateInput) int
		UpdateMerchantFeeMode        func(childComplexity int, filter view.MerchantFeeModeFilterInput, in view.MerchantFeeModeUpdateInput) int
		UpdateMerchantLine           func(childComplexity int, filter view.MerchantLineFilterInput, in view.MerchantLineUpdateInput) int
		UpdateMerchantWithdrawMethod func(childComplexity int, filter view.MerchantWithdrawMethodFilterInput, in view.MerchantWithdrawMethodUpdateInput) int
		UpdateRole                   func(childComplexity int, filter view.RoleFilterInput, in view.RoleUpdateInput) int
		UpdateSecurityEvent          func(childComplexity int, filter view.SecurityEventFilterInput, in view.SecurityEventUpdateInput) int
		UpdateSystemLine             func(childComplexity int, filter view.SystemLineFilterInput, in view.SystemLineUpdateInput) int
		UpdateTag                    func(childComplexity int, filter view.TagFilterInput, in view.TagUpdateInput) int
		UpdateTemplate               func(childComplexity int, filter view.TemplateFilterInput, in view.TemplateUpdateInput) int
		UpdateUser                   func(childComplexity int, filter view.UserFilterInput, in view.UserUpdateInput) int
		UpdateUserPassword           func(childComplexity int, in view.UserUpdatePasswordInput) int
		UpdateUserRole               func(childComplexity int, filter view.UserRoleFilterInput, in view.UserRoleUpdateInput) int
		UpdateUserTag                func(childComplexity int, filter view.UserTagFilterInput, in view.UserTagUpdateInput) int
		UpdateUserWhitelist          func(childComplexity int, filter view.UserWhitelistFilterInput, in view.UserWhitelistUpdateInput) int
		UpdateVipLevel               func(childComplexity int, filter view.VipLevelFilterInput, in view.VipLevelUpdateInput) int
	}

	Query struct {
		GetEmailConfig             func(childComplexity int) int
		GetHostsDeny               func(childComplexity int, filter view.HostsDenyFilterInput) int
		GetRole                    func(childComplexity int, filter view.RoleFilterInput) int
		GetSmsConfig               func(childComplexity int) int
		GetTag                     func(childComplexity int, filter view.TagFilterInput) int
		GetUser                    func(childComplexity int, filter view.UserFilterInput) int
		GetUserRole                func(childComplexity int, filter view.UserRoleFilterInput) int
		GetUserTag                 func(childComplexity int, filter view.UserTagFilterInput) int
		GetUserWhitelist           func(childComplexity int, filter view.UserWhitelistFilterInput) int
		ListAuditLog               func(childComplexity int, filter view.AuditLogFilterInput, pagination *view.PaginationInput) int
		ListEmailRecord            func(childComplexity int, filter view.EmailRecordFilterInput, pagination *view.PaginationInput) int
		ListEvent                  func(childComplexity int, filter view.EventFilterInput, pagination *view.PaginationInput) int
		ListGame                   func(childComplexity int, filter *view.GameFilterInput, pagination *view.PaginationInput) int
		ListGamePlayer             func(childComplexity int, filter view.GamePlayerFilterInput, pagination *view.PaginationInput) int
		ListGameTransferRecord     func(childComplexity int, filter view.GameTransferRecordFilterInput, pagination *view.PaginationInput) int
		ListHistoryEvent           func(childComplexity int, filter view.EventFilterInput, pagination *view.PaginationInput) int
		ListHostsDeny              func(childComplexity int, filter *view.HostsDenyFilterInput, pagination *view.PaginationInput) int
		ListHubClients             func(childComplexity int) int
		ListLineRate               func(childComplexity int, filter *view.LineRateFilterInput, pagination *view.PaginationInput) int
		ListLineRateHistory        func(childComplexity int, filter *view.LineRateHistoryFilterInput, pagination *view.PaginationInput) int
		ListLineRent               func(childComplexity int, filter *view.LineRentFilterInput, pagination *view.PaginationInput) int
		ListMenu                   func(childComplexity int) int
		ListMerchant               func(childComplexity int, filter *view.MerchantFilterInput, pagination *view.PaginationInput) int
		ListMerchantBalanceLog     func(childComplexity int, filter *view.MerchantBalanceLogFilterInput, pagination *view.PaginationInput) int
		ListMerchantDepositLog     func(childComplexity int, filter *view.MerchantDepositLogFilterInput, pagination *view.PaginationInput) int
		ListMerchantDepositMethod  func(childComplexity int, filter *view.MerchantDepositMethodFilterInput, pagination *view.PaginationInput) int
		ListMerchantFeeMode        func(childComplexity int, filter *view.MerchantFeeModeFilterInput, pagination *view.PaginationInput) int
		ListMerchantLine           func(childComplexity int, filter *view.MerchantLineFilterInput, pagination *view.PaginationInput) int
		ListMerchantLoginHistory   func(childComplexity int, filter *view.MerchantLoginHistoryFilterInput, pagination *view.PaginationInput) int
		ListMerchantWithdrawLog    func(childComplexity int, filter *view.MerchantWithdrawLogFilterInput, pagination *view.PaginationInput) int
		ListMerchantWithdrawMethod func(childComplexity int, filter *view.MerchantWithdrawMethodFilterInput, pagination *view.PaginationInput) int
		ListRole                   func(childComplexity int, filter view.RoleFilterInput, pagination *view.PaginationInput) int
		ListSecurityEvent          func(childComplexity int, filter view.SecurityEventFilterInput, pagination *view.PaginationInput) int
		ListSmsRecord              func(childComplexity int, filter view.SmsRecordFilterInput, pagination *view.PaginationInput) int
		ListSystemLine             func(childComplexity int, filter *view.SystemLineFilterInput, pagination *view.PaginationInput) int
		ListTag                    func(childComplexity int, filter view.TagFilterInput, pagination *view.PaginationInput) int
		ListTemplate               func(childComplexity int, filter view.TemplateFilterInput, pagination *view.PaginationInput) int
		ListUser                   func(childComplexity int, filter view.UserFilterInput, pagination *view.PaginationInput) int
		ListUserLoginHistory       func(childComplexity int, filter view.UserLoginHistoryFilterInput, pagination *view.PaginationInput) int
		ListUserRole               func(childComplexity int, filter view.UserRoleFilterInput, pagination *view.PaginationInput) int
		ListUserTag                func(childComplexity int, filter view.UserTagFilterInput, pagination *view.PaginationInput) int
		ListUserWhitelist          func(childComplexity int, filter view.UserWhitelistFilterInput, pagination *view.PaginationInput) int
		ListVipClaimLog            func(childComplexity int, filter view.VipClaimLogFilterInput, pagination *view.PaginationInput) int
		ListVipLevel               func(childComplexity int, filter view.VipLevelFilterInput, pagination *view.PaginationInput) int
		ListVipUpgradeLog          func(childComplexity int, filter view.VipUpgradeLogFilterInput, pagination *view.PaginationInput) int
		Me                         func(childComplexity int) int
		UserDepositInfo            func(childComplexity int, filter view.UserFilterInput) int
		UserScore                  func(childComplexity int, filter view.UserFilterInput) int
		UserWithdrawInfo           func(childComplexity int, filter view.UserFilterInput) int
	}

	Qyery struct {
		ListAgent        func(childComplexity int, filter *view.AgentFilterInput, pagination *view.PaginationInput) int
		ListGeneralAgent func(childComplexity int, filter *view.GeneralAgentFilterInput, pagination *view.PaginationInput) int
	}

	RefreshTokenResp struct {
		Expires func(childComplexity int) int
		Token   func(childComplexity int) int
	}

	Role struct {
		Authority          func(childComplexity int) int
		CreateUserID       func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		ID                 func(childComplexity int) int
		Name               func(childComplexity int) int
		SupportAccountType func(childComplexity int) int
		UpdateUserID       func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	SecurityEvent struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Description  func(childComplexity int) int
		ID           func(childComplexity int) int
		IsEnable     func(childComplexity int) int
		Name         func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	SmsConfig struct {
		Account func(childComplexity int) int
		URL     func(childComplexity int) int
	}

	SmsRecord struct {
		Account      func(childComplexity int) int
		Content      func(childComplexity int) int
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		PhoneNumber  func(childComplexity int) int
		SendTime     func(childComplexity int) int
		URL          func(childComplexity int) int
	}

	Subscription struct {
		ReceiveMessage func(childComplexity int, userAuth view.UserAuth) int
	}

	SystemLine struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Tag struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		IsEnable     func(childComplexity int) int
		Name         func(childComplexity int) int
		RGBHex       func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	Template struct {
		Content   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	User struct {
		AccountType  func(childComplexity int) int
		AliasName    func(childComplexity int) int
		Area         func(childComplexity int) int
		AvatarURL    func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Email        func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		LastLoginAt  func(childComplexity int) int
		LastLoginIP  func(childComplexity int) int
		Notes        func(childComplexity int) int
		Roles        func(childComplexity int) int
		Status       func(childComplexity int) int
		Tags         func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		Username     func(childComplexity int) int
		Whitelists   func(childComplexity int) int
	}

	UserDepositInfo struct {
		BankAccount     func(childComplexity int) int
		BankAccountName func(childComplexity int) int
		BankBranch      func(childComplexity int) int
		BankName        func(childComplexity int) int
		CreateUserID    func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		UpdateUserID    func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UserID          func(childComplexity int) int
	}

	UserLoginHistory struct {
		AdministrativeArea func(childComplexity int) int
		Country            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeviceOs           func(childComplexity int) int
		ID                 func(childComplexity int) int
		IPAddress          func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	UserRole struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		IsAdmin      func(childComplexity int) int
		Role         func(childComplexity int) int
		RoleID       func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	UserScore struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Score        func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	UserTag struct {
		CreateUserID func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Tag          func(childComplexity int) int
		TagID        func(childComplexity int) int
		UpdateUserID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	UserWhitelist struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IPAddress func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	UserWithdrawInfo struct {
		BankAccount     func(childComplexity int) int
		BankAccountName func(childComplexity int) int
		BankBranch      func(childComplexity int) int
		BankName        func(childComplexity int) int
		CreateUserID    func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		UpdateUserID    func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UserID          func(childComplexity int) int
	}

	VipClaimLog struct {
		ClaimAt    func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UserID     func(childComplexity int) int
		VipLevelID func(childComplexity int) int
	}

	VipLevel struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Name        func(childComplexity int) int
		Sort        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	VipUpgradeLog struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpgradeAt  func(childComplexity int) int
		UserID     func(childComplexity int) int
		VipLevelID func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateAgent(ctx context.Context, in view.AgentCreateInput) (uint64, error)
	UpdateAgent(ctx context.Context, filter view.AgentFilterInput, in view.AgentUpdateInput) (uint64, error)
	DeleteAgent(ctx context.Context, filter view.AgentFilterInput) (uint64, error)
	CreateGeneralAgent(ctx context.Context, in view.GeneralAgentCreateInput) (uint64, error)
	UpdateGeneralAgent(ctx context.Context, filter view.GeneralAgentFilterInput, in view.GeneralAgentUpdateInput) (uint64, error)
	DeleteGeneralAgent(ctx context.Context, filter view.GeneralAgentFilterInput) (uint64, error)
	CreateCommonUser(ctx context.Context, in view.CreateCommonUserReqInput) (*view.CreateCommonUserResp, error)
	Login(ctx context.Context, in view.LoginReqInput) (*view.LoginResp, error)
	Logout(ctx context.Context) (uint64, error)
	RefreshToken(ctx context.Context) (*view.RefreshTokenResp, error)
	CreateEvent(ctx context.Context, in view.EventCreateInput) (uint64, error)
	UpdateEvent(ctx context.Context, filter view.EventFilterInput, in view.EventUpdateInput) (uint64, error)
	DeleteEvent(ctx context.Context, filter view.EventFilterInput) (uint64, error)
	CreateSystemLine(ctx context.Context, in view.SystemLineCreateInput) (uint64, error)
	UpdateSystemLine(ctx context.Context, filter view.SystemLineFilterInput, in view.SystemLineUpdateInput) (uint64, error)
	DeleteSystemLine(ctx context.Context, filter view.SystemLineFilterInput) (uint64, error)
	CreateMerchantLine(ctx context.Context, in view.MerchantLineCreateInput) (uint64, error)
	UpdateMerchantLine(ctx context.Context, filter view.MerchantLineFilterInput, in view.MerchantLineUpdateInput) (uint64, error)
	DeleteMerchantLine(ctx context.Context, filter view.MerchantLineFilterInput) (uint64, error)
	CreateLineRent(ctx context.Context, in view.LineRentCreateInput) (uint64, error)
	UpdateLineRent(ctx context.Context, filter view.LineRentFilterInput, in view.LineRentUpdateInput) (uint64, error)
	DeleteLineRent(ctx context.Context, filter view.LineRentFilterInput) (uint64, error)
	CreateLineRate(ctx context.Context, in view.LineRateCreateInput) (uint64, error)
	UpdateLineRate(ctx context.Context, filter view.LineRateFilterInput, in view.LineRateUpdateInput) (uint64, error)
	DeleteLineRate(ctx context.Context, filter view.LineRateFilterInput) (uint64, error)
	CreateGame(ctx context.Context, in view.GameCreateInput) (uint64, error)
	UpdateGame(ctx context.Context, filter view.GameFilterInput, in view.GameUpdateInput) (uint64, error)
	DeleteGame(ctx context.Context, filter view.GameFilterInput) (uint64, error)
	CreateMerchant(ctx context.Context, in view.MerchantCreateInput) (uint64, error)
	UpdateMerchant(ctx context.Context, filter view.MerchantFilterInput, in view.MerchantUpdateInput) (uint64, error)
	DeleteMerchant(ctx context.Context, filter view.MerchantFilterInput) (uint64, error)
	CreateMerchantWithdrawMethod(ctx context.Context, in view.MerchantWithdrawMethodCreateInput) (uint64, error)
	UpdateMerchantWithdrawMethod(ctx context.Context, filter view.MerchantWithdrawMethodFilterInput, in view.MerchantWithdrawMethodUpdateInput) (uint64, error)
	DeleteMerchantWithdrawMethod(ctx context.Context, filter view.MerchantWithdrawMethodFilterInput) (uint64, error)
	CreateMerchantDepositMethod(ctx context.Context, in view.MerchantDepositMethodCreateInput) (uint64, error)
	UpdateMerchantDepositMethod(ctx context.Context, filter view.MerchantDepositMethodFilterInput, in view.MerchantDepositMethodUpdateInput) (uint64, error)
	DeleteMerchantDepositMethod(ctx context.Context, filter view.MerchantDepositMethodFilterInput) (uint64, error)
	CreateMerchantFeeMode(ctx context.Context, in view.MerchantFeeModeCreateInput) (uint64, error)
	UpdateMerchantFeeMode(ctx context.Context, filter view.MerchantFeeModeFilterInput, in view.MerchantFeeModeUpdateInput) (uint64, error)
	DeleteMerchantFeeMode(ctx context.Context, filter view.MerchantFeeModeFilterInput) (uint64, error)
	ApplyMerchantBalance(ctx context.Context, in view.MerchantBalanceApplyInput) (uint64, error)
	AuditMerchantBalance(ctx context.Context, filter view.MerchantBalanceFilterInput, in view.MerchantBalanceAuditInput) (uint64, error)
	CreateRole(ctx context.Context, in view.RoleCreateInput) (uint64, error)
	UpdateRole(ctx context.Context, filter view.RoleFilterInput, in view.RoleUpdateInput) (uint64, error)
	DeleteRole(ctx context.Context, filter view.RoleFilterInput) (uint64, error)
	CreateHostsDeny(ctx context.Context, in view.HostsDenyCreateInput) (*view.HostsDeny, error)
	UpdateHostsDeny(ctx context.Context, filter view.HostsDenyFilterInput, in view.HostsDenyUpdateInput) (*view.HostsDeny, error)
	DeleteHostsDeny(ctx context.Context, filter view.HostsDenyFilterInput) (uint64, error)
	ConfigSms(ctx context.Context, in view.SmsConfigInput) (uint64, error)
	ConfigEmail(ctx context.Context, in view.EmailConfigInput) (uint64, error)
	CreateTemplate(ctx context.Context, in view.TemplateCreateInput) (uint64, error)
	UpdateTemplate(ctx context.Context, filter view.TemplateFilterInput, in view.TemplateUpdateInput) (uint64, error)
	DeleteTemplate(ctx context.Context, filter view.TemplateFilterInput) (uint64, error)
	CreateTag(ctx context.Context, in view.TagCreateInput) (uint64, error)
	UpdateTag(ctx context.Context, filter view.TagFilterInput, in view.TagUpdateInput) (uint64, error)
	DeleteTag(ctx context.Context, filter view.TagFilterInput) (uint64, error)
	CreateSecurityEvent(ctx context.Context, in view.SecurityEventCreateInput) (uint64, error)
	UpdateSecurityEvent(ctx context.Context, filter view.SecurityEventFilterInput, in view.SecurityEventUpdateInput) (uint64, error)
	DeleteSecurityEvent(ctx context.Context, filter view.SecurityEventFilterInput) (uint64, error)
	CreateUser(ctx context.Context, in view.CreateUserReqInput) (*view.CreateUserResp, error)
	UpdateUser(ctx context.Context, filter view.UserFilterInput, in view.UserUpdateInput) (uint64, error)
	DeleteUser(ctx context.Context, filter view.UserFilterInput) (uint64, error)
	UpdateUserPassword(ctx context.Context, in view.UserUpdatePasswordInput) (uint64, error)
	CreateUserWhitelist(ctx context.Context, in view.UserWhitelistCreateInput) (uint64, error)
	UpdateUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput, in view.UserWhitelistUpdateInput) (uint64, error)
	DeleteUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput) (uint64, error)
	CreateUserRole(ctx context.Context, in view.UserRoleCreateInput) (uint64, error)
	UpdateUserRole(ctx context.Context, filter view.UserRoleFilterInput, in view.UserRoleUpdateInput) (uint64, error)
	DeleteUserRole(ctx context.Context, filter view.UserRoleFilterInput) (uint64, error)
	CreateUserTag(ctx context.Context, in view.UserTagCreateInput) (uint64, error)
	UpdateUserTag(ctx context.Context, filter view.UserTagFilterInput, in view.UserTagUpdateInput) (uint64, error)
	DeleteUserTag(ctx context.Context, filter view.UserTagFilterInput) (uint64, error)
	BanUser(ctx context.Context, filter view.UserFilterInput) (uint64, error)
	UnbanUser(ctx context.Context, filter view.UserFilterInput) (uint64, error)
	CreateVipLevel(ctx context.Context, in view.VipLevelCreateInput) (uint64, error)
	UpdateVipLevel(ctx context.Context, filter view.VipLevelFilterInput, in view.VipLevelUpdateInput) (uint64, error)
	DeleteVipLevel(ctx context.Context, filter view.VipLevelFilterInput) (uint64, error)
	ClaimVipReward(ctx context.Context, in view.ClaimVipRewardInput) (uint64, error)
}
type QueryResolver interface {
	Me(ctx context.Context) (*view.Claims, error)
	ListEvent(ctx context.Context, filter view.EventFilterInput, pagination *view.PaginationInput) (*view.ListEventResp, error)
	ListHistoryEvent(ctx context.Context, filter view.EventFilterInput, pagination *view.PaginationInput) (*view.ListEventResp, error)
	ListGamePlayer(ctx context.Context, filter view.GamePlayerFilterInput, pagination *view.PaginationInput) (*view.ListGamePlayerResp, error)
	ListGameTransferRecord(ctx context.Context, filter view.GameTransferRecordFilterInput, pagination *view.PaginationInput) (*view.ListGameTransferRecordResp, error)
	ListSystemLine(ctx context.Context, filter *view.SystemLineFilterInput, pagination *view.PaginationInput) (*view.ListSystemLineResp, error)
	ListMerchantLine(ctx context.Context, filter *view.MerchantLineFilterInput, pagination *view.PaginationInput) (*view.ListMerchantLineResp, error)
	ListLineRent(ctx context.Context, filter *view.LineRentFilterInput, pagination *view.PaginationInput) (*view.ListLineRentResp, error)
	ListLineRate(ctx context.Context, filter *view.LineRateFilterInput, pagination *view.PaginationInput) (*view.ListLineRateResp, error)
	ListLineRateHistory(ctx context.Context, filter *view.LineRateHistoryFilterInput, pagination *view.PaginationInput) (*view.ListLineRateHistoryResp, error)
	ListGame(ctx context.Context, filter *view.GameFilterInput, pagination *view.PaginationInput) (*view.ListGameResp, error)
	ListHubClients(ctx context.Context) ([]*view.HubClient, error)
	ListMenu(ctx context.Context) ([]*view.Menu, error)
	ListMerchant(ctx context.Context, filter *view.MerchantFilterInput, pagination *view.PaginationInput) (*view.ListMerchantResp, error)
	ListMerchantWithdrawMethod(ctx context.Context, filter *view.MerchantWithdrawMethodFilterInput, pagination *view.PaginationInput) (*view.ListMerchantWithdrawMethodResp, error)
	ListMerchantDepositMethod(ctx context.Context, filter *view.MerchantDepositMethodFilterInput, pagination *view.PaginationInput) (*view.ListMerchantDepositMethodResp, error)
	ListMerchantFeeMode(ctx context.Context, filter *view.MerchantFeeModeFilterInput, pagination *view.PaginationInput) (*view.ListMerchantFeeModeResp, error)
	ListMerchantBalanceLog(ctx context.Context, filter *view.MerchantBalanceLogFilterInput, pagination *view.PaginationInput) (*view.ListMerchantBalanceLogResp, error)
	ListMerchantWithdrawLog(ctx context.Context, filter *view.MerchantWithdrawLogFilterInput, pagination *view.PaginationInput) (*view.ListMerchantWithdrawLogResp, error)
	ListMerchantDepositLog(ctx context.Context, filter *view.MerchantDepositLogFilterInput, pagination *view.PaginationInput) (*view.ListMerchantDepositLogResp, error)
	ListMerchantLoginHistory(ctx context.Context, filter *view.MerchantLoginHistoryFilterInput, pagination *view.PaginationInput) (*view.ListMerchantLoginHistoryResp, error)
	GetRole(ctx context.Context, filter view.RoleFilterInput) (*view.Role, error)
	ListRole(ctx context.Context, filter view.RoleFilterInput, pagination *view.PaginationInput) (*view.ListRoleResp, error)
	GetHostsDeny(ctx context.Context, filter view.HostsDenyFilterInput) (*view.HostsDeny, error)
	ListHostsDeny(ctx context.Context, filter *view.HostsDenyFilterInput, pagination *view.PaginationInput) (*view.ListHostsDenyResp, error)
	ListTemplate(ctx context.Context, filter view.TemplateFilterInput, pagination *view.PaginationInput) (*view.ListTemplateResp, error)
	ListAuditLog(ctx context.Context, filter view.AuditLogFilterInput, pagination *view.PaginationInput) (*view.ListAuditLogResp, error)
	GetTag(ctx context.Context, filter view.TagFilterInput) (*view.Tag, error)
	ListTag(ctx context.Context, filter view.TagFilterInput, pagination *view.PaginationInput) (*view.ListTagResp, error)
	ListSecurityEvent(ctx context.Context, filter view.SecurityEventFilterInput, pagination *view.PaginationInput) (*view.ListSecurityEventResp, error)
	GetSmsConfig(ctx context.Context) (*view.SmsConfig, error)
	ListSmsRecord(ctx context.Context, filter view.SmsRecordFilterInput, pagination *view.PaginationInput) (*view.ListSmsRecordResp, error)
	GetEmailConfig(ctx context.Context) (*view.EmailConfig, error)
	ListEmailRecord(ctx context.Context, filter view.EmailRecordFilterInput, pagination *view.PaginationInput) (*view.ListEmailRecordResp, error)
	GetUser(ctx context.Context, filter view.UserFilterInput) (*view.User, error)
	ListUser(ctx context.Context, filter view.UserFilterInput, pagination *view.PaginationInput) (*view.ListUserResp, error)
	GetUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput) (*view.UserWhitelist, error)
	ListUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput, pagination *view.PaginationInput) (*view.ListUserWhitelistResp, error)
	GetUserRole(ctx context.Context, filter view.UserRoleFilterInput) (*view.UserRole, error)
	ListUserRole(ctx context.Context, filter view.UserRoleFilterInput, pagination *view.PaginationInput) (*view.ListUserRoleResp, error)
	GetUserTag(ctx context.Context, filter view.UserTagFilterInput) (*view.UserTag, error)
	ListUserTag(ctx context.Context, filter view.UserTagFilterInput, pagination *view.PaginationInput) (*view.ListUserTagResp, error)
	ListUserLoginHistory(ctx context.Context, filter view.UserLoginHistoryFilterInput, pagination *view.PaginationInput) (*view.ListUserLoginHistoryResp, error)
	UserWithdrawInfo(ctx context.Context, filter view.UserFilterInput) (*view.UserWithdrawInfo, error)
	UserDepositInfo(ctx context.Context, filter view.UserFilterInput) (*view.UserDepositInfo, error)
	UserScore(ctx context.Context, filter view.UserFilterInput) (*view.UserScore, error)
	ListVipUpgradeLog(ctx context.Context, filter view.VipUpgradeLogFilterInput, pagination *view.PaginationInput) (*view.ListVipUpgradeLogResp, error)
	ListVipClaimLog(ctx context.Context, filter view.VipClaimLogFilterInput, pagination *view.PaginationInput) (*view.ListVipClaimLogResp, error)
	ListVipLevel(ctx context.Context, filter view.VipLevelFilterInput, pagination *view.PaginationInput) (*view.ListVipLevelResp, error)
}
type SubscriptionResolver interface {
	ReceiveMessage(ctx context.Context, userAuth view.UserAuth) (<-chan string, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Agent.account":
		if e.complexity.Agent.Account == nil {
			break
		}

		return e.complexity.Agent.Account(childComplexity), true

	case "Agent.id":
		if e.complexity.Agent.ID == nil {
			break
		}

		return e.complexity.Agent.ID(childComplexity), true

	case "Agent.name":
		if e.complexity.Agent.Name == nil {
			break
		}

		return e.complexity.Agent.Name(childComplexity), true

	case "AuditLog.createdAt":
		if e.complexity.AuditLog.CreatedAt == nil {
			break
		}

		return e.complexity.AuditLog.CreatedAt(childComplexity), true

	case "AuditLog.id":
		if e.complexity.AuditLog.ID == nil {
			break
		}

		return e.complexity.AuditLog.ID(childComplexity), true

	case "AuditLog.method":
		if e.complexity.AuditLog.Method == nil {
			break
		}

		return e.complexity.AuditLog.Method(childComplexity), true

	case "AuditLog.requestInput":
		if e.complexity.AuditLog.RequestInput == nil {
			break
		}

		return e.complexity.AuditLog.RequestInput(childComplexity), true

	case "AuditLog.userID":
		if e.complexity.AuditLog.UserID == nil {
			break
		}

		return e.complexity.AuditLog.UserID(childComplexity), true

	case "Claims.accountType":
		if e.complexity.Claims.AccountType == nil {
			break
		}

		return e.complexity.Claims.AccountType(childComplexity), true

	case "Claims.aliasName":
		if e.complexity.Claims.AliasName == nil {
			break
		}

		return e.complexity.Claims.AliasName(childComplexity), true

	case "Claims.avatarURL":
		if e.complexity.Claims.AvatarURL == nil {
			break
		}

		return e.complexity.Claims.AvatarURL(childComplexity), true

	case "Claims.id":
		if e.complexity.Claims.ID == nil {
			break
		}

		return e.complexity.Claims.ID(childComplexity), true

	case "Claims.menu":
		if e.complexity.Claims.Menu == nil {
			break
		}

		return e.complexity.Claims.Menu(childComplexity), true

	case "Claims.status":
		if e.complexity.Claims.Status == nil {
			break
		}

		return e.complexity.Claims.Status(childComplexity), true

	case "Claims.username":
		if e.complexity.Claims.Username == nil {
			break
		}

		return e.complexity.Claims.Username(childComplexity), true

	case "Claims.whitelists":
		if e.complexity.Claims.Whitelists == nil {
			break
		}

		return e.complexity.Claims.Whitelists(childComplexity), true

	case "Common.createdAt":
		if e.complexity.Common.CreatedAt == nil {
			break
		}

		return e.complexity.Common.CreatedAt(childComplexity), true

	case "Common.creatorID":
		if e.complexity.Common.CreatorID == nil {
			break
		}

		return e.complexity.Common.CreatorID(childComplexity), true

	case "Common.creatorName":
		if e.complexity.Common.CreatorName == nil {
			break
		}

		return e.complexity.Common.CreatorName(childComplexity), true

	case "Common.updatedAt":
		if e.complexity.Common.UpdatedAt == nil {
			break
		}

		return e.complexity.Common.UpdatedAt(childComplexity), true

	case "Common.updaterID":
		if e.complexity.Common.UpdaterID == nil {
			break
		}

		return e.complexity.Common.UpdaterID(childComplexity), true

	case "Common.updaterName":
		if e.complexity.Common.UpdaterName == nil {
			break
		}

		return e.complexity.Common.UpdaterName(childComplexity), true

	case "CreateCommonUserResp.user":
		if e.complexity.CreateCommonUserResp.User == nil {
			break
		}

		return e.complexity.CreateCommonUserResp.User(childComplexity), true

	case "CreateUploadURLResp.files":
		if e.complexity.CreateUploadURLResp.Files == nil {
			break
		}

		return e.complexity.CreateUploadURLResp.Files(childComplexity), true

	case "CreateUserResp.user":
		if e.complexity.CreateUserResp.User == nil {
			break
		}

		return e.complexity.CreateUserResp.User(childComplexity), true

	case "DataList.data":
		if e.complexity.DataList.Data == nil {
			break
		}

		return e.complexity.DataList.Data(childComplexity), true

	case "DataList.meta":
		if e.complexity.DataList.Meta == nil {
			break
		}

		return e.complexity.DataList.Meta(childComplexity), true

	case "EmailConfig.smtpFrom":
		if e.complexity.EmailConfig.SMTPFrom == nil {
			break
		}

		return e.complexity.EmailConfig.SMTPFrom(childComplexity), true

	case "EmailConfig.smtpFromName":
		if e.complexity.EmailConfig.SMTPFromName == nil {
			break
		}

		return e.complexity.EmailConfig.SMTPFromName(childComplexity), true

	case "EmailConfig.smtpPort":
		if e.complexity.EmailConfig.SMTPPort == nil {
			break
		}

		return e.complexity.EmailConfig.SMTPPort(childComplexity), true

	case "EmailConfig.smtpServer":
		if e.complexity.EmailConfig.SMTPServer == nil {
			break
		}

		return e.complexity.EmailConfig.SMTPServer(childComplexity), true

	case "EmailConfig.smtpSSL":
		if e.complexity.EmailConfig.SMTPSsl == nil {
			break
		}

		return e.complexity.EmailConfig.SMTPSsl(childComplexity), true

	case "EmailConfig.smtpUser":
		if e.complexity.EmailConfig.SMTPUser == nil {
			break
		}

		return e.complexity.EmailConfig.SMTPUser(childComplexity), true

	case "EmailRecord.content":
		if e.complexity.EmailRecord.Content == nil {
			break
		}

		return e.complexity.EmailRecord.Content(childComplexity), true

	case "EmailRecord.createUserID":
		if e.complexity.EmailRecord.CreateUserID == nil {
			break
		}

		return e.complexity.EmailRecord.CreateUserID(childComplexity), true

	case "EmailRecord.createdAt":
		if e.complexity.EmailRecord.CreatedAt == nil {
			break
		}

		return e.complexity.EmailRecord.CreatedAt(childComplexity), true

	case "EmailRecord.email":
		if e.complexity.EmailRecord.Email == nil {
			break
		}

		return e.complexity.EmailRecord.Email(childComplexity), true

	case "EmailRecord.id":
		if e.complexity.EmailRecord.ID == nil {
			break
		}

		return e.complexity.EmailRecord.ID(childComplexity), true

	case "EmailRecord.smtpFrom":
		if e.complexity.EmailRecord.SMTPFrom == nil {
			break
		}

		return e.complexity.EmailRecord.SMTPFrom(childComplexity), true

	case "EmailRecord.smtpFromName":
		if e.complexity.EmailRecord.SMTPFromName == nil {
			break
		}

		return e.complexity.EmailRecord.SMTPFromName(childComplexity), true

	case "EmailRecord.smtpPort":
		if e.complexity.EmailRecord.SMTPPort == nil {
			break
		}

		return e.complexity.EmailRecord.SMTPPort(childComplexity), true

	case "EmailRecord.smtpServer":
		if e.complexity.EmailRecord.SMTPServer == nil {
			break
		}

		return e.complexity.EmailRecord.SMTPServer(childComplexity), true

	case "EmailRecord.smtpSSL":
		if e.complexity.EmailRecord.SMTPSsl == nil {
			break
		}

		return e.complexity.EmailRecord.SMTPSsl(childComplexity), true

	case "EmailRecord.smtpUser":
		if e.complexity.EmailRecord.SMTPUser == nil {
			break
		}

		return e.complexity.EmailRecord.SMTPUser(childComplexity), true

	case "EmailRecord.sendTime":
		if e.complexity.EmailRecord.SendTime == nil {
			break
		}

		return e.complexity.EmailRecord.SendTime(childComplexity), true

	case "EmailRecord.subject":
		if e.complexity.EmailRecord.Subject == nil {
			break
		}

		return e.complexity.EmailRecord.Subject(childComplexity), true

	case "Event.description":
		if e.complexity.Event.Description == nil {
			break
		}

		return e.complexity.Event.Description(childComplexity), true

	case "Event.endTime":
		if e.complexity.Event.EndTime == nil {
			break
		}

		return e.complexity.Event.EndTime(childComplexity), true

	case "Event.id":
		if e.complexity.Event.ID == nil {
			break
		}

		return e.complexity.Event.ID(childComplexity), true

	case "Event.name":
		if e.complexity.Event.Name == nil {
			break
		}

		return e.complexity.Event.Name(childComplexity), true

	case "Event.remark":
		if e.complexity.Event.Remark == nil {
			break
		}

		return e.complexity.Event.Remark(childComplexity), true

	case "Event.startTime":
		if e.complexity.Event.StartTime == nil {
			break
		}

		return e.complexity.Event.StartTime(childComplexity), true

	case "File.content":
		if e.complexity.File.Content == nil {
			break
		}

		return e.complexity.File.Content(childComplexity), true

	case "File.contentType":
		if e.complexity.File.ContentType == nil {
			break
		}

		return e.complexity.File.ContentType(childComplexity), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.name":
		if e.complexity.File.Name == nil {
			break
		}

		return e.complexity.File.Name(childComplexity), true

	case "FileInfo.fileName":
		if e.complexity.FileInfo.FileName == nil {
			break
		}

		return e.complexity.FileInfo.FileName(childComplexity), true

	case "FileInfo.uploadURL":
		if e.complexity.FileInfo.UploadURL == nil {
			break
		}

		return e.complexity.FileInfo.UploadURL(childComplexity), true

	case "Game.createdAt":
		if e.complexity.Game.CreatedAt == nil {
			break
		}

		return e.complexity.Game.CreatedAt(childComplexity), true

	case "Game.description":
		if e.complexity.Game.Description == nil {
			break
		}

		return e.complexity.Game.Description(childComplexity), true

	case "Game.id":
		if e.complexity.Game.ID == nil {
			break
		}

		return e.complexity.Game.ID(childComplexity), true

	case "Game.name":
		if e.complexity.Game.Name == nil {
			break
		}

		return e.complexity.Game.Name(childComplexity), true

	case "Game.updatedAt":
		if e.complexity.Game.UpdatedAt == nil {
			break
		}

		return e.complexity.Game.UpdatedAt(childComplexity), true

	case "GamePlayer.balance":
		if e.complexity.GamePlayer.Balance == nil {
			break
		}

		return e.complexity.GamePlayer.Balance(childComplexity), true

	case "GamePlayer.createdAt":
		if e.complexity.GamePlayer.CreatedAt == nil {
			break
		}

		return e.complexity.GamePlayer.CreatedAt(childComplexity), true

	case "GamePlayer.id":
		if e.complexity.GamePlayer.ID == nil {
			break
		}

		return e.complexity.GamePlayer.ID(childComplexity), true

	case "GamePlayer.lastLoginTime":
		if e.complexity.GamePlayer.LastLoginTime == nil {
			break
		}

		return e.complexity.GamePlayer.LastLoginTime(childComplexity), true

	case "GamePlayer.lastLogoutTime":
		if e.complexity.GamePlayer.LastLogoutTime == nil {
			break
		}

		return e.complexity.GamePlayer.LastLogoutTime(childComplexity), true

	case "GamePlayer.nickname":
		if e.complexity.GamePlayer.Nickname == nil {
			break
		}

		return e.complexity.GamePlayer.Nickname(childComplexity), true

	case "GamePlayer.updatedAt":
		if e.complexity.GamePlayer.UpdatedAt == nil {
			break
		}

		return e.complexity.GamePlayer.UpdatedAt(childComplexity), true

	case "GamePlayer.username":
		if e.complexity.GamePlayer.Username == nil {
			break
		}

		return e.complexity.GamePlayer.Username(childComplexity), true

	case "GameTransferRecord.amount":
		if e.complexity.GameTransferRecord.Amount == nil {
			break
		}

		return e.complexity.GameTransferRecord.Amount(childComplexity), true

	case "GameTransferRecord.createdAt":
		if e.complexity.GameTransferRecord.CreatedAt == nil {
			break
		}

		return e.complexity.GameTransferRecord.CreatedAt(childComplexity), true

	case "GameTransferRecord.gameId":
		if e.complexity.GameTransferRecord.GameID == nil {
			break
		}

		return e.complexity.GameTransferRecord.GameID(childComplexity), true

	case "GameTransferRecord.gameName":
		if e.complexity.GameTransferRecord.GameName == nil {
			break
		}

		return e.complexity.GameTransferRecord.GameName(childComplexity), true

	case "GameTransferRecord.gamePlayerId":
		if e.complexity.GameTransferRecord.GamePlayerID == nil {
			break
		}

		return e.complexity.GameTransferRecord.GamePlayerID(childComplexity), true

	case "GameTransferRecord.id":
		if e.complexity.GameTransferRecord.ID == nil {
			break
		}

		return e.complexity.GameTransferRecord.ID(childComplexity), true

	case "GameTransferRecord.remark":
		if e.complexity.GameTransferRecord.Remark == nil {
			break
		}

		return e.complexity.GameTransferRecord.Remark(childComplexity), true

	case "GameTransferRecord.updatedAt":
		if e.complexity.GameTransferRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.GameTransferRecord.UpdatedAt(childComplexity), true

	case "GeneralAgent.account":
		if e.complexity.GeneralAgent.Account == nil {
			break
		}

		return e.complexity.GeneralAgent.Account(childComplexity), true

	case "GeneralAgent.id":
		if e.complexity.GeneralAgent.ID == nil {
			break
		}

		return e.complexity.GeneralAgent.ID(childComplexity), true

	case "GeneralAgent.name":
		if e.complexity.GeneralAgent.Name == nil {
			break
		}

		return e.complexity.GeneralAgent.Name(childComplexity), true

	case "HostsDeny.createUserID":
		if e.complexity.HostsDeny.CreateUserID == nil {
			break
		}

		return e.complexity.HostsDeny.CreateUserID(childComplexity), true

	case "HostsDeny.createdAt":
		if e.complexity.HostsDeny.CreatedAt == nil {
			break
		}

		return e.complexity.HostsDeny.CreatedAt(childComplexity), true

	case "HostsDeny.id":
		if e.complexity.HostsDeny.ID == nil {
			break
		}

		return e.complexity.HostsDeny.ID(childComplexity), true

	case "HostsDeny.ipAddress":
		if e.complexity.HostsDeny.IPAddress == nil {
			break
		}

		return e.complexity.HostsDeny.IPAddress(childComplexity), true

	case "HostsDeny.isEnabled":
		if e.complexity.HostsDeny.IsEnabled == nil {
			break
		}

		return e.complexity.HostsDeny.IsEnabled(childComplexity), true

	case "HostsDeny.remark":
		if e.complexity.HostsDeny.Remark == nil {
			break
		}

		return e.complexity.HostsDeny.Remark(childComplexity), true

	case "HostsDeny.updateUserID":
		if e.complexity.HostsDeny.UpdateUserID == nil {
			break
		}

		return e.complexity.HostsDeny.UpdateUserID(childComplexity), true

	case "HostsDeny.updatedAt":
		if e.complexity.HostsDeny.UpdatedAt == nil {
			break
		}

		return e.complexity.HostsDeny.UpdatedAt(childComplexity), true

	case "HubClient.devices":
		if e.complexity.HubClient.Devices == nil {
			break
		}

		return e.complexity.HubClient.Devices(childComplexity), true

	case "HubClient.userID":
		if e.complexity.HubClient.UserID == nil {
			break
		}

		return e.complexity.HubClient.UserID(childComplexity), true

	case "HubDevice.deviceUID":
		if e.complexity.HubDevice.DeviceUID == nil {
			break
		}

		return e.complexity.HubDevice.DeviceUID(childComplexity), true

	case "HubDevice.roomID":
		if e.complexity.HubDevice.RoomID == nil {
			break
		}

		return e.complexity.HubDevice.RoomID(childComplexity), true

	case "HubDevice.token":
		if e.complexity.HubDevice.Token == nil {
			break
		}

		return e.complexity.HubDevice.Token(childComplexity), true

	case "LineRate.createdAt":
		if e.complexity.LineRate.CreatedAt == nil {
			break
		}

		return e.complexity.LineRate.CreatedAt(childComplexity), true

	case "LineRate.description":
		if e.complexity.LineRate.Description == nil {
			break
		}

		return e.complexity.LineRate.Description(childComplexity), true

	case "LineRate.id":
		if e.complexity.LineRate.ID == nil {
			break
		}

		return e.complexity.LineRate.ID(childComplexity), true

	case "LineRate.name":
		if e.complexity.LineRate.Name == nil {
			break
		}

		return e.complexity.LineRate.Name(childComplexity), true

	case "LineRate.rate":
		if e.complexity.LineRate.Rate == nil {
			break
		}

		return e.complexity.LineRate.Rate(childComplexity), true

	case "LineRate.updatedAt":
		if e.complexity.LineRate.UpdatedAt == nil {
			break
		}

		return e.complexity.LineRate.UpdatedAt(childComplexity), true

	case "LineRateHistory.createdAt":
		if e.complexity.LineRateHistory.CreatedAt == nil {
			break
		}

		return e.complexity.LineRateHistory.CreatedAt(childComplexity), true

	case "LineRateHistory.description":
		if e.complexity.LineRateHistory.Description == nil {
			break
		}

		return e.complexity.LineRateHistory.Description(childComplexity), true

	case "LineRateHistory.id":
		if e.complexity.LineRateHistory.ID == nil {
			break
		}

		return e.complexity.LineRateHistory.ID(childComplexity), true

	case "LineRateHistory.name":
		if e.complexity.LineRateHistory.Name == nil {
			break
		}

		return e.complexity.LineRateHistory.Name(childComplexity), true

	case "LineRateHistory.rate":
		if e.complexity.LineRateHistory.Rate == nil {
			break
		}

		return e.complexity.LineRateHistory.Rate(childComplexity), true

	case "LineRateHistory.updatedAt":
		if e.complexity.LineRateHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.LineRateHistory.UpdatedAt(childComplexity), true

	case "LineRent.createdAt":
		if e.complexity.LineRent.CreatedAt == nil {
			break
		}

		return e.complexity.LineRent.CreatedAt(childComplexity), true

	case "LineRent.description":
		if e.complexity.LineRent.Description == nil {
			break
		}

		return e.complexity.LineRent.Description(childComplexity), true

	case "LineRent.id":
		if e.complexity.LineRent.ID == nil {
			break
		}

		return e.complexity.LineRent.ID(childComplexity), true

	case "LineRent.name":
		if e.complexity.LineRent.Name == nil {
			break
		}

		return e.complexity.LineRent.Name(childComplexity), true

	case "LineRent.updatedAt":
		if e.complexity.LineRent.UpdatedAt == nil {
			break
		}

		return e.complexity.LineRent.UpdatedAt(childComplexity), true

	case "ListAgentResp.agents":
		if e.complexity.ListAgentResp.Agents == nil {
			break
		}

		return e.complexity.ListAgentResp.Agents(childComplexity), true

	case "ListAgentResp.meta":
		if e.complexity.ListAgentResp.Meta == nil {
			break
		}

		return e.complexity.ListAgentResp.Meta(childComplexity), true

	case "ListAuditLogResp.auditLogs":
		if e.complexity.ListAuditLogResp.AuditLogs == nil {
			break
		}

		return e.complexity.ListAuditLogResp.AuditLogs(childComplexity), true

	case "ListAuditLogResp.meta":
		if e.complexity.ListAuditLogResp.Meta == nil {
			break
		}

		return e.complexity.ListAuditLogResp.Meta(childComplexity), true

	case "ListEmailRecordResp.emailRecords":
		if e.complexity.ListEmailRecordResp.EmailRecords == nil {
			break
		}

		return e.complexity.ListEmailRecordResp.EmailRecords(childComplexity), true

	case "ListEmailRecordResp.meta":
		if e.complexity.ListEmailRecordResp.Meta == nil {
			break
		}

		return e.complexity.ListEmailRecordResp.Meta(childComplexity), true

	case "ListEventResp.events":
		if e.complexity.ListEventResp.Events == nil {
			break
		}

		return e.complexity.ListEventResp.Events(childComplexity), true

	case "ListEventResp.meta":
		if e.complexity.ListEventResp.Meta == nil {
			break
		}

		return e.complexity.ListEventResp.Meta(childComplexity), true

	case "ListGamePlayerResp.meta":
		if e.complexity.ListGamePlayerResp.Meta == nil {
			break
		}

		return e.complexity.ListGamePlayerResp.Meta(childComplexity), true

	case "ListGamePlayerResp.players":
		if e.complexity.ListGamePlayerResp.Players == nil {
			break
		}

		return e.complexity.ListGamePlayerResp.Players(childComplexity), true

	case "ListGameResp.list":
		if e.complexity.ListGameResp.List == nil {
			break
		}

		return e.complexity.ListGameResp.List(childComplexity), true

	case "ListGameResp.total":
		if e.complexity.ListGameResp.Total == nil {
			break
		}

		return e.complexity.ListGameResp.Total(childComplexity), true

	case "ListGameTransferRecordResp.meta":
		if e.complexity.ListGameTransferRecordResp.Meta == nil {
			break
		}

		return e.complexity.ListGameTransferRecordResp.Meta(childComplexity), true

	case "ListGameTransferRecordResp.records":
		if e.complexity.ListGameTransferRecordResp.Records == nil {
			break
		}

		return e.complexity.ListGameTransferRecordResp.Records(childComplexity), true

	case "ListGeneralAgentResp.generalAgents":
		if e.complexity.ListGeneralAgentResp.GeneralAgents == nil {
			break
		}

		return e.complexity.ListGeneralAgentResp.GeneralAgents(childComplexity), true

	case "ListGeneralAgentResp.meta":
		if e.complexity.ListGeneralAgentResp.Meta == nil {
			break
		}

		return e.complexity.ListGeneralAgentResp.Meta(childComplexity), true

	case "ListHostsDenyResp.hostsDenys":
		if e.complexity.ListHostsDenyResp.HostsDenys == nil {
			break
		}

		return e.complexity.ListHostsDenyResp.HostsDenys(childComplexity), true

	case "ListHostsDenyResp.meta":
		if e.complexity.ListHostsDenyResp.Meta == nil {
			break
		}

		return e.complexity.ListHostsDenyResp.Meta(childComplexity), true

	case "ListLineRateHistoryResp.list":
		if e.complexity.ListLineRateHistoryResp.List == nil {
			break
		}

		return e.complexity.ListLineRateHistoryResp.List(childComplexity), true

	case "ListLineRateHistoryResp.total":
		if e.complexity.ListLineRateHistoryResp.Total == nil {
			break
		}

		return e.complexity.ListLineRateHistoryResp.Total(childComplexity), true

	case "ListLineRateResp.list":
		if e.complexity.ListLineRateResp.List == nil {
			break
		}

		return e.complexity.ListLineRateResp.List(childComplexity), true

	case "ListLineRateResp.total":
		if e.complexity.ListLineRateResp.Total == nil {
			break
		}

		return e.complexity.ListLineRateResp.Total(childComplexity), true

	case "ListLineRentResp.list":
		if e.complexity.ListLineRentResp.List == nil {
			break
		}

		return e.complexity.ListLineRentResp.List(childComplexity), true

	case "ListLineRentResp.total":
		if e.complexity.ListLineRentResp.Total == nil {
			break
		}

		return e.complexity.ListLineRentResp.Total(childComplexity), true

	case "ListMerchantBalanceLogResp.list":
		if e.complexity.ListMerchantBalanceLogResp.List == nil {
			break
		}

		return e.complexity.ListMerchantBalanceLogResp.List(childComplexity), true

	case "ListMerchantBalanceLogResp.total":
		if e.complexity.ListMerchantBalanceLogResp.Total == nil {
			break
		}

		return e.complexity.ListMerchantBalanceLogResp.Total(childComplexity), true

	case "ListMerchantDepositLogResp.list":
		if e.complexity.ListMerchantDepositLogResp.List == nil {
			break
		}

		return e.complexity.ListMerchantDepositLogResp.List(childComplexity), true

	case "ListMerchantDepositLogResp.total":
		if e.complexity.ListMerchantDepositLogResp.Total == nil {
			break
		}

		return e.complexity.ListMerchantDepositLogResp.Total(childComplexity), true

	case "ListMerchantDepositMethodResp.list":
		if e.complexity.ListMerchantDepositMethodResp.List == nil {
			break
		}

		return e.complexity.ListMerchantDepositMethodResp.List(childComplexity), true

	case "ListMerchantDepositMethodResp.total":
		if e.complexity.ListMerchantDepositMethodResp.Total == nil {
			break
		}

		return e.complexity.ListMerchantDepositMethodResp.Total(childComplexity), true

	case "ListMerchantFeeModeResp.list":
		if e.complexity.ListMerchantFeeModeResp.List == nil {
			break
		}

		return e.complexity.ListMerchantFeeModeResp.List(childComplexity), true

	case "ListMerchantFeeModeResp.total":
		if e.complexity.ListMerchantFeeModeResp.Total == nil {
			break
		}

		return e.complexity.ListMerchantFeeModeResp.Total(childComplexity), true

	case "ListMerchantLineResp.list":
		if e.complexity.ListMerchantLineResp.List == nil {
			break
		}

		return e.complexity.ListMerchantLineResp.List(childComplexity), true

	case "ListMerchantLineResp.total":
		if e.complexity.ListMerchantLineResp.Total == nil {
			break
		}

		return e.complexity.ListMerchantLineResp.Total(childComplexity), true

	case "ListMerchantLoginHistoryResp.list":
		if e.complexity.ListMerchantLoginHistoryResp.List == nil {
			break
		}

		return e.complexity.ListMerchantLoginHistoryResp.List(childComplexity), true

	case "ListMerchantLoginHistoryResp.total":
		if e.complexity.ListMerchantLoginHistoryResp.Total == nil {
			break
		}

		return e.complexity.ListMerchantLoginHistoryResp.Total(childComplexity), true

	case "ListMerchantResp.list":
		if e.complexity.ListMerchantResp.List == nil {
			break
		}

		return e.complexity.ListMerchantResp.List(childComplexity), true

	case "ListMerchantResp.total":
		if e.complexity.ListMerchantResp.Total == nil {
			break
		}

		return e.complexity.ListMerchantResp.Total(childComplexity), true

	case "ListMerchantWithdrawLogResp.list":
		if e.complexity.ListMerchantWithdrawLogResp.List == nil {
			break
		}

		return e.complexity.ListMerchantWithdrawLogResp.List(childComplexity), true

	case "ListMerchantWithdrawLogResp.total":
		if e.complexity.ListMerchantWithdrawLogResp.Total == nil {
			break
		}

		return e.complexity.ListMerchantWithdrawLogResp.Total(childComplexity), true

	case "ListMerchantWithdrawMethodResp.list":
		if e.complexity.ListMerchantWithdrawMethodResp.List == nil {
			break
		}

		return e.complexity.ListMerchantWithdrawMethodResp.List(childComplexity), true

	case "ListMerchantWithdrawMethodResp.total":
		if e.complexity.ListMerchantWithdrawMethodResp.Total == nil {
			break
		}

		return e.complexity.ListMerchantWithdrawMethodResp.Total(childComplexity), true

	case "ListMetadata.count":
		if e.complexity.ListMetadata.Count == nil {
			break
		}

		return e.complexity.ListMetadata.Count(childComplexity), true

	case "ListRoleResp.meta":
		if e.complexity.ListRoleResp.Meta == nil {
			break
		}

		return e.complexity.ListRoleResp.Meta(childComplexity), true

	case "ListRoleResp.roles":
		if e.complexity.ListRoleResp.Roles == nil {
			break
		}

		return e.complexity.ListRoleResp.Roles(childComplexity), true

	case "ListSecurityEventResp.meta":
		if e.complexity.ListSecurityEventResp.Meta == nil {
			break
		}

		return e.complexity.ListSecurityEventResp.Meta(childComplexity), true

	case "ListSecurityEventResp.securityEvents":
		if e.complexity.ListSecurityEventResp.SecurityEvents == nil {
			break
		}

		return e.complexity.ListSecurityEventResp.SecurityEvents(childComplexity), true

	case "ListSmsRecordResp.meta":
		if e.complexity.ListSmsRecordResp.Meta == nil {
			break
		}

		return e.complexity.ListSmsRecordResp.Meta(childComplexity), true

	case "ListSmsRecordResp.smsRecords":
		if e.complexity.ListSmsRecordResp.SmsRecords == nil {
			break
		}

		return e.complexity.ListSmsRecordResp.SmsRecords(childComplexity), true

	case "ListSystemLineResp.list":
		if e.complexity.ListSystemLineResp.List == nil {
			break
		}

		return e.complexity.ListSystemLineResp.List(childComplexity), true

	case "ListSystemLineResp.total":
		if e.complexity.ListSystemLineResp.Total == nil {
			break
		}

		return e.complexity.ListSystemLineResp.Total(childComplexity), true

	case "ListTagResp.meta":
		if e.complexity.ListTagResp.Meta == nil {
			break
		}

		return e.complexity.ListTagResp.Meta(childComplexity), true

	case "ListTagResp.tags":
		if e.complexity.ListTagResp.Tags == nil {
			break
		}

		return e.complexity.ListTagResp.Tags(childComplexity), true

	case "ListTemplateResp.meta":
		if e.complexity.ListTemplateResp.Meta == nil {
			break
		}

		return e.complexity.ListTemplateResp.Meta(childComplexity), true

	case "ListTemplateResp.templates":
		if e.complexity.ListTemplateResp.Templates == nil {
			break
		}

		return e.complexity.ListTemplateResp.Templates(childComplexity), true

	case "ListUserLoginHistoryResp.meta":
		if e.complexity.ListUserLoginHistoryResp.Meta == nil {
			break
		}

		return e.complexity.ListUserLoginHistoryResp.Meta(childComplexity), true

	case "ListUserLoginHistoryResp.userLoginHistories":
		if e.complexity.ListUserLoginHistoryResp.UserLoginHistories == nil {
			break
		}

		return e.complexity.ListUserLoginHistoryResp.UserLoginHistories(childComplexity), true

	case "ListUserResp.meta":
		if e.complexity.ListUserResp.Meta == nil {
			break
		}

		return e.complexity.ListUserResp.Meta(childComplexity), true

	case "ListUserResp.users":
		if e.complexity.ListUserResp.Users == nil {
			break
		}

		return e.complexity.ListUserResp.Users(childComplexity), true

	case "ListUserRoleResp.meta":
		if e.complexity.ListUserRoleResp.Meta == nil {
			break
		}

		return e.complexity.ListUserRoleResp.Meta(childComplexity), true

	case "ListUserRoleResp.userRoles":
		if e.complexity.ListUserRoleResp.UserRoles == nil {
			break
		}

		return e.complexity.ListUserRoleResp.UserRoles(childComplexity), true

	case "ListUserTagResp.meta":
		if e.complexity.ListUserTagResp.Meta == nil {
			break
		}

		return e.complexity.ListUserTagResp.Meta(childComplexity), true

	case "ListUserTagResp.userTags":
		if e.complexity.ListUserTagResp.UserTags == nil {
			break
		}

		return e.complexity.ListUserTagResp.UserTags(childComplexity), true

	case "ListUserWhitelistResp.meta":
		if e.complexity.ListUserWhitelistResp.Meta == nil {
			break
		}

		return e.complexity.ListUserWhitelistResp.Meta(childComplexity), true

	case "ListUserWhitelistResp.userWhitelists":
		if e.complexity.ListUserWhitelistResp.UserWhitelists == nil {
			break
		}

		return e.complexity.ListUserWhitelistResp.UserWhitelists(childComplexity), true

	case "ListVipClaimLogResp.list":
		if e.complexity.ListVipClaimLogResp.List == nil {
			break
		}

		return e.complexity.ListVipClaimLogResp.List(childComplexity), true

	case "ListVipClaimLogResp.total":
		if e.complexity.ListVipClaimLogResp.Total == nil {
			break
		}

		return e.complexity.ListVipClaimLogResp.Total(childComplexity), true

	case "ListVipLevelResp.list":
		if e.complexity.ListVipLevelResp.List == nil {
			break
		}

		return e.complexity.ListVipLevelResp.List(childComplexity), true

	case "ListVipLevelResp.total":
		if e.complexity.ListVipLevelResp.Total == nil {
			break
		}

		return e.complexity.ListVipLevelResp.Total(childComplexity), true

	case "ListVipUpgradeLogResp.list":
		if e.complexity.ListVipUpgradeLogResp.List == nil {
			break
		}

		return e.complexity.ListVipUpgradeLogResp.List(childComplexity), true

	case "ListVipUpgradeLogResp.total":
		if e.complexity.ListVipUpgradeLogResp.Total == nil {
			break
		}

		return e.complexity.ListVipUpgradeLogResp.Total(childComplexity), true

	case "LoginResp.deviceUID":
		if e.complexity.LoginResp.DeviceUID == nil {
			break
		}

		return e.complexity.LoginResp.DeviceUID(childComplexity), true

	case "LoginResp.token":
		if e.complexity.LoginResp.Token == nil {
			break
		}

		return e.complexity.LoginResp.Token(childComplexity), true

	case "LoginResp.userAgent":
		if e.complexity.LoginResp.UserAgent == nil {
			break
		}

		return e.complexity.LoginResp.UserAgent(childComplexity), true

	case "Menu.key":
		if e.complexity.Menu.Key == nil {
			break
		}

		return e.complexity.Menu.Key(childComplexity), true

	case "Menu.name":
		if e.complexity.Menu.Name == nil {
			break
		}

		return e.complexity.Menu.Name(childComplexity), true

	case "Menu.next":
		if e.complexity.Menu.Next == nil {
			break
		}

		return e.complexity.Menu.Next(childComplexity), true

	case "Menu.superKey":
		if e.complexity.Menu.SuperKey == nil {
			break
		}

		return e.complexity.Menu.SuperKey(childComplexity), true

	case "Merchant.createdAt":
		if e.complexity.Merchant.CreatedAt == nil {
			break
		}

		return e.complexity.Merchant.CreatedAt(childComplexity), true

	case "Merchant.description":
		if e.complexity.Merchant.Description == nil {
			break
		}

		return e.complexity.Merchant.Description(childComplexity), true

	case "Merchant.id":
		if e.complexity.Merchant.ID == nil {
			break
		}

		return e.complexity.Merchant.ID(childComplexity), true

	case "Merchant.name":
		if e.complexity.Merchant.Name == nil {
			break
		}

		return e.complexity.Merchant.Name(childComplexity), true

	case "Merchant.updatedAt":
		if e.complexity.Merchant.UpdatedAt == nil {
			break
		}

		return e.complexity.Merchant.UpdatedAt(childComplexity), true

	case "MerchantBalanceLog.amount":
		if e.complexity.MerchantBalanceLog.Amount == nil {
			break
		}

		return e.complexity.MerchantBalanceLog.Amount(childComplexity), true

	case "MerchantBalanceLog.createdAt":
		if e.complexity.MerchantBalanceLog.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantBalanceLog.CreatedAt(childComplexity), true

	case "MerchantBalanceLog.description":
		if e.complexity.MerchantBalanceLog.Description == nil {
			break
		}

		return e.complexity.MerchantBalanceLog.Description(childComplexity), true

	case "MerchantBalanceLog.id":
		if e.complexity.MerchantBalanceLog.ID == nil {
			break
		}

		return e.complexity.MerchantBalanceLog.ID(childComplexity), true

	case "MerchantBalanceLog.merchantId":
		if e.complexity.MerchantBalanceLog.MerchantID == nil {
			break
		}

		return e.complexity.MerchantBalanceLog.MerchantID(childComplexity), true

	case "MerchantBalanceLog.updatedAt":
		if e.complexity.MerchantBalanceLog.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantBalanceLog.UpdatedAt(childComplexity), true

	case "MerchantDepositLog.amount":
		if e.complexity.MerchantDepositLog.Amount == nil {
			break
		}

		return e.complexity.MerchantDepositLog.Amount(childComplexity), true

	case "MerchantDepositLog.createdAt":
		if e.complexity.MerchantDepositLog.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantDepositLog.CreatedAt(childComplexity), true

	case "MerchantDepositLog.description":
		if e.complexity.MerchantDepositLog.Description == nil {
			break
		}

		return e.complexity.MerchantDepositLog.Description(childComplexity), true

	case "MerchantDepositLog.id":
		if e.complexity.MerchantDepositLog.ID == nil {
			break
		}

		return e.complexity.MerchantDepositLog.ID(childComplexity), true

	case "MerchantDepositLog.merchantId":
		if e.complexity.MerchantDepositLog.MerchantID == nil {
			break
		}

		return e.complexity.MerchantDepositLog.MerchantID(childComplexity), true

	case "MerchantDepositLog.updatedAt":
		if e.complexity.MerchantDepositLog.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantDepositLog.UpdatedAt(childComplexity), true

	case "MerchantDepositMethod.createdAt":
		if e.complexity.MerchantDepositMethod.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantDepositMethod.CreatedAt(childComplexity), true

	case "MerchantDepositMethod.description":
		if e.complexity.MerchantDepositMethod.Description == nil {
			break
		}

		return e.complexity.MerchantDepositMethod.Description(childComplexity), true

	case "MerchantDepositMethod.id":
		if e.complexity.MerchantDepositMethod.ID == nil {
			break
		}

		return e.complexity.MerchantDepositMethod.ID(childComplexity), true

	case "MerchantDepositMethod.name":
		if e.complexity.MerchantDepositMethod.Name == nil {
			break
		}

		return e.complexity.MerchantDepositMethod.Name(childComplexity), true

	case "MerchantDepositMethod.updatedAt":
		if e.complexity.MerchantDepositMethod.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantDepositMethod.UpdatedAt(childComplexity), true

	case "MerchantFeeMode.createdAt":
		if e.complexity.MerchantFeeMode.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantFeeMode.CreatedAt(childComplexity), true

	case "MerchantFeeMode.description":
		if e.complexity.MerchantFeeMode.Description == nil {
			break
		}

		return e.complexity.MerchantFeeMode.Description(childComplexity), true

	case "MerchantFeeMode.id":
		if e.complexity.MerchantFeeMode.ID == nil {
			break
		}

		return e.complexity.MerchantFeeMode.ID(childComplexity), true

	case "MerchantFeeMode.name":
		if e.complexity.MerchantFeeMode.Name == nil {
			break
		}

		return e.complexity.MerchantFeeMode.Name(childComplexity), true

	case "MerchantFeeMode.updatedAt":
		if e.complexity.MerchantFeeMode.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantFeeMode.UpdatedAt(childComplexity), true

	case "MerchantLine.createdAt":
		if e.complexity.MerchantLine.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantLine.CreatedAt(childComplexity), true

	case "MerchantLine.description":
		if e.complexity.MerchantLine.Description == nil {
			break
		}

		return e.complexity.MerchantLine.Description(childComplexity), true

	case "MerchantLine.id":
		if e.complexity.MerchantLine.ID == nil {
			break
		}

		return e.complexity.MerchantLine.ID(childComplexity), true

	case "MerchantLine.name":
		if e.complexity.MerchantLine.Name == nil {
			break
		}

		return e.complexity.MerchantLine.Name(childComplexity), true

	case "MerchantLine.updatedAt":
		if e.complexity.MerchantLine.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantLine.UpdatedAt(childComplexity), true

	case "MerchantLoginHistory.createdAt":
		if e.complexity.MerchantLoginHistory.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantLoginHistory.CreatedAt(childComplexity), true

	case "MerchantLoginHistory.id":
		if e.complexity.MerchantLoginHistory.ID == nil {
			break
		}

		return e.complexity.MerchantLoginHistory.ID(childComplexity), true

	case "MerchantLoginHistory.ip":
		if e.complexity.MerchantLoginHistory.IP == nil {
			break
		}

		return e.complexity.MerchantLoginHistory.IP(childComplexity), true

	case "MerchantLoginHistory.merchantId":
		if e.complexity.MerchantLoginHistory.MerchantID == nil {
			break
		}

		return e.complexity.MerchantLoginHistory.MerchantID(childComplexity), true

	case "MerchantLoginHistory.updatedAt":
		if e.complexity.MerchantLoginHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantLoginHistory.UpdatedAt(childComplexity), true

	case "MerchantWithdrawLog.amount":
		if e.complexity.MerchantWithdrawLog.Amount == nil {
			break
		}

		return e.complexity.MerchantWithdrawLog.Amount(childComplexity), true

	case "MerchantWithdrawLog.createdAt":
		if e.complexity.MerchantWithdrawLog.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantWithdrawLog.CreatedAt(childComplexity), true

	case "MerchantWithdrawLog.description":
		if e.complexity.MerchantWithdrawLog.Description == nil {
			break
		}

		return e.complexity.MerchantWithdrawLog.Description(childComplexity), true

	case "MerchantWithdrawLog.id":
		if e.complexity.MerchantWithdrawLog.ID == nil {
			break
		}

		return e.complexity.MerchantWithdrawLog.ID(childComplexity), true

	case "MerchantWithdrawLog.merchantId":
		if e.complexity.MerchantWithdrawLog.MerchantID == nil {
			break
		}

		return e.complexity.MerchantWithdrawLog.MerchantID(childComplexity), true

	case "MerchantWithdrawLog.updatedAt":
		if e.complexity.MerchantWithdrawLog.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantWithdrawLog.UpdatedAt(childComplexity), true

	case "MerchantWithdrawMethod.createdAt":
		if e.complexity.MerchantWithdrawMethod.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantWithdrawMethod.CreatedAt(childComplexity), true

	case "MerchantWithdrawMethod.description":
		if e.complexity.MerchantWithdrawMethod.Description == nil {
			break
		}

		return e.complexity.MerchantWithdrawMethod.Description(childComplexity), true

	case "MerchantWithdrawMethod.id":
		if e.complexity.MerchantWithdrawMethod.ID == nil {
			break
		}

		return e.complexity.MerchantWithdrawMethod.ID(childComplexity), true

	case "MerchantWithdrawMethod.name":
		if e.complexity.MerchantWithdrawMethod.Name == nil {
			break
		}

		return e.complexity.MerchantWithdrawMethod.Name(childComplexity), true

	case "MerchantWithdrawMethod.updatedAt":
		if e.complexity.MerchantWithdrawMethod.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantWithdrawMethod.UpdatedAt(childComplexity), true

	case "Meta.page":
		if e.complexity.Meta.Page == nil {
			break
		}

		return e.complexity.Meta.Page(childComplexity), true

	case "Meta.perPage":
		if e.complexity.Meta.PerPage == nil {
			break
		}

		return e.complexity.Meta.PerPage(childComplexity), true

	case "Meta.total":
		if e.complexity.Meta.Total == nil {
			break
		}

		return e.complexity.Meta.Total(childComplexity), true

	case "Meta.totalPage":
		if e.complexity.Meta.TotalPage == nil {
			break
		}

		return e.complexity.Meta.TotalPage(childComplexity), true

	case "Mutation.applyMerchantBalance":
		if e.complexity.Mutation.ApplyMerchantBalance == nil {
			break
		}

		args, err := ec.field_Mutation_applyMerchantBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApplyMerchantBalance(childComplexity, args["in"].(view.MerchantBalanceApplyInput)), true

	case "Mutation.auditMerchantBalance":
		if e.complexity.Mutation.AuditMerchantBalance == nil {
			break
		}

		args, err := ec.field_Mutation_auditMerchantBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuditMerchantBalance(childComplexity, args["filter"].(view.MerchantBalanceFilterInput), args["in"].(view.MerchantBalanceAuditInput)), true

	case "Mutation.banUser":
		if e.complexity.Mutation.BanUser == nil {
			break
		}

		args, err := ec.field_Mutation_banUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BanUser(childComplexity, args["filter"].(view.UserFilterInput)), true

	case "Mutation.claimVipReward":
		if e.complexity.Mutation.ClaimVipReward == nil {
			break
		}

		args, err := ec.field_Mutation_claimVipReward_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ClaimVipReward(childComplexity, args["in"].(view.ClaimVipRewardInput)), true

	case "Mutation.configEmail":
		if e.complexity.Mutation.ConfigEmail == nil {
			break
		}

		args, err := ec.field_Mutation_configEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigEmail(childComplexity, args["in"].(view.EmailConfigInput)), true

	case "Mutation.configSms":
		if e.complexity.Mutation.ConfigSms == nil {
			break
		}

		args, err := ec.field_Mutation_configSms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigSms(childComplexity, args["in"].(view.SmsConfigInput)), true

	case "Mutation.createAgent":
		if e.complexity.Mutation.CreateAgent == nil {
			break
		}

		args, err := ec.field_Mutation_createAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAgent(childComplexity, args["in"].(view.AgentCreateInput)), true

	case "Mutation.CreateCommonUser":
		if e.complexity.Mutation.CreateCommonUser == nil {
			break
		}

		args, err := ec.field_Mutation_CreateCommonUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCommonUser(childComplexity, args["in"].(view.CreateCommonUserReqInput)), true

	case "Mutation.createEvent":
		if e.complexity.Mutation.CreateEvent == nil {
			break
		}

		args, err := ec.field_Mutation_createEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEvent(childComplexity, args["in"].(view.EventCreateInput)), true

	case "Mutation.createGame":
		if e.complexity.Mutation.CreateGame == nil {
			break
		}

		args, err := ec.field_Mutation_createGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGame(childComplexity, args["in"].(view.GameCreateInput)), true

	case "Mutation.createGeneralAgent":
		if e.complexity.Mutation.CreateGeneralAgent == nil {
			break
		}

		args, err := ec.field_Mutation_createGeneralAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGeneralAgent(childComplexity, args["in"].(view.GeneralAgentCreateInput)), true

	case "Mutation.createHostsDeny":
		if e.complexity.Mutation.CreateHostsDeny == nil {
			break
		}

		args, err := ec.field_Mutation_createHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHostsDeny(childComplexity, args["in"].(view.HostsDenyCreateInput)), true

	case "Mutation.createLineRate":
		if e.complexity.Mutation.CreateLineRate == nil {
			break
		}

		args, err := ec.field_Mutation_createLineRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLineRate(childComplexity, args["in"].(view.LineRateCreateInput)), true

	case "Mutation.createLineRent":
		if e.complexity.Mutation.CreateLineRent == nil {
			break
		}

		args, err := ec.field_Mutation_createLineRent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLineRent(childComplexity, args["in"].(view.LineRentCreateInput)), true

	case "Mutation.createMerchant":
		if e.complexity.Mutation.CreateMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_createMerchant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMerchant(childComplexity, args["in"].(view.MerchantCreateInput)), true

	case "Mutation.createMerchantDepositMethod":
		if e.complexity.Mutation.CreateMerchantDepositMethod == nil {
			break
		}

		args, err := ec.field_Mutation_createMerchantDepositMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMerchantDepositMethod(childComplexity, args["in"].(view.MerchantDepositMethodCreateInput)), true

	case "Mutation.createMerchantFeeMode":
		if e.complexity.Mutation.CreateMerchantFeeMode == nil {
			break
		}

		args, err := ec.field_Mutation_createMerchantFeeMode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMerchantFeeMode(childComplexity, args["in"].(view.MerchantFeeModeCreateInput)), true

	case "Mutation.createMerchantLine":
		if e.complexity.Mutation.CreateMerchantLine == nil {
			break
		}

		args, err := ec.field_Mutation_createMerchantLine_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMerchantLine(childComplexity, args["in"].(view.MerchantLineCreateInput)), true

	case "Mutation.createMerchantWithdrawMethod":
		if e.complexity.Mutation.CreateMerchantWithdrawMethod == nil {
			break
		}

		args, err := ec.field_Mutation_createMerchantWithdrawMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMerchantWithdrawMethod(childComplexity, args["in"].(view.MerchantWithdrawMethodCreateInput)), true

	case "Mutation.createRole":
		if e.complexity.Mutation.CreateRole == nil {
			break
		}

		args, err := ec.field_Mutation_createRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRole(childComplexity, args["in"].(view.RoleCreateInput)), true

	case "Mutation.createSecurityEvent":
		if e.complexity.Mutation.CreateSecurityEvent == nil {
			break
		}

		args, err := ec.field_Mutation_createSecurityEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSecurityEvent(childComplexity, args["in"].(view.SecurityEventCreateInput)), true

	case "Mutation.createSystemLine":
		if e.complexity.Mutation.CreateSystemLine == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemLine_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemLine(childComplexity, args["in"].(view.SystemLineCreateInput)), true

	case "Mutation.createTag":
		if e.complexity.Mutation.CreateTag == nil {
			break
		}

		args, err := ec.field_Mutation_createTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTag(childComplexity, args["in"].(view.TagCreateInput)), true

	case "Mutation.createTemplate":
		if e.complexity.Mutation.CreateTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTemplate(childComplexity, args["in"].(view.TemplateCreateInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["in"].(view.CreateUserReqInput)), true

	case "Mutation.createUserRole":
		if e.complexity.Mutation.CreateUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_createUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserRole(childComplexity, args["in"].(view.UserRoleCreateInput)), true

	case "Mutation.createUserTag":
		if e.complexity.Mutation.CreateUserTag == nil {
			break
		}

		args, err := ec.field_Mutation_createUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserTag(childComplexity, args["in"].(view.UserTagCreateInput)), true

	case "Mutation.createUserWhitelist":
		if e.complexity.Mutation.CreateUserWhitelist == nil {
			break
		}

		args, err := ec.field_Mutation_createUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserWhitelist(childComplexity, args["in"].(view.UserWhitelistCreateInput)), true

	case "Mutation.createVipLevel":
		if e.complexity.Mutation.CreateVipLevel == nil {
			break
		}

		args, err := ec.field_Mutation_createVipLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVipLevel(childComplexity, args["in"].(view.VipLevelCreateInput)), true

	case "Mutation.deleteAgent":
		if e.complexity.Mutation.DeleteAgent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAgent(childComplexity, args["filter"].(view.AgentFilterInput)), true

	case "Mutation.deleteEvent":
		if e.complexity.Mutation.DeleteEvent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEvent(childComplexity, args["filter"].(view.EventFilterInput)), true

	case "Mutation.deleteGame":
		if e.complexity.Mutation.DeleteGame == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGame(childComplexity, args["filter"].(view.GameFilterInput)), true

	case "Mutation.deleteGeneralAgent":
		if e.complexity.Mutation.DeleteGeneralAgent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGeneralAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGeneralAgent(childComplexity, args["filter"].(view.GeneralAgentFilterInput)), true

	case "Mutation.deleteHostsDeny":
		if e.complexity.Mutation.DeleteHostsDeny == nil {
			break
		}

		args, err := ec.field_Mutation_deleteHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHostsDeny(childComplexity, args["filter"].(view.HostsDenyFilterInput)), true

	case "Mutation.deleteLineRate":
		if e.complexity.Mutation.DeleteLineRate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLineRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLineRate(childComplexity, args["filter"].(view.LineRateFilterInput)), true

	case "Mutation.deleteLineRent":
		if e.complexity.Mutation.DeleteLineRent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLineRent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLineRent(childComplexity, args["filter"].(view.LineRentFilterInput)), true

	case "Mutation.deleteMerchant":
		if e.complexity.Mutation.DeleteMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMerchant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMerchant(childComplexity, args["filter"].(view.MerchantFilterInput)), true

	case "Mutation.deleteMerchantDepositMethod":
		if e.complexity.Mutation.DeleteMerchantDepositMethod == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMerchantDepositMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMerchantDepositMethod(childComplexity, args["filter"].(view.MerchantDepositMethodFilterInput)), true

	case "Mutation.deleteMerchantFeeMode":
		if e.complexity.Mutation.DeleteMerchantFeeMode == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMerchantFeeMode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMerchantFeeMode(childComplexity, args["filter"].(view.MerchantFeeModeFilterInput)), true

	case "Mutation.deleteMerchantLine":
		if e.complexity.Mutation.DeleteMerchantLine == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMerchantLine_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMerchantLine(childComplexity, args["filter"].(view.MerchantLineFilterInput)), true

	case "Mutation.deleteMerchantWithdrawMethod":
		if e.complexity.Mutation.DeleteMerchantWithdrawMethod == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMerchantWithdrawMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMerchantWithdrawMethod(childComplexity, args["filter"].(view.MerchantWithdrawMethodFilterInput)), true

	case "Mutation.deleteRole":
		if e.complexity.Mutation.DeleteRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRole(childComplexity, args["filter"].(view.RoleFilterInput)), true

	case "Mutation.deleteSecurityEvent":
		if e.complexity.Mutation.DeleteSecurityEvent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSecurityEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSecurityEvent(childComplexity, args["filter"].(view.SecurityEventFilterInput)), true

	case "Mutation.deleteSystemLine":
		if e.complexity.Mutation.DeleteSystemLine == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSystemLine_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemLine(childComplexity, args["filter"].(view.SystemLineFilterInput)), true

	case "Mutation.deleteTag":
		if e.complexity.Mutation.DeleteTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTag(childComplexity, args["filter"].(view.TagFilterInput)), true

	case "Mutation.deleteTemplate":
		if e.complexity.Mutation.DeleteTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTemplate(childComplexity, args["filter"].(view.TemplateFilterInput)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["filter"].(view.UserFilterInput)), true

	case "Mutation.deleteUserRole":
		if e.complexity.Mutation.DeleteUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserRole(childComplexity, args["filter"].(view.UserRoleFilterInput)), true

	case "Mutation.deleteUserTag":
		if e.complexity.Mutation.DeleteUserTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserTag(childComplexity, args["filter"].(view.UserTagFilterInput)), true

	case "Mutation.deleteUserWhitelist":
		if e.complexity.Mutation.DeleteUserWhitelist == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserWhitelist(childComplexity, args["filter"].(view.UserWhitelistFilterInput)), true

	case "Mutation.deleteVipLevel":
		if e.complexity.Mutation.DeleteVipLevel == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVipLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVipLevel(childComplexity, args["filter"].(view.VipLevelFilterInput)), true

	case "Mutation.Login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_Login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["in"].(view.LoginReqInput)), true

	case "Mutation.Logout":
		if e.complexity.Mutation.Logout == nil {
			break
		}

		return e.complexity.Mutation.Logout(childComplexity), true

	case "Mutation.RefreshToken":
		if e.complexity.Mutation.RefreshToken == nil {
			break
		}

		return e.complexity.Mutation.RefreshToken(childComplexity), true

	case "Mutation.unbanUser":
		if e.complexity.Mutation.UnbanUser == nil {
			break
		}

		args, err := ec.field_Mutation_unbanUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnbanUser(childComplexity, args["filter"].(view.UserFilterInput)), true

	case "Mutation.updateAgent":
		if e.complexity.Mutation.UpdateAgent == nil {
			break
		}

		args, err := ec.field_Mutation_updateAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAgent(childComplexity, args["filter"].(view.AgentFilterInput), args["in"].(view.AgentUpdateInput)), true

	case "Mutation.updateEvent":
		if e.complexity.Mutation.UpdateEvent == nil {
			break
		}

		args, err := ec.field_Mutation_updateEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEvent(childComplexity, args["filter"].(view.EventFilterInput), args["in"].(view.EventUpdateInput)), true

	case "Mutation.updateGame":
		if e.complexity.Mutation.UpdateGame == nil {
			break
		}

		args, err := ec.field_Mutation_updateGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGame(childComplexity, args["filter"].(view.GameFilterInput), args["in"].(view.GameUpdateInput)), true

	case "Mutation.updateGeneralAgent":
		if e.complexity.Mutation.UpdateGeneralAgent == nil {
			break
		}

		args, err := ec.field_Mutation_updateGeneralAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGeneralAgent(childComplexity, args["filter"].(view.GeneralAgentFilterInput), args["in"].(view.GeneralAgentUpdateInput)), true

	case "Mutation.updateHostsDeny":
		if e.complexity.Mutation.UpdateHostsDeny == nil {
			break
		}

		args, err := ec.field_Mutation_updateHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHostsDeny(childComplexity, args["filter"].(view.HostsDenyFilterInput), args["in"].(view.HostsDenyUpdateInput)), true

	case "Mutation.updateLineRate":
		if e.complexity.Mutation.UpdateLineRate == nil {
			break
		}

		args, err := ec.field_Mutation_updateLineRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLineRate(childComplexity, args["filter"].(view.LineRateFilterInput), args["in"].(view.LineRateUpdateInput)), true

	case "Mutation.updateLineRent":
		if e.complexity.Mutation.UpdateLineRent == nil {
			break
		}

		args, err := ec.field_Mutation_updateLineRent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLineRent(childComplexity, args["filter"].(view.LineRentFilterInput), args["in"].(view.LineRentUpdateInput)), true

	case "Mutation.updateMerchant":
		if e.complexity.Mutation.UpdateMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_updateMerchant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMerchant(childComplexity, args["filter"].(view.MerchantFilterInput), args["in"].(view.MerchantUpdateInput)), true

	case "Mutation.updateMerchantDepositMethod":
		if e.complexity.Mutation.UpdateMerchantDepositMethod == nil {
			break
		}

		args, err := ec.field_Mutation_updateMerchantDepositMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMerchantDepositMethod(childComplexity, args["filter"].(view.MerchantDepositMethodFilterInput), args["in"].(view.MerchantDepositMethodUpdateInput)), true

	case "Mutation.updateMerchantFeeMode":
		if e.complexity.Mutation.UpdateMerchantFeeMode == nil {
			break
		}

		args, err := ec.field_Mutation_updateMerchantFeeMode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMerchantFeeMode(childComplexity, args["filter"].(view.MerchantFeeModeFilterInput), args["in"].(view.MerchantFeeModeUpdateInput)), true

	case "Mutation.updateMerchantLine":
		if e.complexity.Mutation.UpdateMerchantLine == nil {
			break
		}

		args, err := ec.field_Mutation_updateMerchantLine_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMerchantLine(childComplexity, args["filter"].(view.MerchantLineFilterInput), args["in"].(view.MerchantLineUpdateInput)), true

	case "Mutation.updateMerchantWithdrawMethod":
		if e.complexity.Mutation.UpdateMerchantWithdrawMethod == nil {
			break
		}

		args, err := ec.field_Mutation_updateMerchantWithdrawMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMerchantWithdrawMethod(childComplexity, args["filter"].(view.MerchantWithdrawMethodFilterInput), args["in"].(view.MerchantWithdrawMethodUpdateInput)), true

	case "Mutation.updateRole":
		if e.complexity.Mutation.UpdateRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRole(childComplexity, args["filter"].(view.RoleFilterInput), args["in"].(view.RoleUpdateInput)), true

	case "Mutation.updateSecurityEvent":
		if e.complexity.Mutation.UpdateSecurityEvent == nil {
			break
		}

		args, err := ec.field_Mutation_updateSecurityEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSecurityEvent(childComplexity, args["filter"].(view.SecurityEventFilterInput), args["in"].(view.SecurityEventUpdateInput)), true

	case "Mutation.updateSystemLine":
		if e.complexity.Mutation.UpdateSystemLine == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemLine_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemLine(childComplexity, args["filter"].(view.SystemLineFilterInput), args["in"].(view.SystemLineUpdateInput)), true

	case "Mutation.updateTag":
		if e.complexity.Mutation.UpdateTag == nil {
			break
		}

		args, err := ec.field_Mutation_updateTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTag(childComplexity, args["filter"].(view.TagFilterInput), args["in"].(view.TagUpdateInput)), true

	case "Mutation.updateTemplate":
		if e.complexity.Mutation.UpdateTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTemplate(childComplexity, args["filter"].(view.TemplateFilterInput), args["in"].(view.TemplateUpdateInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["filter"].(view.UserFilterInput), args["in"].(view.UserUpdateInput)), true

	case "Mutation.updateUserPassword":
		if e.complexity.Mutation.UpdateUserPassword == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPassword(childComplexity, args["in"].(view.UserUpdatePasswordInput)), true

	case "Mutation.updateUserRole":
		if e.complexity.Mutation.UpdateUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserRole(childComplexity, args["filter"].(view.UserRoleFilterInput), args["in"].(view.UserRoleUpdateInput)), true

	case "Mutation.updateUserTag":
		if e.complexity.Mutation.UpdateUserTag == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserTag(childComplexity, args["filter"].(view.UserTagFilterInput), args["in"].(view.UserTagUpdateInput)), true

	case "Mutation.updateUserWhitelist":
		if e.complexity.Mutation.UpdateUserWhitelist == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserWhitelist(childComplexity, args["filter"].(view.UserWhitelistFilterInput), args["in"].(view.UserWhitelistUpdateInput)), true

	case "Mutation.updateVipLevel":
		if e.complexity.Mutation.UpdateVipLevel == nil {
			break
		}

		args, err := ec.field_Mutation_updateVipLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVipLevel(childComplexity, args["filter"].(view.VipLevelFilterInput), args["in"].(view.VipLevelUpdateInput)), true

	case "Query.getEmailConfig":
		if e.complexity.Query.GetEmailConfig == nil {
			break
		}

		return e.complexity.Query.GetEmailConfig(childComplexity), true

	case "Query.getHostsDeny":
		if e.complexity.Query.GetHostsDeny == nil {
			break
		}

		args, err := ec.field_Query_getHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHostsDeny(childComplexity, args["filter"].(view.HostsDenyFilterInput)), true

	case "Query.getRole":
		if e.complexity.Query.GetRole == nil {
			break
		}

		args, err := ec.field_Query_getRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRole(childComplexity, args["filter"].(view.RoleFilterInput)), true

	case "Query.getSmsConfig":
		if e.complexity.Query.GetSmsConfig == nil {
			break
		}

		return e.complexity.Query.GetSmsConfig(childComplexity), true

	case "Query.getTag":
		if e.complexity.Query.GetTag == nil {
			break
		}

		args, err := ec.field_Query_getTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTag(childComplexity, args["filter"].(view.TagFilterInput)), true

	case "Query.getUser":
		if e.complexity.Query.GetUser == nil {
			break
		}

		args, err := ec.field_Query_getUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUser(childComplexity, args["filter"].(view.UserFilterInput)), true

	case "Query.getUserRole":
		if e.complexity.Query.GetUserRole == nil {
			break
		}

		args, err := ec.field_Query_getUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserRole(childComplexity, args["filter"].(view.UserRoleFilterInput)), true

	case "Query.getUserTag":
		if e.complexity.Query.GetUserTag == nil {
			break
		}

		args, err := ec.field_Query_getUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserTag(childComplexity, args["filter"].(view.UserTagFilterInput)), true

	case "Query.getUserWhitelist":
		if e.complexity.Query.GetUserWhitelist == nil {
			break
		}

		args, err := ec.field_Query_getUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserWhitelist(childComplexity, args["filter"].(view.UserWhitelistFilterInput)), true

	case "Query.listAuditLog":
		if e.complexity.Query.ListAuditLog == nil {
			break
		}

		args, err := ec.field_Query_listAuditLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListAuditLog(childComplexity, args["filter"].(view.AuditLogFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listEmailRecord":
		if e.complexity.Query.ListEmailRecord == nil {
			break
		}

		args, err := ec.field_Query_listEmailRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListEmailRecord(childComplexity, args["filter"].(view.EmailRecordFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listEvent":
		if e.complexity.Query.ListEvent == nil {
			break
		}

		args, err := ec.field_Query_listEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListEvent(childComplexity, args["filter"].(view.EventFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listGame":
		if e.complexity.Query.ListGame == nil {
			break
		}

		args, err := ec.field_Query_listGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListGame(childComplexity, args["filter"].(*view.GameFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listGamePlayer":
		if e.complexity.Query.ListGamePlayer == nil {
			break
		}

		args, err := ec.field_Query_listGamePlayer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListGamePlayer(childComplexity, args["filter"].(view.GamePlayerFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listGameTransferRecord":
		if e.complexity.Query.ListGameTransferRecord == nil {
			break
		}

		args, err := ec.field_Query_listGameTransferRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListGameTransferRecord(childComplexity, args["filter"].(view.GameTransferRecordFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listHistoryEvent":
		if e.complexity.Query.ListHistoryEvent == nil {
			break
		}

		args, err := ec.field_Query_listHistoryEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListHistoryEvent(childComplexity, args["filter"].(view.EventFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listHostsDeny":
		if e.complexity.Query.ListHostsDeny == nil {
			break
		}

		args, err := ec.field_Query_listHostsDeny_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListHostsDeny(childComplexity, args["filter"].(*view.HostsDenyFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listHubClients":
		if e.complexity.Query.ListHubClients == nil {
			break
		}

		return e.complexity.Query.ListHubClients(childComplexity), true

	case "Query.listLineRate":
		if e.complexity.Query.ListLineRate == nil {
			break
		}

		args, err := ec.field_Query_listLineRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListLineRate(childComplexity, args["filter"].(*view.LineRateFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listLineRateHistory":
		if e.complexity.Query.ListLineRateHistory == nil {
			break
		}

		args, err := ec.field_Query_listLineRateHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListLineRateHistory(childComplexity, args["filter"].(*view.LineRateHistoryFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listLineRent":
		if e.complexity.Query.ListLineRent == nil {
			break
		}

		args, err := ec.field_Query_listLineRent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListLineRent(childComplexity, args["filter"].(*view.LineRentFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listMenu":
		if e.complexity.Query.ListMenu == nil {
			break
		}

		return e.complexity.Query.ListMenu(childComplexity), true

	case "Query.listMerchant":
		if e.complexity.Query.ListMerchant == nil {
			break
		}

		args, err := ec.field_Query_listMerchant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMerchant(childComplexity, args["filter"].(*view.MerchantFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listMerchantBalanceLog":
		if e.complexity.Query.ListMerchantBalanceLog == nil {
			break
		}

		args, err := ec.field_Query_listMerchantBalanceLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMerchantBalanceLog(childComplexity, args["filter"].(*view.MerchantBalanceLogFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listMerchantDepositLog":
		if e.complexity.Query.ListMerchantDepositLog == nil {
			break
		}

		args, err := ec.field_Query_listMerchantDepositLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMerchantDepositLog(childComplexity, args["filter"].(*view.MerchantDepositLogFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listMerchantDepositMethod":
		if e.complexity.Query.ListMerchantDepositMethod == nil {
			break
		}

		args, err := ec.field_Query_listMerchantDepositMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMerchantDepositMethod(childComplexity, args["filter"].(*view.MerchantDepositMethodFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listMerchantFeeMode":
		if e.complexity.Query.ListMerchantFeeMode == nil {
			break
		}

		args, err := ec.field_Query_listMerchantFeeMode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMerchantFeeMode(childComplexity, args["filter"].(*view.MerchantFeeModeFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listMerchantLine":
		if e.complexity.Query.ListMerchantLine == nil {
			break
		}

		args, err := ec.field_Query_listMerchantLine_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMerchantLine(childComplexity, args["filter"].(*view.MerchantLineFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listMerchantLoginHistory":
		if e.complexity.Query.ListMerchantLoginHistory == nil {
			break
		}

		args, err := ec.field_Query_listMerchantLoginHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMerchantLoginHistory(childComplexity, args["filter"].(*view.MerchantLoginHistoryFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listMerchantWithdrawLog":
		if e.complexity.Query.ListMerchantWithdrawLog == nil {
			break
		}

		args, err := ec.field_Query_listMerchantWithdrawLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMerchantWithdrawLog(childComplexity, args["filter"].(*view.MerchantWithdrawLogFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listMerchantWithdrawMethod":
		if e.complexity.Query.ListMerchantWithdrawMethod == nil {
			break
		}

		args, err := ec.field_Query_listMerchantWithdrawMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMerchantWithdrawMethod(childComplexity, args["filter"].(*view.MerchantWithdrawMethodFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listRole":
		if e.complexity.Query.ListRole == nil {
			break
		}

		args, err := ec.field_Query_listRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListRole(childComplexity, args["filter"].(view.RoleFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listSecurityEvent":
		if e.complexity.Query.ListSecurityEvent == nil {
			break
		}

		args, err := ec.field_Query_listSecurityEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListSecurityEvent(childComplexity, args["filter"].(view.SecurityEventFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listSmsRecord":
		if e.complexity.Query.ListSmsRecord == nil {
			break
		}

		args, err := ec.field_Query_listSmsRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListSmsRecord(childComplexity, args["filter"].(view.SmsRecordFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listSystemLine":
		if e.complexity.Query.ListSystemLine == nil {
			break
		}

		args, err := ec.field_Query_listSystemLine_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListSystemLine(childComplexity, args["filter"].(*view.SystemLineFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listTag":
		if e.complexity.Query.ListTag == nil {
			break
		}

		args, err := ec.field_Query_listTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListTag(childComplexity, args["filter"].(view.TagFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listTemplate":
		if e.complexity.Query.ListTemplate == nil {
			break
		}

		args, err := ec.field_Query_listTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListTemplate(childComplexity, args["filter"].(view.TemplateFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUser":
		if e.complexity.Query.ListUser == nil {
			break
		}

		args, err := ec.field_Query_listUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUser(childComplexity, args["filter"].(view.UserFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUserLoginHistory":
		if e.complexity.Query.ListUserLoginHistory == nil {
			break
		}

		args, err := ec.field_Query_listUserLoginHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUserLoginHistory(childComplexity, args["filter"].(view.UserLoginHistoryFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUserRole":
		if e.complexity.Query.ListUserRole == nil {
			break
		}

		args, err := ec.field_Query_listUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUserRole(childComplexity, args["filter"].(view.UserRoleFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUserTag":
		if e.complexity.Query.ListUserTag == nil {
			break
		}

		args, err := ec.field_Query_listUserTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUserTag(childComplexity, args["filter"].(view.UserTagFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listUserWhitelist":
		if e.complexity.Query.ListUserWhitelist == nil {
			break
		}

		args, err := ec.field_Query_listUserWhitelist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUserWhitelist(childComplexity, args["filter"].(view.UserWhitelistFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listVipClaimLog":
		if e.complexity.Query.ListVipClaimLog == nil {
			break
		}

		args, err := ec.field_Query_listVipClaimLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListVipClaimLog(childComplexity, args["filter"].(view.VipClaimLogFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listVipLevel":
		if e.complexity.Query.ListVipLevel == nil {
			break
		}

		args, err := ec.field_Query_listVipLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListVipLevel(childComplexity, args["filter"].(view.VipLevelFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.listVipUpgradeLog":
		if e.complexity.Query.ListVipUpgradeLog == nil {
			break
		}

		args, err := ec.field_Query_listVipUpgradeLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListVipUpgradeLog(childComplexity, args["filter"].(view.VipUpgradeLogFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Query.Me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.userDepositInfo":
		if e.complexity.Query.UserDepositInfo == nil {
			break
		}

		args, err := ec.field_Query_userDepositInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserDepositInfo(childComplexity, args["filter"].(view.UserFilterInput)), true

	case "Query.userScore":
		if e.complexity.Query.UserScore == nil {
			break
		}

		args, err := ec.field_Query_userScore_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserScore(childComplexity, args["filter"].(view.UserFilterInput)), true

	case "Query.userWithdrawInfo":
		if e.complexity.Query.UserWithdrawInfo == nil {
			break
		}

		args, err := ec.field_Query_userWithdrawInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserWithdrawInfo(childComplexity, args["filter"].(view.UserFilterInput)), true

	case "Qyery.listAgent":
		if e.complexity.Qyery.ListAgent == nil {
			break
		}

		args, err := ec.field_Qyery_listAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Qyery.ListAgent(childComplexity, args["filter"].(*view.AgentFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "Qyery.listGeneralAgent":
		if e.complexity.Qyery.ListGeneralAgent == nil {
			break
		}

		args, err := ec.field_Qyery_listGeneralAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Qyery.ListGeneralAgent(childComplexity, args["filter"].(*view.GeneralAgentFilterInput), args["pagination"].(*view.PaginationInput)), true

	case "RefreshTokenResp.expires":
		if e.complexity.RefreshTokenResp.Expires == nil {
			break
		}

		return e.complexity.RefreshTokenResp.Expires(childComplexity), true

	case "RefreshTokenResp.token":
		if e.complexity.RefreshTokenResp.Token == nil {
			break
		}

		return e.complexity.RefreshTokenResp.Token(childComplexity), true

	case "Role.authority":
		if e.complexity.Role.Authority == nil {
			break
		}

		return e.complexity.Role.Authority(childComplexity), true

	case "Role.createUserID":
		if e.complexity.Role.CreateUserID == nil {
			break
		}

		return e.complexity.Role.CreateUserID(childComplexity), true

	case "Role.createdAt":
		if e.complexity.Role.CreatedAt == nil {
			break
		}

		return e.complexity.Role.CreatedAt(childComplexity), true

	case "Role.id":
		if e.complexity.Role.ID == nil {
			break
		}

		return e.complexity.Role.ID(childComplexity), true

	case "Role.name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "Role.supportAccountType":
		if e.complexity.Role.SupportAccountType == nil {
			break
		}

		return e.complexity.Role.SupportAccountType(childComplexity), true

	case "Role.updateUserID":
		if e.complexity.Role.UpdateUserID == nil {
			break
		}

		return e.complexity.Role.UpdateUserID(childComplexity), true

	case "Role.updatedAt":
		if e.complexity.Role.UpdatedAt == nil {
			break
		}

		return e.complexity.Role.UpdatedAt(childComplexity), true

	case "SecurityEvent.createUserID":
		if e.complexity.SecurityEvent.CreateUserID == nil {
			break
		}

		return e.complexity.SecurityEvent.CreateUserID(childComplexity), true

	case "SecurityEvent.createdAt":
		if e.complexity.SecurityEvent.CreatedAt == nil {
			break
		}

		return e.complexity.SecurityEvent.CreatedAt(childComplexity), true

	case "SecurityEvent.description":
		if e.complexity.SecurityEvent.Description == nil {
			break
		}

		return e.complexity.SecurityEvent.Description(childComplexity), true

	case "SecurityEvent.id":
		if e.complexity.SecurityEvent.ID == nil {
			break
		}

		return e.complexity.SecurityEvent.ID(childComplexity), true

	case "SecurityEvent.isEnable":
		if e.complexity.SecurityEvent.IsEnable == nil {
			break
		}

		return e.complexity.SecurityEvent.IsEnable(childComplexity), true

	case "SecurityEvent.name":
		if e.complexity.SecurityEvent.Name == nil {
			break
		}

		return e.complexity.SecurityEvent.Name(childComplexity), true

	case "SecurityEvent.updateUserID":
		if e.complexity.SecurityEvent.UpdateUserID == nil {
			break
		}

		return e.complexity.SecurityEvent.UpdateUserID(childComplexity), true

	case "SecurityEvent.updatedAt":
		if e.complexity.SecurityEvent.UpdatedAt == nil {
			break
		}

		return e.complexity.SecurityEvent.UpdatedAt(childComplexity), true

	case "SmsConfig.account":
		if e.complexity.SmsConfig.Account == nil {
			break
		}

		return e.complexity.SmsConfig.Account(childComplexity), true

	case "SmsConfig.url":
		if e.complexity.SmsConfig.URL == nil {
			break
		}

		return e.complexity.SmsConfig.URL(childComplexity), true

	case "SmsRecord.account":
		if e.complexity.SmsRecord.Account == nil {
			break
		}

		return e.complexity.SmsRecord.Account(childComplexity), true

	case "SmsRecord.content":
		if e.complexity.SmsRecord.Content == nil {
			break
		}

		return e.complexity.SmsRecord.Content(childComplexity), true

	case "SmsRecord.createUserID":
		if e.complexity.SmsRecord.CreateUserID == nil {
			break
		}

		return e.complexity.SmsRecord.CreateUserID(childComplexity), true

	case "SmsRecord.createdAt":
		if e.complexity.SmsRecord.CreatedAt == nil {
			break
		}

		return e.complexity.SmsRecord.CreatedAt(childComplexity), true

	case "SmsRecord.id":
		if e.complexity.SmsRecord.ID == nil {
			break
		}

		return e.complexity.SmsRecord.ID(childComplexity), true

	case "SmsRecord.phoneNumber":
		if e.complexity.SmsRecord.PhoneNumber == nil {
			break
		}

		return e.complexity.SmsRecord.PhoneNumber(childComplexity), true

	case "SmsRecord.sendTime":
		if e.complexity.SmsRecord.SendTime == nil {
			break
		}

		return e.complexity.SmsRecord.SendTime(childComplexity), true

	case "SmsRecord.url":
		if e.complexity.SmsRecord.URL == nil {
			break
		}

		return e.complexity.SmsRecord.URL(childComplexity), true

	case "Subscription.receiveMessage":
		if e.complexity.Subscription.ReceiveMessage == nil {
			break
		}

		args, err := ec.field_Subscription_receiveMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ReceiveMessage(childComplexity, args["userAuth"].(view.UserAuth)), true

	case "SystemLine.createdAt":
		if e.complexity.SystemLine.CreatedAt == nil {
			break
		}

		return e.complexity.SystemLine.CreatedAt(childComplexity), true

	case "SystemLine.description":
		if e.complexity.SystemLine.Description == nil {
			break
		}

		return e.complexity.SystemLine.Description(childComplexity), true

	case "SystemLine.id":
		if e.complexity.SystemLine.ID == nil {
			break
		}

		return e.complexity.SystemLine.ID(childComplexity), true

	case "SystemLine.name":
		if e.complexity.SystemLine.Name == nil {
			break
		}

		return e.complexity.SystemLine.Name(childComplexity), true

	case "SystemLine.updatedAt":
		if e.complexity.SystemLine.UpdatedAt == nil {
			break
		}

		return e.complexity.SystemLine.UpdatedAt(childComplexity), true

	case "Tag.createUserID":
		if e.complexity.Tag.CreateUserID == nil {
			break
		}

		return e.complexity.Tag.CreateUserID(childComplexity), true

	case "Tag.createdAt":
		if e.complexity.Tag.CreatedAt == nil {
			break
		}

		return e.complexity.Tag.CreatedAt(childComplexity), true

	case "Tag.id":
		if e.complexity.Tag.ID == nil {
			break
		}

		return e.complexity.Tag.ID(childComplexity), true

	case "Tag.isEnable":
		if e.complexity.Tag.IsEnable == nil {
			break
		}

		return e.complexity.Tag.IsEnable(childComplexity), true

	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "Tag.RGBHex":
		if e.complexity.Tag.RGBHex == nil {
			break
		}

		return e.complexity.Tag.RGBHex(childComplexity), true

	case "Tag.updateUserID":
		if e.complexity.Tag.UpdateUserID == nil {
			break
		}

		return e.complexity.Tag.UpdateUserID(childComplexity), true

	case "Tag.updatedAt":
		if e.complexity.Tag.UpdatedAt == nil {
			break
		}

		return e.complexity.Tag.UpdatedAt(childComplexity), true

	case "Template.content":
		if e.complexity.Template.Content == nil {
			break
		}

		return e.complexity.Template.Content(childComplexity), true

	case "Template.createdAt":
		if e.complexity.Template.CreatedAt == nil {
			break
		}

		return e.complexity.Template.CreatedAt(childComplexity), true

	case "Template.id":
		if e.complexity.Template.ID == nil {
			break
		}

		return e.complexity.Template.ID(childComplexity), true

	case "Template.name":
		if e.complexity.Template.Name == nil {
			break
		}

		return e.complexity.Template.Name(childComplexity), true

	case "Template.updatedAt":
		if e.complexity.Template.UpdatedAt == nil {
			break
		}

		return e.complexity.Template.UpdatedAt(childComplexity), true

	case "User.accountType":
		if e.complexity.User.AccountType == nil {
			break
		}

		return e.complexity.User.AccountType(childComplexity), true

	case "User.aliasName":
		if e.complexity.User.AliasName == nil {
			break
		}

		return e.complexity.User.AliasName(childComplexity), true

	case "User.area":
		if e.complexity.User.Area == nil {
			break
		}

		return e.complexity.User.Area(childComplexity), true

	case "User.avatarURL":
		if e.complexity.User.AvatarURL == nil {
			break
		}

		return e.complexity.User.AvatarURL(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isDelete":
		if e.complexity.User.IsDelete == nil {
			break
		}

		return e.complexity.User.IsDelete(childComplexity), true

	case "User.lastLoginAt":
		if e.complexity.User.LastLoginAt == nil {
			break
		}

		return e.complexity.User.LastLoginAt(childComplexity), true

	case "User.lastLoginIP":
		if e.complexity.User.LastLoginIP == nil {
			break
		}

		return e.complexity.User.LastLoginIP(childComplexity), true

	case "User.notes":
		if e.complexity.User.Notes == nil {
			break
		}

		return e.complexity.User.Notes(childComplexity), true

	case "User.roles":
		if e.complexity.User.Roles == nil {
			break
		}

		return e.complexity.User.Roles(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.tags":
		if e.complexity.User.Tags == nil {
			break
		}

		return e.complexity.User.Tags(childComplexity), true

	case "User.updateUserID":
		if e.complexity.User.UpdateUserID == nil {
			break
		}

		return e.complexity.User.UpdateUserID(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "User.whitelists":
		if e.complexity.User.Whitelists == nil {
			break
		}

		return e.complexity.User.Whitelists(childComplexity), true

	case "UserDepositInfo.bankAccount":
		if e.complexity.UserDepositInfo.BankAccount == nil {
			break
		}

		return e.complexity.UserDepositInfo.BankAccount(childComplexity), true

	case "UserDepositInfo.bankAccountName":
		if e.complexity.UserDepositInfo.BankAccountName == nil {
			break
		}

		return e.complexity.UserDepositInfo.BankAccountName(childComplexity), true

	case "UserDepositInfo.bankBranch":
		if e.complexity.UserDepositInfo.BankBranch == nil {
			break
		}

		return e.complexity.UserDepositInfo.BankBranch(childComplexity), true

	case "UserDepositInfo.bankName":
		if e.complexity.UserDepositInfo.BankName == nil {
			break
		}

		return e.complexity.UserDepositInfo.BankName(childComplexity), true

	case "UserDepositInfo.createUserID":
		if e.complexity.UserDepositInfo.CreateUserID == nil {
			break
		}

		return e.complexity.UserDepositInfo.CreateUserID(childComplexity), true

	case "UserDepositInfo.createdAt":
		if e.complexity.UserDepositInfo.CreatedAt == nil {
			break
		}

		return e.complexity.UserDepositInfo.CreatedAt(childComplexity), true

	case "UserDepositInfo.id":
		if e.complexity.UserDepositInfo.ID == nil {
			break
		}

		return e.complexity.UserDepositInfo.ID(childComplexity), true

	case "UserDepositInfo.updateUserID":
		if e.complexity.UserDepositInfo.UpdateUserID == nil {
			break
		}

		return e.complexity.UserDepositInfo.UpdateUserID(childComplexity), true

	case "UserDepositInfo.updatedAt":
		if e.complexity.UserDepositInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.UserDepositInfo.UpdatedAt(childComplexity), true

	case "UserDepositInfo.userID":
		if e.complexity.UserDepositInfo.UserID == nil {
			break
		}

		return e.complexity.UserDepositInfo.UserID(childComplexity), true

	case "UserLoginHistory.administrativeArea":
		if e.complexity.UserLoginHistory.AdministrativeArea == nil {
			break
		}

		return e.complexity.UserLoginHistory.AdministrativeArea(childComplexity), true

	case "UserLoginHistory.country":
		if e.complexity.UserLoginHistory.Country == nil {
			break
		}

		return e.complexity.UserLoginHistory.Country(childComplexity), true

	case "UserLoginHistory.createdAt":
		if e.complexity.UserLoginHistory.CreatedAt == nil {
			break
		}

		return e.complexity.UserLoginHistory.CreatedAt(childComplexity), true

	case "UserLoginHistory.deviceOS":
		if e.complexity.UserLoginHistory.DeviceOs == nil {
			break
		}

		return e.complexity.UserLoginHistory.DeviceOs(childComplexity), true

	case "UserLoginHistory.id":
		if e.complexity.UserLoginHistory.ID == nil {
			break
		}

		return e.complexity.UserLoginHistory.ID(childComplexity), true

	case "UserLoginHistory.ipAddress":
		if e.complexity.UserLoginHistory.IPAddress == nil {
			break
		}

		return e.complexity.UserLoginHistory.IPAddress(childComplexity), true

	case "UserLoginHistory.userID":
		if e.complexity.UserLoginHistory.UserID == nil {
			break
		}

		return e.complexity.UserLoginHistory.UserID(childComplexity), true

	case "UserRole.createUserID":
		if e.complexity.UserRole.CreateUserID == nil {
			break
		}

		return e.complexity.UserRole.CreateUserID(childComplexity), true

	case "UserRole.createdAt":
		if e.complexity.UserRole.CreatedAt == nil {
			break
		}

		return e.complexity.UserRole.CreatedAt(childComplexity), true

	case "UserRole.id":
		if e.complexity.UserRole.ID == nil {
			break
		}

		return e.complexity.UserRole.ID(childComplexity), true

	case "UserRole.isAdmin":
		if e.complexity.UserRole.IsAdmin == nil {
			break
		}

		return e.complexity.UserRole.IsAdmin(childComplexity), true

	case "UserRole.role":
		if e.complexity.UserRole.Role == nil {
			break
		}

		return e.complexity.UserRole.Role(childComplexity), true

	case "UserRole.roleID":
		if e.complexity.UserRole.RoleID == nil {
			break
		}

		return e.complexity.UserRole.RoleID(childComplexity), true

	case "UserRole.updateUserID":
		if e.complexity.UserRole.UpdateUserID == nil {
			break
		}

		return e.complexity.UserRole.UpdateUserID(childComplexity), true

	case "UserRole.updatedAt":
		if e.complexity.UserRole.UpdatedAt == nil {
			break
		}

		return e.complexity.UserRole.UpdatedAt(childComplexity), true

	case "UserRole.userID":
		if e.complexity.UserRole.UserID == nil {
			break
		}

		return e.complexity.UserRole.UserID(childComplexity), true

	case "UserScore.createUserID":
		if e.complexity.UserScore.CreateUserID == nil {
			break
		}

		return e.complexity.UserScore.CreateUserID(childComplexity), true

	case "UserScore.createdAt":
		if e.complexity.UserScore.CreatedAt == nil {
			break
		}

		return e.complexity.UserScore.CreatedAt(childComplexity), true

	case "UserScore.id":
		if e.complexity.UserScore.ID == nil {
			break
		}

		return e.complexity.UserScore.ID(childComplexity), true

	case "UserScore.score":
		if e.complexity.UserScore.Score == nil {
			break
		}

		return e.complexity.UserScore.Score(childComplexity), true

	case "UserScore.updateUserID":
		if e.complexity.UserScore.UpdateUserID == nil {
			break
		}

		return e.complexity.UserScore.UpdateUserID(childComplexity), true

	case "UserScore.updatedAt":
		if e.complexity.UserScore.UpdatedAt == nil {
			break
		}

		return e.complexity.UserScore.UpdatedAt(childComplexity), true

	case "UserScore.userID":
		if e.complexity.UserScore.UserID == nil {
			break
		}

		return e.complexity.UserScore.UserID(childComplexity), true

	case "UserTag.createUserID":
		if e.complexity.UserTag.CreateUserID == nil {
			break
		}

		return e.complexity.UserTag.CreateUserID(childComplexity), true

	case "UserTag.createdAt":
		if e.complexity.UserTag.CreatedAt == nil {
			break
		}

		return e.complexity.UserTag.CreatedAt(childComplexity), true

	case "UserTag.id":
		if e.complexity.UserTag.ID == nil {
			break
		}

		return e.complexity.UserTag.ID(childComplexity), true

	case "UserTag.tag":
		if e.complexity.UserTag.Tag == nil {
			break
		}

		return e.complexity.UserTag.Tag(childComplexity), true

	case "UserTag.tagID":
		if e.complexity.UserTag.TagID == nil {
			break
		}

		return e.complexity.UserTag.TagID(childComplexity), true

	case "UserTag.updateUserID":
		if e.complexity.UserTag.UpdateUserID == nil {
			break
		}

		return e.complexity.UserTag.UpdateUserID(childComplexity), true

	case "UserTag.updatedAt":
		if e.complexity.UserTag.UpdatedAt == nil {
			break
		}

		return e.complexity.UserTag.UpdatedAt(childComplexity), true

	case "UserTag.userID":
		if e.complexity.UserTag.UserID == nil {
			break
		}

		return e.complexity.UserTag.UserID(childComplexity), true

	case "UserWhitelist.createdAt":
		if e.complexity.UserWhitelist.CreatedAt == nil {
			break
		}

		return e.complexity.UserWhitelist.CreatedAt(childComplexity), true

	case "UserWhitelist.id":
		if e.complexity.UserWhitelist.ID == nil {
			break
		}

		return e.complexity.UserWhitelist.ID(childComplexity), true

	case "UserWhitelist.ipAddress":
		if e.complexity.UserWhitelist.IPAddress == nil {
			break
		}

		return e.complexity.UserWhitelist.IPAddress(childComplexity), true

	case "UserWhitelist.userID":
		if e.complexity.UserWhitelist.UserID == nil {
			break
		}

		return e.complexity.UserWhitelist.UserID(childComplexity), true

	case "UserWithdrawInfo.bankAccount":
		if e.complexity.UserWithdrawInfo.BankAccount == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.BankAccount(childComplexity), true

	case "UserWithdrawInfo.bankAccountName":
		if e.complexity.UserWithdrawInfo.BankAccountName == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.BankAccountName(childComplexity), true

	case "UserWithdrawInfo.bankBranch":
		if e.complexity.UserWithdrawInfo.BankBranch == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.BankBranch(childComplexity), true

	case "UserWithdrawInfo.bankName":
		if e.complexity.UserWithdrawInfo.BankName == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.BankName(childComplexity), true

	case "UserWithdrawInfo.createUserID":
		if e.complexity.UserWithdrawInfo.CreateUserID == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.CreateUserID(childComplexity), true

	case "UserWithdrawInfo.createdAt":
		if e.complexity.UserWithdrawInfo.CreatedAt == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.CreatedAt(childComplexity), true

	case "UserWithdrawInfo.id":
		if e.complexity.UserWithdrawInfo.ID == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.ID(childComplexity), true

	case "UserWithdrawInfo.updateUserID":
		if e.complexity.UserWithdrawInfo.UpdateUserID == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.UpdateUserID(childComplexity), true

	case "UserWithdrawInfo.updatedAt":
		if e.complexity.UserWithdrawInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.UpdatedAt(childComplexity), true

	case "UserWithdrawInfo.userID":
		if e.complexity.UserWithdrawInfo.UserID == nil {
			break
		}

		return e.complexity.UserWithdrawInfo.UserID(childComplexity), true

	case "VipClaimLog.claimAt":
		if e.complexity.VipClaimLog.ClaimAt == nil {
			break
		}

		return e.complexity.VipClaimLog.ClaimAt(childComplexity), true

	case "VipClaimLog.createdAt":
		if e.complexity.VipClaimLog.CreatedAt == nil {
			break
		}

		return e.complexity.VipClaimLog.CreatedAt(childComplexity), true

	case "VipClaimLog.id":
		if e.complexity.VipClaimLog.ID == nil {
			break
		}

		return e.complexity.VipClaimLog.ID(childComplexity), true

	case "VipClaimLog.updatedAt":
		if e.complexity.VipClaimLog.UpdatedAt == nil {
			break
		}

		return e.complexity.VipClaimLog.UpdatedAt(childComplexity), true

	case "VipClaimLog.userID":
		if e.complexity.VipClaimLog.UserID == nil {
			break
		}

		return e.complexity.VipClaimLog.UserID(childComplexity), true

	case "VipClaimLog.vipLevelID":
		if e.complexity.VipClaimLog.VipLevelID == nil {
			break
		}

		return e.complexity.VipClaimLog.VipLevelID(childComplexity), true

	case "VipLevel.createdAt":
		if e.complexity.VipLevel.CreatedAt == nil {
			break
		}

		return e.complexity.VipLevel.CreatedAt(childComplexity), true

	case "VipLevel.description":
		if e.complexity.VipLevel.Description == nil {
			break
		}

		return e.complexity.VipLevel.Description(childComplexity), true

	case "VipLevel.id":
		if e.complexity.VipLevel.ID == nil {
			break
		}

		return e.complexity.VipLevel.ID(childComplexity), true

	case "VipLevel.icon":
		if e.complexity.VipLevel.Icon == nil {
			break
		}

		return e.complexity.VipLevel.Icon(childComplexity), true

	case "VipLevel.name":
		if e.complexity.VipLevel.Name == nil {
			break
		}

		return e.complexity.VipLevel.Name(childComplexity), true

	case "VipLevel.sort":
		if e.complexity.VipLevel.Sort == nil {
			break
		}

		return e.complexity.VipLevel.Sort(childComplexity), true

	case "VipLevel.updatedAt":
		if e.complexity.VipLevel.UpdatedAt == nil {
			break
		}

		return e.complexity.VipLevel.UpdatedAt(childComplexity), true

	case "VipUpgradeLog.createdAt":
		if e.complexity.VipUpgradeLog.CreatedAt == nil {
			break
		}

		return e.complexity.VipUpgradeLog.CreatedAt(childComplexity), true

	case "VipUpgradeLog.id":
		if e.complexity.VipUpgradeLog.ID == nil {
			break
		}

		return e.complexity.VipUpgradeLog.ID(childComplexity), true

	case "VipUpgradeLog.updatedAt":
		if e.complexity.VipUpgradeLog.UpdatedAt == nil {
			break
		}

		return e.complexity.VipUpgradeLog.UpdatedAt(childComplexity), true

	case "VipUpgradeLog.upgradeAt":
		if e.complexity.VipUpgradeLog.UpgradeAt == nil {
			break
		}

		return e.complexity.VipUpgradeLog.UpgradeAt(childComplexity), true

	case "VipUpgradeLog.userID":
		if e.complexity.VipUpgradeLog.UserID == nil {
			break
		}

		return e.complexity.VipUpgradeLog.UserID(childComplexity), true

	case "VipUpgradeLog.vipLevelID":
		if e.complexity.VipUpgradeLog.VipLevelID == nil {
			break
		}

		return e.complexity.VipUpgradeLog.VipLevelID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAgentCreateInput,
		ec.unmarshalInputAgentFilterInput,
		ec.unmarshalInputAgentInput,
		ec.unmarshalInputAgentUpdateInput,
		ec.unmarshalInputAuditLogFilterInput,
		ec.unmarshalInputAuditLogInput,
		ec.unmarshalInputBaseFilterInput,
		ec.unmarshalInputClaimVipRewardInput,
		ec.unmarshalInputCreateCommonUserReqInput,
		ec.unmarshalInputCreateUploadURLInput,
		ec.unmarshalInputCreateUserReqInput,
		ec.unmarshalInputEmailConfigInput,
		ec.unmarshalInputEmailRecordFilterInput,
		ec.unmarshalInputEmailRecordInput,
		ec.unmarshalInputEventCreateInput,
		ec.unmarshalInputEventFilterInput,
		ec.unmarshalInputEventInput,
		ec.unmarshalInputEventUpdateInput,
		ec.unmarshalInputFileInfoInput,
		ec.unmarshalInputGameCreateInput,
		ec.unmarshalInputGameFilterInput,
		ec.unmarshalInputGameInput,
		ec.unmarshalInputGamePlayerFilterInput,
		ec.unmarshalInputGamePlayerInput,
		ec.unmarshalInputGameTransferRecordFilterInput,
		ec.unmarshalInputGameTransferRecordInput,
		ec.unmarshalInputGameUpdateInput,
		ec.unmarshalInputGeneralAgentCreateInput,
		ec.unmarshalInputGeneralAgentFilterInput,
		ec.unmarshalInputGeneralAgentInput,
		ec.unmarshalInputGeneralAgentUpdateInput,
		ec.unmarshalInputHostsDenyCreateInput,
		ec.unmarshalInputHostsDenyFilterInput,
		ec.unmarshalInputHostsDenyInput,
		ec.unmarshalInputHostsDenyUpdateInput,
		ec.unmarshalInputLineRateCreateInput,
		ec.unmarshalInputLineRateFilterInput,
		ec.unmarshalInputLineRateHistoryFilterInput,
		ec.unmarshalInputLineRateHistoryInput,
		ec.unmarshalInputLineRateInput,
		ec.unmarshalInputLineRateUpdateInput,
		ec.unmarshalInputLineRentCreateInput,
		ec.unmarshalInputLineRentFilterInput,
		ec.unmarshalInputLineRentInput,
		ec.unmarshalInputLineRentUpdateInput,
		ec.unmarshalInputLoginReqInput,
		ec.unmarshalInputMenuInput,
		ec.unmarshalInputMerchantBalanceApplyInput,
		ec.unmarshalInputMerchantBalanceAuditInput,
		ec.unmarshalInputMerchantBalanceFilterInput,
		ec.unmarshalInputMerchantBalanceInput,
		ec.unmarshalInputMerchantBalanceLogFilterInput,
		ec.unmarshalInputMerchantBalanceLogInput,
		ec.unmarshalInputMerchantCreateInput,
		ec.unmarshalInputMerchantDepositLogFilterInput,
		ec.unmarshalInputMerchantDepositLogInput,
		ec.unmarshalInputMerchantDepositMethodCreateInput,
		ec.unmarshalInputMerchantDepositMethodFilterInput,
		ec.unmarshalInputMerchantDepositMethodInput,
		ec.unmarshalInputMerchantDepositMethodUpdateInput,
		ec.unmarshalInputMerchantFeeModeCreateInput,
		ec.unmarshalInputMerchantFeeModeFilterInput,
		ec.unmarshalInputMerchantFeeModeInput,
		ec.unmarshalInputMerchantFeeModeUpdateInput,
		ec.unmarshalInputMerchantFilterInput,
		ec.unmarshalInputMerchantInput,
		ec.unmarshalInputMerchantLineCreateInput,
		ec.unmarshalInputMerchantLineFilterInput,
		ec.unmarshalInputMerchantLineInput,
		ec.unmarshalInputMerchantLineUpdateInput,
		ec.unmarshalInputMerchantLoginHistoryFilterInput,
		ec.unmarshalInputMerchantLoginHistoryInput,
		ec.unmarshalInputMerchantUpdateInput,
		ec.unmarshalInputMerchantWithdrawLogFilterInput,
		ec.unmarshalInputMerchantWithdrawLogInput,
		ec.unmarshalInputMerchantWithdrawMethodCreateInput,
		ec.unmarshalInputMerchantWithdrawMethodFilterInput,
		ec.unmarshalInputMerchantWithdrawMethodInput,
		ec.unmarshalInputMerchantWithdrawMethodUpdateInput,
		ec.unmarshalInputPaginationInput,
		ec.unmarshalInputRegisterReqInput,
		ec.unmarshalInputRoleCreateInput,
		ec.unmarshalInputRoleFilterInput,
		ec.unmarshalInputRoleInput,
		ec.unmarshalInputRoleUpdateInput,
		ec.unmarshalInputSecurityEventCreateInput,
		ec.unmarshalInputSecurityEventFilterInput,
		ec.unmarshalInputSecurityEventInput,
		ec.unmarshalInputSecurityEventUpdateInput,
		ec.unmarshalInputSmsConfigInput,
		ec.unmarshalInputSmsRecordFilterInput,
		ec.unmarshalInputSmsRecordInput,
		ec.unmarshalInputSystemLineCreateInput,
		ec.unmarshalInputSystemLineFilterInput,
		ec.unmarshalInputSystemLineInput,
		ec.unmarshalInputSystemLineUpdateInput,
		ec.unmarshalInputTagCreateInput,
		ec.unmarshalInputTagFilterInput,
		ec.unmarshalInputTagInput,
		ec.unmarshalInputTagUpdateInput,
		ec.unmarshalInputTemplateCreateInput,
		ec.unmarshalInputTemplateFilterInput,
		ec.unmarshalInputTemplateInput,
		ec.unmarshalInputTemplateUpdateInput,
		ec.unmarshalInputUserAuth,
		ec.unmarshalInputUserFilterInput,
		ec.unmarshalInputUserInput,
		ec.unmarshalInputUserLoginHistoryFilterInput,
		ec.unmarshalInputUserLoginHistoryInput,
		ec.unmarshalInputUserRoleCreateInput,
		ec.unmarshalInputUserRoleFilterInput,
		ec.unmarshalInputUserRoleInput,
		ec.unmarshalInputUserRoleUpdateInput,
		ec.unmarshalInputUserTagCreateInput,
		ec.unmarshalInputUserTagFilterInput,
		ec.unmarshalInputUserTagInput,
		ec.unmarshalInputUserTagUpdateInput,
		ec.unmarshalInputUserUpdateInput,
		ec.unmarshalInputUserUpdatePasswordInput,
		ec.unmarshalInputUserWhitelistCreateInput,
		ec.unmarshalInputUserWhitelistFilterInput,
		ec.unmarshalInputUserWhitelistInput,
		ec.unmarshalInputUserWhitelistUpdateInput,
		ec.unmarshalInputVipClaimLogFilterInput,
		ec.unmarshalInputVipClaimLogInput,
		ec.unmarshalInputVipLevelCreateInput,
		ec.unmarshalInputVipLevelFilterInput,
		ec.unmarshalInputVipLevelInput,
		ec.unmarshalInputVipLevelUpdateInput,
		ec.unmarshalInputVipUpgradeLogFilterInput,
		ec.unmarshalInputVipUpgradeLogInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../../docs/graphql/schema/agent.graphql", Input: `# 代理
type ListAgentResp {
    agents: [Agent!]!
    meta: Meta!
}

type Agent {
    """代理ID"""
    id: Uint64!
    """代理名稱"""
    name: String!
    """代理帳號"""
    account: String!
}


# 全民代理
type ListGeneralAgentResp {
    generalAgents: [GeneralAgent!]!
    meta: Meta!
}


type GeneralAgent {
    """全民代理ID"""
    id: Uint64!
    """全民代理名稱"""
    name: String!
    """全民代理帳號"""
    account: String!
}

`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/agent_input.graphql", Input: `# 代理
input AgentFilterInput {
    agent: AgentInput
    baseFilter: BaseFilterInput
}

input AgentInput {
    id: Uint64
    """代理名稱"""
    name: String
}

input AgentCreateInput {
    """代理名稱"""
    name: String!
    """代理帳號"""
    account: String!
    """代理密碼"""
    password: String!
    """代理備註"""
    remark: String
}

input AgentUpdateInput {
    """代理名稱"""
    name: String
    """代理帳號"""
    account: String
    """代理密碼"""
    password: String
    """代理備註"""
    remark: String
}


# 全民代理
input GeneralAgentFilterInput {
    generalAgent: GeneralAgentInput
    baseFilter: BaseFilterInput
}

input GeneralAgentInput {
    id: Uint64
    """全民代理名稱"""
    name: String
}

input GeneralAgentCreateInput {
    """全民代理名稱"""
    name: String!
    """全民代理帳號"""
    account: String!
    """全民代理密碼"""
    password: String!
    """全民代理備註"""
    remark: String
}

input GeneralAgentUpdateInput {
    """全民代理名稱"""
    name: String
    """全民代理帳號"""
    account: String
    """全民代理密碼"""
    password: String
    """全民代理備註"""
    remark: String
}
`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/auth.graphql", Input: `type LoginResp {
	token: String!
	deviceUID: String!
	userAgent: String!
}

type Claims {
	"""
	id
	"""
	id: Uint64!
	"""
	帳號類型
	"""
	accountType: AccountType!
	"""
	狀態
	"""
	status: UserStatus!
	"""
	用户名
	"""
	username: String!
	"""
	別名（聊天室顯示用）
	"""
	aliasName: String!
	"""
	頭像鏈結
	"""
	avatarURL: String!
	whitelists: [UserWhitelist!]!
	menu: [Menu!]!
}

type CreateCommonUserResp {
	user: User!   
}

type RefreshTokenResp {
	token: String!
	expires: Timestamp! 
}

`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/auth_input.graphql", Input: `input UserAuth {
	token: String!
	deviceUID: String!
}

input CreateCommonUserReqInput {
	username: String!
	password: String!
	accountType: AccountType!
}

input LoginReqInput {
	username: String!
	password: String!
}

input RegisterReqInput {
	username: String!
	password: String!
}
`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/base.graphql", Input: `scalar Timestamp

scalar Map

scalar Upload

scalar Any


type Common {
	creatorID: Uint64
	creatorName: String
	createdAt: Timestamp
	updaterID: Uint64
	updaterName: String
	updatedAt: Timestamp
}

type ListMetadata {
	count: Uint64
}

input BaseFilterInput {
	IDs: [Uint64!]
	searchIn: String
	keyword: String
	createdAtLT: Uint64
	createdAtLTE: Uint64
	createdAtGT: Uint64
	createdAtGTE: Uint64
	sortField: String
	sortType: SortType
	rangeField: String
	rangeType: RangeType
	lessThan: Int64
	lessThanEqual: Int64
	greaterThan: Int64
	greaterThanEqual: Int64
}

input PaginationInput {
	page: Uint64
	perPage: Uint64
	offsetType: OffsetType
	offsetID: Uint64
	limit: Uint64
}

enum SortType {
	Unknown
	ASC
	DESC
}

enum OffsetType {
	Unknown
	Old
	New
}

type File implements Data {
	id: Uint64!
	name: String!
	content: String!
	contentType: String!
}

enum YesNo {
	Unknown
	Yes
	No
}

enum RangeType {
	ByDateTime
	ByNumber
}

enum Position {
	Top
	Bottom
	Left
	Right
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/common.graphql", Input: `type Query

type Mutation

type Subscription

scalar Uint64

scalar Int64

scalar Decimal

interface Data {
	id: Uint64!
}

type Meta {
	total: Uint64!
	page: Uint64
	perPage: Uint64
	totalPage: Uint64
}

type DataList {
	data: [Data]!
	meta: Meta!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/event.graphql", Input: `type Event {
    """活動ID"""
    id: Uint64!
    """活動名稱"""
    name: String!
    """活動描述"""
    description: String!
    # """活動類型"""
    # type: EventType!
    # """活動狀態"""
    # status: EventStatus!
    """活動開始時間"""
    startTime: Timestamp!
    """活動結束時間"""
    endTime: Timestamp!
    """活動備註"""
    remark: String
}

type ListEventResp {
    events: [Event!]!
    meta: Meta!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/event_input.graphql", Input: `input EventFilterInput {
   event: EventInput
   baseFilter: BaseFilterInput
}

input EventInput {
    id: Uint64
    """活動名稱"""
    name: String
    # """活動類型"""
    # type: EventType
    # """活動狀態"""
    # status: EventStatus
    """活動開始時間"""
    startTime: Timestamp
    """活動結束時間"""
    endTime: Timestamp
}

input EventCreateInput {
    """活動名稱"""
    name: String!
    """活動描述"""
    description: String!
    # """活動類型"""
    # type: EventType!
    # """活動狀態"""
    # status: EventStatus!
    """活動開始時間"""
    startTime: Timestamp!
    """活動結束時間"""
    endTime: Timestamp!
    """活動備註"""
    remark: String
}

input EventUpdateInput {
    """活動名稱"""
    name: String
    """活動描述"""
    description: String
    # """活動類型"""
    # type: EventType
    # """活動狀態"""
    # status: EventStatus
    """活動開始時間"""
    startTime: Timestamp
    """活動結束時間"""
    endTime: Timestamp
    """活動備註"""
    remark: String
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/game.graphql", Input: `type ListGamePlayerResp {
    players: [GamePlayer!]!
    meta: Meta!
}

type GamePlayer {
    id: Uint64!
    username: String!
    nickname: String!
    balance: Decimal!
    # status: GamePlayerStatus!
    lastLoginTime: Timestamp!
    lastLogoutTime: Timestamp!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}

type ListGameTransferRecordResp {
    records: [GameTransferRecord!]!
    meta: Meta!
}

type GameTransferRecord {
    id: Uint64!
    gamePlayerId: Uint64!
    gameId: Uint64!
    gameName: String!
    # type: GameTransferType!
    # status: GameTransferStatus!
    amount: Decimal!
    remark: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/game_input.graphql", Input: `input GamePlayerFilterInput {
    """遊戲玩家"""
    gamePlayer: GamePlayerInput
    """基本過濾條件"""
    baseFilter: BaseFilterInput
}

input GamePlayerInput {
    id: Uint64
    """遊戲玩家名稱"""
    name: String
    """遊戲玩家帳號"""
    account: String
    """遊戲玩家備註"""
    remark: String
}

input GameTransferRecordFilterInput {
    """遊戲轉帳記錄"""
    gameTransferRecord: GameTransferRecordInput
    """基本過濾條件"""
    baseFilter: BaseFilterInput
}

input GameTransferRecordInput {
    id: Uint64
    """遊戲玩家ID"""
    gamePlayerId: Uint64
    """遊戲ID"""
    gameId: Uint64
    """遊戲名稱"""
    gameName: String
    # """遊戲轉帳類型"""
    # type: GameTransferType
    # """遊戲轉帳狀態"""
    # status: GameTransferStatus
    """遊戲轉帳金額"""
    amount: Decimal
    """遊戲轉帳備註"""
    remark: String
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/gameline.graphql", Input: `type ListSystemLineResp {
    """系統線路列表"""
    list: [SystemLine!]!
    """總數"""
    total: Uint64!
}

type SystemLine {
    """系統線路ID"""
    id: Uint64!
    """系統線路名稱"""
    name: String!
    # """系統線路狀態"""
    # status: SystemLineStatus!
    """系統線路描述"""
    description: String!
    """創建時間"""
    createdAt: Timestamp!
    """更新時間"""
    updatedAt: Timestamp!
}

type ListMerchantLineResp {
    """商戶線路列表"""
    list: [MerchantLine!]!
    """總數"""
    total: Uint64!
}

type MerchantLine {
    """商戶線路ID"""
    id: Uint64!
    """商戶線路名稱"""
    name: String!
    """商戶線路描述"""
    description: String!
    """創建時間"""
    createdAt: Timestamp!
    """更新時間"""
    updatedAt: Timestamp!
}

type ListLineRentResp {
    """線路租借列表"""
    list: [LineRent!]!
    """總數"""
    total: Uint64!
}

type LineRent {
    """線路租借ID"""
    id: Uint64!
    """線路租借名稱"""
    name: String!
    """線路租借描述"""
    description: String!
    """創建時間"""
    createdAt: Timestamp!
    """更新時間"""
    updatedAt: Timestamp!
}

type ListLineRateResp {
    """線路費率列表"""
    list: [LineRate!]!
    """總數"""
    total: Uint64!
}


type LineRate {
    """線路費率ID"""
    id: Uint64!
    """線路費率名稱"""
    name: String!
    """線路費率描述"""
    description: String!
    """線路費率"""
    rate: Decimal!
    """創建時間"""
    createdAt: Timestamp!
    """更新時間"""
    updatedAt: Timestamp!
}

type ListLineRateHistoryResp {
    """線路費率歷史列表"""
    list: [LineRateHistory!]!
    """總數"""
    total: Uint64!
}

type LineRateHistory {
    """線路費率歷史ID"""
    id: Uint64!
    """線路費率歷史名稱"""
    name: String!
    """線路費率歷史描述"""
    description: String!
     """線路費率"""
    rate: Decimal!
    """創建時間"""
    createdAt: Timestamp!
    """更新時間"""
    updatedAt: Timestamp!
}

type ListGameResp {
    """遊戲列表"""
    list: [Game!]!
    """總數"""
    total: Uint64!
}

type Game {
    """遊戲ID"""
    id: Uint64!
    """遊戲名稱"""
    name: String!
    """遊戲描述"""
    description: String!
    """創建時間"""
    createdAt: Timestamp!
    """更新時間"""
    updatedAt: Timestamp!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/gameline_input.graphql", Input: `# 系統線路
input SystemLineFilterInput {
    systemLine: SystemLineInput
    baseFilter: BaseFilterInput
}

input SystemLineInput {
    id: Uint64
    """系統線路名稱"""
    name: String
}

input SystemLineCreateInput {
    """系統線路名稱"""
    name: String!
    """系統線路描述"""
    description: String!
    # """系統線路狀態"""
    # status: SystemLineStatus!
    """系統線路備註"""
    remark: String
}

input SystemLineUpdateInput {
    """系統線路名稱"""
    name: String
    """系統線路描述"""
    description: String
    # """系統線路狀態"""
    # status: SystemLineStatus
    """系統線路備註"""
    remark: String
}


# 商戶線路
input MerchantLineFilterInput {
    merchantLine: MerchantLineInput
    baseFilter: BaseFilterInput
}

input MerchantLineInput {
    id: Uint64
    """商戶線路名稱"""
    name: String
}

input MerchantLineCreateInput {
    """商戶線路名稱"""
    name: String!
    """商戶線路描述"""
    description: String!
    # """商戶線路狀態"""
    # status: MerchantLineStatus!
    """商戶線路備註"""
    remark: String
}

input MerchantLineUpdateInput {
    """商戶線路名稱"""
    name: String
    """商戶線路描述"""
    description: String
    # """商戶線路狀態"""
    # status: MerchantLineStatus
    """商戶線路備註"""
    remark: String
}

# 線路租借
input LineRentFilterInput {
    lineRent: LineRentInput
    baseFilter: BaseFilterInput
}

input LineRentInput {
    id: Uint64
    """線路租借名稱"""
    name: String
}

input LineRentCreateInput {
    """線路租借名稱"""
    name: String!
    """線路租借描述"""
    description: String!
    # """線路租借狀態"""
    # status: LineRentStatus!
    """線路租借備註"""
    remark: String
}

input LineRentUpdateInput {
    """線路租借名稱"""
    name: String
    """線路租借描述"""
    description: String
    # """線路租借狀態"""
    # status: LineRentStatus
    """線路租借備註"""
    remark: String
}


# 線路費率
input LineRateFilterInput {
    lineRate: LineRateInput
    baseFilter: BaseFilterInput
}

input LineRateInput {
    id: Uint64
    """線路費率名稱"""
    name: String
}

input LineRateCreateInput {
    """線路費率名稱"""
    name: String!
    """線路費率描述"""
    description: String!
    # """線路費率狀態"""
    # status: LineRateStatus!
    """線路費率備註"""
    remark: String
}

input LineRateUpdateInput {
    """線路費率名稱"""
    name: String
    """線路費率描述"""
    description: String
    # """線路費率狀態"""
    # status: LineRateStatus
    """線路費率備註"""
    remark: String
}

input LineRateHistoryFilterInput {
    lineRateHistory: LineRateHistoryInput
    baseFilter: BaseFilterInput
}

input LineRateHistoryInput {
    id: Uint64
    """線路費率ID"""
    lineRateId: Uint64
    """線路費率名稱"""
    name: String
}

# 遊戲線路
input GameFilterInput {
    game: GameInput
    baseFilter: BaseFilterInput
}

input GameInput {
    id: Uint64
    """遊戲名稱"""
    name: String
}

input GameCreateInput {
    """遊戲名稱"""
    name: String!
    """遊戲描述"""
    description: String!
    # """遊戲狀態"""
    # status: GameStatus!
    """遊戲備註"""
    remark: String
}

input GameUpdateInput {
    """遊戲名稱"""
    name: String
    """遊戲描述"""
    description: String
    # """遊戲狀態"""
    # status: GameStatus
    """遊戲備註"""
    remark: String
}
`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/hub.graphql", Input: `type HubClient {
	userID: Uint64!
	devices: [HubDevice!]!
}

type HubDevice {
	token: String!
	deviceUID: String!
	roomID: Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/menu.graphql", Input: `
type Menu {
	name: String!
	key: String!
	superKey: String!
	next: [Menu!]!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/menu_input.graphql", Input: `input MenuInput {
	key: String!
	next: [MenuInput!]!
}
`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/merchant.graphql", Input: `type ListMerchantResp {
    """商家列表"""
    list: [Merchant!]!
    """總數"""
    total: Uint64!
}

type Merchant {
    """商家ID"""
    id: Uint64!
    """商家名稱"""
    name: String!
    """商家描述"""
    description: String!
    """創建時間"""
    createdAt: Timestamp!
    """"更新時間"""
    updatedAt: Timestamp!
}

type ListMerchantWithdrawMethodResp {
    list: [MerchantWithdrawMethod!]!
    total: Uint64!
}

type MerchantWithdrawMethod {
    id: Uint64!
    name: String!
    description: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}

type ListMerchantDepositMethodResp {
    list: [MerchantDepositMethod!]!
    total: Uint64!
}

type MerchantDepositMethod {
    id: Uint64!
    name: String!
    description: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}

type ListMerchantFeeModeResp {
    list: [MerchantFeeMode!]!
    total: Uint64!
}

type MerchantFeeMode {
    id: Uint64!
    name: String!
    description: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}

type ListMerchantBalanceLogResp {
    list: [MerchantBalanceLog!]!
    total: Uint64!
}

type MerchantBalanceLog {
    id: Uint64!
    merchantId: Uint64!
    # type: MerchantBalanceLogType!
    amount: Decimal!
    description: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}

type ListMerchantWithdrawLogResp {
    list: [MerchantWithdrawLog!]!
    total: Uint64!
}

type MerchantWithdrawLog {
    id: Uint64!
    merchantId: Uint64!
    amount: Decimal!
    description: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}

type ListMerchantDepositLogResp {
    list: [MerchantDepositLog!]!
    total: Uint64!
}

type MerchantDepositLog {
    id: Uint64!
    merchantId: Uint64!
    amount: Decimal!
    description: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}

type ListMerchantLoginHistoryResp {
    list: [MerchantLoginHistory!]!
    total: Uint64!
}

type MerchantLoginHistory {
    id: Uint64!
    merchantId: Uint64!
    ip: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}

`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/merchant_input.graphql", Input: `input MerchantFilterInput {
    merchant: MerchantInput
    baseFilter: BaseFilterInput
}

input MerchantInput {
    id: Uint64
    """商戶名稱"""
    name: String
    # """商戶狀態"""
    # status: MerchantStatus
    """商戶備註"""
    remark: String
}

input MerchantWithdrawMethodFilterInput {
    merchantWithdrawMethod: MerchantWithdrawMethodInput
    baseFilter: BaseFilterInput
}

input MerchantWithdrawMethodInput {
    id: Uint64
    """商戶出款方式名稱"""
    name: String
    """商戶出款方式描述"""
    description: String
}

input MerchantDepositMethodFilterInput {
    merchantDepositMethod: MerchantDepositMethodInput
    baseFilter: BaseFilterInput
}

input MerchantDepositMethodInput {
    id: Uint64
    """商戶存款方式名稱"""
    name: String
    """商戶存款方式描述"""
    description: String
}

input MerchantFeeModeFilterInput {
    merchantFeeMode: MerchantFeeModeInput
    baseFilter: BaseFilterInput
}

input MerchantFeeModeInput {
    id: Uint64
    """商戶費率模式名稱"""
    name: String
    """商戶費率模式描述"""
    description: String
}

input MerchantBalanceLogFilterInput {
    merchantBalanceLog: MerchantBalanceLogInput
    baseFilter: BaseFilterInput
}

input MerchantBalanceLogInput {
    id: Uint64
    # """商戶餘額異動類型"""
    # type: MerchantBalanceLogType
    # """商戶餘額異動金額"""
    # amount: Decimal
    # """商戶餘額異動前餘額"""
    # beforeBalance: Decimal
    # """商戶餘額異動後餘額"""
    # afterBalance: Decimal
    # """商戶餘額異動描述"""
    # description: String
}


input MerchantWithdrawLogFilterInput {
    merchantWithdrawLog: MerchantWithdrawLogInput
    baseFilter: BaseFilterInput
}

input MerchantWithdrawLogInput {
    id: Uint64
}

input MerchantDepositLogFilterInput {
    merchantDepositLog: MerchantDepositLogInput
    baseFilter: BaseFilterInput
}

input MerchantDepositLogInput {
    id: Uint64
}

input MerchantLoginHistoryFilterInput {
    merchantLoginHistory: MerchantLoginHistoryInput
    baseFilter: BaseFilterInput
}

input MerchantLoginHistoryInput {
    id: Uint64
}

input MerchantCreateInput {
    """商戶名稱"""
    name: String!
    # """商戶狀態"""
    # status: MerchantStatus!
    """商戶備註"""
    remark: String
}


input MerchantUpdateInput {
    """商戶名稱"""
    name: String
    # """商戶狀態"""
    # status: MerchantStatus
    """商戶備註"""
    remark: String
}

input MerchantWithdrawMethodCreateInput {
    """商戶出款方式名稱"""
    name: String!
    """商戶出款方式描述"""
    description: String
}

input MerchantWithdrawMethodUpdateInput {
    """商戶出款方式名稱"""
    name: String
    """商戶出款方式描述"""
    description: String
}

input MerchantDepositMethodCreateInput {
    """商戶存款方式名稱"""
    name: String!
    """商戶存款方式描述"""
    description: String
}

input MerchantDepositMethodUpdateInput {
    """商戶存款方式名稱"""
    name: String
    """商戶存款方式描述"""
    description: String
}

input MerchantFeeModeCreateInput {
    """商戶費率模式名稱"""
    name: String!
    """商戶費率模式描述"""
    description: String
}

input MerchantFeeModeUpdateInput {
    """商戶費率模式名稱"""
    name: String
    """商戶費率模式描述"""
    description: String
}

input MerchantBalanceApplyInput {
    """商戶餘額異動金額"""
    amount: Decimal!
    """商戶餘額異動描述"""
    description: String
}

input MerchantBalanceFilterInput {
    merchantBalance: MerchantBalanceInput
    baseFilter: BaseFilterInput
}

input MerchantBalanceInput {
    id: Uint64
    # """商戶餘額異動類型"""
    # type: MerchantBalanceLogType
    # """商戶餘額異動金額"""
    # amount: Decimal
    # """商戶餘額異動前餘額"""
    # beforeBalance: Decimal
    # """商戶餘額異動後餘額"""
    # afterBalance: Decimal
    # """商戶餘額異動描述"""
    # description: String
}

input MerchantBalanceAuditInput {
    # """商戶餘額異動審核結果"""
    # result: MerchantBalanceAuditResult!
    """商戶餘額異動審核意見"""
    opinion: String
}
`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/role.graphql", Input: `type Role {
	id: Uint64!
	name: String!
	authority: [Menu!]!
	supportAccountType: AccountType!
	createdAt: Timestamp!
	createUserID: Uint64!
	updatedAt: Timestamp!
	updateUserID: Uint64!
}

type ListRoleResp {
	roles: [Role!]!
	meta: Meta!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/role_input.graphql", Input: `input RoleCreateInput {
	name: String!
	supportAccountType: AccountType!
	authority: [MenuInput!]!
}

input RoleInput {
	id: Uint64
	name: String
	supportAccountType: AccountType
}

input RoleUpdateInput {
	name: String
	supportAccountType: AccountType
	authority: [MenuInput!]
}

input RoleFilterInput {
	role: RoleInput
	baseFilter: BaseFilterInput
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/support.graphql", Input: `# 檔案
"""檔案資訊"""
type FileInfo {
	fileName: String!
	uploadURL: String!
}

type CreateUploadURLResp {
	files: [FileInfo]!
}

"""更多資訊類型"""
enum MoreInformationType {
	Unknown
	HTML
	URL
}

# 黑名單

"""黑名單列表"""
type ListHostsDenyResp {
	hostsDenys: [HostsDeny!]!
	meta: Meta!
}

"""黑名單系統"""
type HostsDeny {
	"""id"""
	id: Uint64!
	"""ip"""
	ipAddress: String!
	"""是否啟用"""
	isEnabled: YesNo!
	"""備註"""
	remark: String!
	"""建立時間"""
	createdAt: Timestamp!
	"""建立者"""
	createUserID: Uint64!
	"""更新時間"""
	updatedAt: Timestamp!
	"""更新者"""
	updateUserID: Uint64!
}


# 審計日誌
"""審計日誌查詢"""
type ListAuditLogResp {
	auditLogs: [AuditLog!]!
	meta: Meta!
}
"""審計日誌"""
type AuditLog {
	id: Uint64!
	userID: Uint64!
	method: String!
	requestInput: String!
	createdAt: Timestamp!
}

# 標籤
"""標籤列表"""
type ListTagResp {
	tags: [Tag!]!
	meta: Meta!
}

"""標籤"""
type Tag {
	"""id"""
	id: Uint64!
	name: String!
	"""色碼 # 000000 """
	RGBHex: String!
	"""是否啟用"""
	isEnable: YesNo!
	createdAt: Timestamp!
	updatedAt: Timestamp!
	createUserID: Uint64!
	updateUserID: Uint64!
}



"""模板列表"""
type ListTemplateResp {
	templates: [Template!]!
	meta: Meta!
}

"""模板"""
type Template {
	id: Uint64!
	"""模板名稱"""
	name: String!
	"""模板內容"""
	content: String!
	"""建立時間"""
	createdAt: Timestamp!
	"""更新時間"""
	updatedAt: Timestamp!
}

# 安全
"""安全設定列表"""
type ListSecurityEventResp {
	securityEvents: [SecurityEvent!]!
	meta: Meta!
}

"""安全設定"""
type SecurityEvent {
	"""id"""
	id: Uint64!
	"""事件名稱"""
	name: String!
	"""事件描述"""
	description: String!
	"""是否啟用"""
	isEnable: YesNo!
	"""建立時間"""
	createdAt: Timestamp!
	"""更新時間"""
	updatedAt: Timestamp!
	"""建立者"""
	createUserID: Uint64!
	"""更新者"""
	updateUserID: Uint64!
}

# config 
type SmsConfig {
	"""短信發送帳號"""
	account: String!
	"""短信發送網址"""
	url: String!
}

type EmailConfig {
	"""SMTP Server"""
	smtpServer: String!
	"""SMTP Port"""
	smtpPort: Int64!
	"""SMTP User"""
	smtpUser: String!
	"""SMTP From"""
	smtpFrom: String!
	"""SMTP From Name"""
	smtpFromName: String!
	"""SMTP SSL"""
	smtpSSL: YesNo!
}

type ListSmsRecordResp {
	smsRecords: [SmsRecord!]!
	meta: Meta!
}

type SmsRecord {
	"""id"""
	id: Uint64!
	"""短信收信電話"""
	phoneNumber: String!
	"""短信內容"""
	content: String!
	"""短信發送時間"""
	sendTime: Timestamp!
	# """短信發送狀態"""
	# status: SmsRecordStatus!
	"""短信發送帳號"""
	account: String!
	"""短信發送網址"""
	url: String!
	"""建立時間"""
	createdAt: Timestamp!
	"""建立者"""
	createUserID: Uint64!
}

type ListEmailRecordResp {
	emailRecords: [EmailRecord!]!
	meta: Meta!
}

type EmailRecord {
	"""id"""
	id: Uint64!
	"""Email收信地址"""
	email: String!
	"""Email主旨"""
	subject: String!
	"""Email內容"""
	content: String!
	"""Email發送時間"""
	sendTime: Timestamp!
	"""SMTP Server"""
	smtpServer: String!
	"""SMTP Port"""
	smtpPort: Int64!
	"""SMTP User"""
	smtpUser: String!
	"""SMTP From"""
	smtpFrom: String!
	"""SMTP From Name"""
	smtpFromName: String!
	"""SMTP SSL"""
	smtpSSL: YesNo!
	"""建立時間"""
	createdAt: Timestamp!
	"""建立者"""
	createUserID: Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/support_input.graphql", Input: `input CreateUploadURLInput {
	expireSec: Int64
	files: [FileInfoInput]!
}

input FileInfoInput {
	fileName: String!
	"""檔案大小"""
	size: Int64!
	"""檔案 MD5 The base64-encoded 128-bit MD5 digest"""
	md5: String!
}


# hosts_deny
input HostsDenyInput {
	"""id"""
	id: Uint64
	"""IP"""
	ipAddress: String
	"""是否啟用"""
	isEnabled: YesNo
}

input HostsDenyFilterInput {
	hostsDeny: HostsDenyInput
	baseFilter: BaseFilterInput
}


input HostsDenyCreateInput {
	"""IP"""
	ipAddress: String!
	"""是否啟用"""
	isEnabled: YesNo!
	"""備註"""
	remark: String
}

input HostsDenyUpdateInput {
	"""IP"""
	ipAddress: String
	"""是否啟用"""
	isEnabled: YesNo
	"""備註"""
	remark: String
}


# 審計日誌
input AuditLogFilterInput {
	auditLog: AuditLogInput
	baseFilter: BaseFilterInput
}

input AuditLogInput {
	id: Uint64
	userID: Uint64
	method: String
	requestInput: String
}

# 標籤
input TagCreateInput {
	name: String!
	"""色碼 # 000000 """
	RGBHex: String!
}

input TagInput {
	id: Uint64
	name: String
	isEnable: YesNo
}

input TagUpdateInput {
	name: String
	RGBHex: String
	isEnable: YesNo
}

input TagFilterInput {
	tag: TagInput
	baseFilter: BaseFilterInput
}

# 模板
input TemplateFilterInput {
	template: TemplateInput
	baseFilter: BaseFilterInput
}

input TemplateInput {
	id: Uint64
	name: String
}

input TemplateCreateInput {
	"""模板名稱"""
	name: String!
	"""模板內容"""
	content: String!
	# """模板類型"""
	# type: TemplateType!
	"""模板描述"""
	description: String
}

input TemplateUpdateInput {
	"""模板名稱"""
	name: String
	"""模板內容"""
	content: String
	# """模板類型"""
	# type: TemplateType
	"""模板描述"""
	description: String
}

# 安全事件
input SecurityEventFilterInput {
	securityEvent: SecurityEventInput
	baseFilter: BaseFilterInput
}

input SecurityEventInput {
	id: Uint64
	"""事件名稱"""
	name: String
}

input SecurityEventCreateInput {
	"""事件名稱"""
	name: String!
	"""事件描述"""
	description: String
}

input SecurityEventUpdateInput {
	"""事件名稱"""
	name: String
	"""事件描述"""
	description: String
}

# Config 管理
input SmsRecordFilterInput {
	smsRecord: SmsRecordInput
	baseFilter: BaseFilterInput
}

input SmsRecordInput {
	"""短信發送紀錄ID"""
	id: Uint64
	"""短信收信電話"""
	phoneNumber: String 
}

input EmailRecordFilterInput {
	emailRecord: EmailRecordInput
	baseFilter: BaseFilterInput
}

input EmailRecordInput {
	"""Email發送紀錄ID"""
	id: Uint64
	"""Email收信地址"""
	email: String
}

input SmsConfigInput {
	"""短信發送帳號"""
	account: String!
	"""短信發送密碼"""
	password: String!
	"""短信發送網址"""
	url: String!
}

input EmailConfigInput {
	"""SMTP Server"""
	smtpServer: String!
	"""SMTP Port"""
	smtpPort: Int64!
	"""SMTP User"""
	smtpUser: String!
	"""SMTP Password"""
	smtpPassword: String!
	"""SMTP From"""
	smtpFrom: String!
	"""SMTP From Name"""
	smtpFromName: String!
	"""SMTP SSL"""
	smtpSSL: YesNo!
}

`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/user.graphql", Input: `enum UserStatus {
	Unknown
	"""未驗證"""
	UnVerified
	"""啟用中"""
	Actived
	"""鎖定"""
	Locked
	"""停用中"""
	Disabled
	"""已刪除"""
	Deleted
}

enum AccountType {
	Unknown
	"""系統管理員"""
	Admin
	"""系統"""
	System
	"""管理員"""
	Manager
	"""客服"""
	CustomerService
	"""一般會員"""
	Member
	"""遊客"""
	Tourist
}

enum DeviceOS {
	Unknown
	"""IOS"""
	IOS
	"""Android"""
	Android
	"""Windows"""
	Windows
	"""Mac"""
	Mac
	"""其他"""
	Other
}


type User {
	"""id"""
	id: Uint64!
	"""帳號類型"""
	accountType: AccountType!
	"""狀態"""
	status: UserStatus!
	"""用户名"""
	username: String!
	"""別名（聊天室顯示用)"""
	aliasName: String!
	"""電子郵件"""
	email: String!
	"""居住地區"""
	area: String!
	"""備註"""
	notes: String!
	"""頭像鏈結"""
	avatarURL: String!
	"""最後登陸時間"""
	lastLoginAt: Timestamp!
	"""最後登陸的IP"""
	lastLoginIP: String!
	"""是否已刪除"""
	isDelete: YesNo!
	"""建立时间"""
	createdAt: Timestamp!
	"""更新時間"""
	updatedAt: Timestamp!
	"""更新人"""
	updateUserID: Uint64!
	roles: [UserRole!]!
	whitelists: [UserWhitelist!]!
	tags: [UserTag!]!
}


type UserRole {
	"""
	id
	"""
	id: Uint64!
	"""
	user id
	"""
	userID: Uint64!
	"""
	角色 id
	"""
	roleID: Uint64!
	"""
	是否為管理員
	"""
	isAdmin: YesNo!
	"""
	創建 user id
	"""
	createUserID: Uint64!
	"""
	更新 user id
	"""
	updateUserID: Uint64!
	"""
	建立时间
	"""
	createdAt: Timestamp!
	"""
	建立时间
	"""
	updatedAt: Timestamp!
	"""
	角色
	"""
	role: Role!
}

type UserWhitelist {
	"""
	id
	"""
	id: Uint64!
	"""
	user id
	"""
	userID: Uint64!
	"""
	ip 地址
	"""
	ipAddress: String!
	"""
	建立时间
	"""
	createdAt: Timestamp!
}

type UserTag {
	"""id"""
	id: Uint64!
	userID: Uint64!
	tagID: Uint64!
	createdAt: Timestamp!
	updatedAt: Timestamp!
	createUserID: Uint64!
	updateUserID: Uint64!
	tag: Tag!
}

type UserLoginHistory {
	id: Uint64!
	userID: Uint64!
	ipAddress: String!
	country: String!
	administrativeArea: String!
	deviceOS: DeviceOS!
	createdAt: Timestamp!
}

type UserWithdrawInfo {
	id: Uint64!
	userID: Uint64!
	bankName: String!
	bankBranch: String!
	bankAccount: String!
	bankAccountName: String!
	createdAt: Timestamp!
	updatedAt: Timestamp!
	createUserID: Uint64!
	updateUserID: Uint64!
}

type UserDepositInfo {
	id: Uint64!
	userID: Uint64!
	bankName: String!
	bankBranch: String!
	bankAccount: String!
	bankAccountName: String!
	createdAt: Timestamp!
	updatedAt: Timestamp!
	createUserID: Uint64!
	updateUserID: Uint64!
}


type UserScore {
	id: Uint64!
	userID: Uint64!
	score: Decimal!
	createdAt: Timestamp!
	updatedAt: Timestamp!
	createUserID: Uint64!
	updateUserID: Uint64!
}


type ListUserResp {
	users:  [User!]!
	meta: Meta!
}

type ListUserRoleResp {
	userRoles: [UserRole!]!
	meta: Meta!
}

type ListUserWhitelistResp {
	userWhitelists: [UserWhitelist!]!
	meta: Meta!
}

type ListUserTagResp {
	userTags: [UserTag!]!
	meta: Meta!
}

type ListUserLoginHistoryResp {
	userLoginHistories: [UserLoginHistory!]!
	meta: Meta
}

type CreateUserResp {
	user: User!   
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/user_input.graphql", Input: `input UserFilterInput {
	user: UserInput
	baseFilter: BaseFilterInput
	tagIDs: [Uint64!]
	roleIDs: [Uint64!]
}

input UserUpdateInput {
	"""狀態"""
	status: UserStatus
	"""別名（聊天室顯示用）"""
	aliasName: String 
	"""居住地區"""
	area: String
	"""備註"""
	notes: String
	"""頭像鏈結"""
	avatarContent: Upload
	"""帳戶類型 使用者 / 員工 / 客服"""
	accountType: AccountType
}

input UserWhitelistFilterInput {
	userWhitelist: UserWhitelistInput
	baseFilter: BaseFilterInput
}

input UserWhitelistUpdateInput {
	ipAddress: String
}

input UserRoleFilterInput {
	userRole: UserRoleInput
	baseFilter: BaseFilterInput
}

input UserRoleUpdateInput {
	roleID: Uint64
}

input UserTagFilterInput {
	userTag: UserTagInput
	baseFilter: BaseFilterInput
}

input UserTagUpdateInput {
	tagID: Uint64
}


input UserRoleCreateInput {
	"""
	user id
	"""
	userID: Uint64!
	"""
	角色 id
	"""
	roleID: Uint64!
	"""
	是否為管理員
	"""
	isAdmin: YesNo!
}

input UserInput {
	"""id"""
	id: Uint64
	"""帳號類型"""
	accountType: AccountType
	"""狀態"""
	status: UserStatus
	"""用户名"""
	username: String
	"""別名（聊天室顯示用）"""
	aliasName: String
	"""電子郵件"""
	email: String
	"""居住地區"""
	area: String
	"""備註"""
	notes: String
	"""頭像鏈結"""
	avatarURL: String
}

input UserRoleInput {
	"""
	id
	"""
	id: Uint64
	"""
	user id
	"""
	userID: Uint64
	"""
	ip 地址
	"""
	roleID: Uint64
	"""
	是否為管理員
	"""
	isAdmin: YesNo
}

input UserWhitelistInput {
	"""
	id
	"""
	id: Uint64
	"""
	user id
	"""
	userID: Uint64
	"""
	ip 地址
	"""
	ipAddress: String
}

input UserWhitelistCreateInput {
	userID: Uint64!
	ipAddress: String!
}

input UserTagInput {
	id: Uint64
	userID: Uint64
	tagID: Uint64
}

input UserTagCreateInput {
	userID: Uint64!
	tagID: Uint64!
}


input UserLoginHistoryInput {
	userID: Uint64
}

input UserLoginHistoryFilterInput {
	baseFilter: BaseFilterInput
	userLoginHistory: UserLoginHistoryInput
}



input CreateUserReqInput {
	username: String!
	password: String!
	accountType: AccountType!
	aliasName: String!
}


input UserUpdatePasswordInput {
	userID: Uint64!
	password: String!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/vip.graphql", Input: `type ListVipUpgradeLogResp {
    """升級日誌列表"""
    list: [VipUpgradeLog!]!
    """總數"""
    total: Uint64!
}

type VipUpgradeLog {
    """升級日誌ID"""
    id: Uint64!
    """用戶ID"""
    userID: Uint64!
    """VIP等級ID"""
    vipLevelID: Uint64!
    """升級時間"""
    upgradeAt: Timestamp!
    """創建時間"""
    createdAt: Timestamp!
    """更新時間"""
    updatedAt: Timestamp!
}

type ListVipClaimLogResp {
    """領取日誌列表"""
    list: [VipClaimLog!]!
    """總數"""
    total: Uint64!
}

type VipClaimLog {
    """領取日誌ID"""
    id: Uint64!
    """用戶ID"""
    userID: Uint64!
    """VIP等級ID"""
    vipLevelID: Uint64!
    """領取時間"""
    claimAt: Timestamp!
    """創建時間"""
    createdAt: Timestamp!
    """更新時間"""
    updatedAt: Timestamp!
}

type ListVipLevelResp {
    """VIP等級列表"""
    list: [VipLevel!]!
    """總數"""
    total: Uint64!
}

type VipLevel {
    """VIP等級ID"""
    id: Uint64!
    """VIP等級名稱"""
    name: String!
    """VIP等級描述"""
    description: String!
    """VIP等級圖標"""
    icon: String
    """VIP等級排序"""
    sort: Uint64
    # """VIP等級狀態"""
    # status: VipLevelStatus
    """創建時間"""
    createdAt: Timestamp!
    """更新時間"""
    updatedAt: Timestamp!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/vip_input.graphql", Input: `input VipUpgradeLogFilterInput {
    """升級日誌"""
    vipUpgradeLog: VipUpgradeLogInput
    baseFilter: BaseFilterInput
}

input VipUpgradeLogInput {
    id: Uint64
    """用戶ID"""
    userID: Uint64
    """升級前VIP等級"""
    vipLevelFrom: Uint64
    """升級後VIP等級"""
    vipLevelTo: Uint64
    """升級時間"""
    upgradeTime: Timestamp
}



input VipClaimLogFilterInput {
    """領取日誌"""
    vipClaimLog: VipClaimLogInput
    baseFilter: BaseFilterInput
}

input VipClaimLogInput {
    id: Uint64
    """用戶ID"""
    userID: Uint64
    """VIP等級"""
    vipLevel: Uint64
    """領取時間"""
    claimTime: Timestamp
}

input VipLevelCreateInput {
    """VIP等級"""
    level: Uint64!
    """VIP等級名稱"""
    name: String!
    """VIP等級描述"""
    description: String
    """VIP等級圖標"""
    icon: String
    """VIP等級排序"""
    sort: Uint64
    # """VIP等級狀態"""
    # status: VipLevelStatus
}

input VipLevelUpdateInput {
    """VIP等級"""
    level: Uint64
    """VIP等級名稱"""
    name: String
    """VIP等級描述"""
    description: String
    """VIP等級圖標"""
    icon: String
    """VIP等級排序"""
    sort: Uint64
    # """VIP等級狀態"""
    # status: VipLevelStatus
}

input ClaimVipRewardInput {
    """VIP等級"""
    vipLevel: Uint64!
    # """領取類型"""
    # claimType: VipClaimType!
}


input VipLevelFilterInput {
    """VIP等級"""
    vipLevel: VipLevelInput
    baseFilter: BaseFilterInput
}

input VipLevelInput {
    id: Uint64
    """VIP等級"""
    level: Uint64
    """VIP等級名稱"""
    name: String
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/agent_svc.graphql", Input: `extend type Qyery {
    """代理列表"""
    listAgent(filter: AgentFilterInput, pagination: PaginationInput): ListAgentResp!

    """全民代理列表"""
    listGeneralAgent(filter: GeneralAgentFilterInput, pagination: PaginationInput): ListGeneralAgentResp!
}

extend type Mutation {
    """新增代理"""
    createAgent(in: AgentCreateInput!): Uint64!
    """更新代理"""
    updateAgent(filter: AgentFilterInput!, in: AgentUpdateInput!): Uint64!
    """刪除代理"""
    deleteAgent(filter: AgentFilterInput!): Uint64!


    """新增全民代理"""
    createGeneralAgent(in: GeneralAgentCreateInput!): Uint64!
    """更新全民代理"""
    updateGeneralAgent(filter: GeneralAgentFilterInput!, in: GeneralAgentUpdateInput!): Uint64!
    """刪除全民代理"""
    deleteGeneralAgent(filter: GeneralAgentFilterInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/auth_svc.graphql", Input: `extend type Query {
	Me: Claims!
}

extend type Mutation {
	CreateCommonUser(in: CreateCommonUserReqInput!): CreateCommonUserResp!
	Login(in: LoginReqInput!): LoginResp!
	Logout: Uint64!
	RefreshToken: RefreshTokenResp!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/event_svc.graphql", Input: `extend type Query {
    """活動列表"""
    listEvent(filter: EventFilterInput!, pagination: PaginationInput): ListEventResp!

    """歷史活動列表"""
    listHistoryEvent(filter: EventFilterInput!, pagination: PaginationInput): ListEventResp!
}

extend type Mutation {
    """新增活動"""
    createEvent(in: EventCreateInput!): Uint64!
    """更新活動"""
    updateEvent(filter: EventFilterInput!, in: EventUpdateInput!): Uint64!
    """刪除活動"""
    deleteEvent(filter: EventFilterInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/game_svc.graphql", Input: `extend type Query {
    """遊戲玩家列表"""
    listGamePlayer(filter: GamePlayerFilterInput!, pagination: PaginationInput): ListGamePlayerResp!

    """資金轉出入紀錄"""
    listGameTransferRecord(filter: GameTransferRecordFilterInput!, pagination: PaginationInput): ListGameTransferRecordResp!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/gameline_svc.graphql", Input: `extend type Query{
    """系統線路清單"""
    listSystemLine(filter: SystemLineFilterInput, pagination: PaginationInput): ListSystemLineResp!

    """商戶線路清單"""
    listMerchantLine(filter: MerchantLineFilterInput, pagination: PaginationInput): ListMerchantLineResp!

    """線路租借清單"""
    listLineRent(filter: LineRentFilterInput, pagination: PaginationInput): ListLineRentResp!

    """線路費率列表"""
    listLineRate(filter: LineRateFilterInput, pagination: PaginationInput): ListLineRateResp!

    """線路費率歷史列表"""
    listLineRateHistory(filter: LineRateHistoryFilterInput, pagination: PaginationInput): ListLineRateHistoryResp!

    """遊戲列表"""
    listGame(filter: GameFilterInput, pagination: PaginationInput): ListGameResp!
}

extend type Mutation {
    """新增系統線路"""
    createSystemLine(in: SystemLineCreateInput!): Uint64!
    """更新系統線路"""
    updateSystemLine(filter: SystemLineFilterInput!, in: SystemLineUpdateInput!): Uint64!
    """刪除系統線路"""
    deleteSystemLine(filter: SystemLineFilterInput!): Uint64!

    """新增商戶線路"""
    createMerchantLine(in: MerchantLineCreateInput!): Uint64!
    """更新商戶線路"""
    updateMerchantLine(filter: MerchantLineFilterInput!, in: MerchantLineUpdateInput!): Uint64!
    """刪除商戶線路"""
    deleteMerchantLine(filter: MerchantLineFilterInput!): Uint64!

    """新增線路租借"""
    createLineRent(in: LineRentCreateInput!): Uint64!
    """更新線路租借"""
    updateLineRent(filter: LineRentFilterInput!, in: LineRentUpdateInput!): Uint64!
    """刪除線路租借"""
    deleteLineRent(filter: LineRentFilterInput!): Uint64!

    """新增線路費率"""
    createLineRate(in: LineRateCreateInput!): Uint64!
    """更新線路費率"""
    updateLineRate(filter: LineRateFilterInput!, in: LineRateUpdateInput!): Uint64!
    """刪除線路費率"""
    deleteLineRate(filter: LineRateFilterInput!): Uint64!

    """新增遊戲"""
    createGame(in: GameCreateInput!): Uint64!
    """更新遊戲"""
    updateGame(filter: GameFilterInput!, in: GameUpdateInput!): Uint64!
    """刪除遊戲"""
    deleteGame(filter: GameFilterInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/hub.graphql", Input: `extend type Query {
	listHubClients: [HubClient!]!
}

extend type Subscription {
	receiveMessage(userAuth: UserAuth!): String!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/menu_svc.graphql", Input: `extend type Query {
	"""所有列表"""
	listMenu: [Menu!]!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/merchant_svc.graphql", Input: `extend type Query  {
    """商家列表"""
    listMerchant(filter: MerchantFilterInput, pagination: PaginationInput): ListMerchantResp!
    
    """商家出款方式列表"""
    listMerchantWithdrawMethod(filter: MerchantWithdrawMethodFilterInput, pagination: PaginationInput): ListMerchantWithdrawMethodResp!
    """商家存款方式列表"""
    listMerchantDepositMethod(filter: MerchantDepositMethodFilterInput, pagination: PaginationInput): ListMerchantDepositMethodResp!
    """商家費率模式列表"""
    listMerchantFeeMode(filter: MerchantFeeModeFilterInput, pagination: PaginationInput): ListMerchantFeeModeResp!
    
    """餘額異動紀錄"""
    listMerchantBalanceLog(filter: MerchantBalanceLogFilterInput, pagination: PaginationInput): ListMerchantBalanceLogResp!
    """商家提款紀錄"""
    listMerchantWithdrawLog(filter: MerchantWithdrawLogFilterInput, pagination: PaginationInput): ListMerchantWithdrawLogResp!
    """商家存款紀錄"""
    listMerchantDepositLog(filter: MerchantDepositLogFilterInput, pagination: PaginationInput): ListMerchantDepositLogResp!
    """商家登錄歷史列表"""
    listMerchantLoginHistory(filter: MerchantLoginHistoryFilterInput, pagination: PaginationInput): ListMerchantLoginHistoryResp!
}

extend type Mutation {
    """新增商家"""
    createMerchant(in: MerchantCreateInput!): Uint64!
    """更新商家"""
    updateMerchant(filter: MerchantFilterInput!, in: MerchantUpdateInput!): Uint64!
    """刪除商家"""
    deleteMerchant(filter: MerchantFilterInput!): Uint64!

    """新增商家出款方式"""
    createMerchantWithdrawMethod(in: MerchantWithdrawMethodCreateInput!): Uint64!
    """更新商家出款方式"""
    updateMerchantWithdrawMethod(filter: MerchantWithdrawMethodFilterInput!, in: MerchantWithdrawMethodUpdateInput!): Uint64!
    """刪除商家出款方式"""
    deleteMerchantWithdrawMethod(filter: MerchantWithdrawMethodFilterInput!): Uint64!

    """新增商家存款方式"""
    createMerchantDepositMethod(in: MerchantDepositMethodCreateInput!): Uint64!
    """更新商家存款方式"""
    updateMerchantDepositMethod(filter: MerchantDepositMethodFilterInput!, in: MerchantDepositMethodUpdateInput!): Uint64!
    """刪除商家存款方式"""
    deleteMerchantDepositMethod(filter: MerchantDepositMethodFilterInput!): Uint64!

    """新增商家費率模式"""
    createMerchantFeeMode(in: MerchantFeeModeCreateInput!): Uint64!
    """更新商家費率模式"""
    updateMerchantFeeMode(filter: MerchantFeeModeFilterInput!, in: MerchantFeeModeUpdateInput!): Uint64!
    """刪除商家費率模式"""
    deleteMerchantFeeMode(filter: MerchantFeeModeFilterInput!): Uint64!


    """商家餘額異動申請"""
    applyMerchantBalance(in: MerchantBalanceApplyInput!): Uint64!
    """商家餘額異動審核"""
    auditMerchantBalance(filter: MerchantBalanceFilterInput!, in: MerchantBalanceAuditInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/role_svc.graphql", Input: `extend type Query {
	"""角色"""
	getRole(filter: RoleFilterInput!): Role!
	"""角色列表"""
	listRole(filter: RoleFilterInput!, pagination: PaginationInput): ListRoleResp!
}

extend type Mutation {
	createRole(in: RoleCreateInput!): Uint64!
	"""更新角色"""
	updateRole(filter: RoleFilterInput!, in: RoleUpdateInput!): Uint64!
	"""刪除角色"""
	deleteRole(filter: RoleFilterInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/support_svc.graphql", Input: `extend type Query {
	"""黑名單IP"""
	getHostsDeny(filter: HostsDenyFilterInput!): HostsDeny!
	"""黑名單IP清單"""
	listHostsDeny(filter: HostsDenyFilterInput, pagination:PaginationInput): ListHostsDenyResp!

	"""模板列表"""
	listTemplate(filter: TemplateFilterInput!, pagination: PaginationInput): ListTemplateResp!

	"""審計日誌"""
	listAuditLog(filter: AuditLogFilterInput!, pagination: PaginationInput): ListAuditLogResp!

	"""標籤"""
	getTag(filter: TagFilterInput!): Tag!
	"""標籤列表"""
	listTag(filter: TagFilterInput!, pagination: PaginationInput): ListTagResp!

	"""安全事件列表"""
    listSecurityEvent(filter: SecurityEventFilterInput!, pagination: PaginationInput): ListSecurityEventResp!

	""""短信管理"""
	getSmsConfig: SmsConfig!

	"""短信發送紀錄"""
	listSmsRecord(filter: SmsRecordFilterInput!, pagination: PaginationInput): ListSmsRecordResp!

	"""Email管理"""
	getEmailConfig: EmailConfig!
	"""Email發送紀錄"""
	listEmailRecord(filter: EmailRecordFilterInput!, pagination: PaginationInput): ListEmailRecordResp!
}

extend type Mutation {
	"""新增黑名單IP"""
	createHostsDeny(in: HostsDenyCreateInput!): HostsDeny!
	"""更新黑名單IP"""
	updateHostsDeny(filter: HostsDenyFilterInput!, in: HostsDenyUpdateInput!): HostsDeny!
	"""刪除黑名單IP"""
	deleteHostsDeny(filter: HostsDenyFilterInput!): Uint64!

	"""短信設置"""
	configSms(in: SmsConfigInput!): Uint64!

	"""Email設置"""
	configEmail(in: EmailConfigInput!): Uint64!

	"""新增模板"""
	createTemplate(in: TemplateCreateInput!): Uint64!
	"""更新模板"""
	updateTemplate(filter: TemplateFilterInput!, in: TemplateUpdateInput!): Uint64!
	"""刪除模板"""
	deleteTemplate(filter: TemplateFilterInput!): Uint64!

	"""新增標籤"""
	createTag(in: TagCreateInput!): Uint64!
	"""更新標籤"""
	updateTag(filter: TagFilterInput!, in: TagUpdateInput!): Uint64!
	"""刪除標籤"""
	deleteTag(filter: TagFilterInput!): Uint64!

	"""新增安全事件"""
    createSecurityEvent(in: SecurityEventCreateInput!): Uint64!
    """更新安全事件"""
    updateSecurityEvent(filter: SecurityEventFilterInput!, in: SecurityEventUpdateInput!): Uint64!
    """刪除安全事件"""
    deleteSecurityEvent(filter: SecurityEventFilterInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/user_svc.graphql", Input: `extend type Query {
	"""會員"""
	getUser(filter: UserFilterInput!): User!
	"""會員列表"""
	listUser(filter: UserFilterInput!, pagination: PaginationInput): ListUserResp!
	"""會員白名單"""
	getUserWhitelist(filter: UserWhitelistFilterInput!): UserWhitelist!
	"""會員白名單列表"""
	listUserWhitelist(filter: UserWhitelistFilterInput!, pagination: PaginationInput): ListUserWhitelistResp!
	"""會員角色"""
	getUserRole(filter: UserRoleFilterInput!): UserRole!
	"""會員角色列表"""
	listUserRole(filter: UserRoleFilterInput!, pagination: PaginationInput): ListUserRoleResp!
	"""會員標籤"""
	getUserTag(filter: UserTagFilterInput!): UserTag!
	"""會員標籤列表"""
	listUserTag(filter: UserTagFilterInput!, pagination: PaginationInput): ListUserTagResp!
	"""會員登錄歷史列表"""
	listUserLoginHistory(filter: UserLoginHistoryFilterInput!, pagination: PaginationInput): ListUserLoginHistoryResp!



    """會員出款資訊"""
    userWithdrawInfo(filter: UserFilterInput!): UserWithdrawInfo!
    """會員存款資訊"""
    userDepositInfo(filter: UserFilterInput!): UserDepositInfo!
    """會員評分"""
    userScore(filter: UserFilterInput!): UserScore!
}

extend type Mutation {
	"""建立登入會員"""
	createUser(in: CreateUserReqInput!): CreateUserResp!
	"""會員更新"""
	updateUser(filter: UserFilterInput!, in: UserUpdateInput!): Uint64!
	"""刪除會員"""
	deleteUser(filter: UserFilterInput!): Uint64!

	"""更新會員密碼"""
	updateUserPassword(in: UserUpdatePasswordInput!): Uint64!

	"""新增會員白名單"""
	createUserWhitelist(in: UserWhitelistCreateInput!): Uint64!
	"""更新會員白名單"""
	updateUserWhitelist(filter: UserWhitelistFilterInput!, in: UserWhitelistUpdateInput!): Uint64!
	"""刪除會員白名單"""
	deleteUserWhitelist(filter: UserWhitelistFilterInput!): Uint64!


	"""新增會員角色"""
	createUserRole(in: UserRoleCreateInput!): Uint64!
	"""更新會員角色"""
	updateUserRole(filter: UserRoleFilterInput!, in: UserRoleUpdateInput!): Uint64!
	"""刪除會員角色"""
	deleteUserRole(filter: UserRoleFilterInput!): Uint64!

	"""新增會員標籤"""
	createUserTag(in: UserTagCreateInput!): Uint64!
	"""更新會員標籤"""
	updateUserTag(filter: UserTagFilterInput!, in: UserTagUpdateInput!): Uint64!
	"""刪除會員標籤"""
	deleteUserTag(filter: UserTagFilterInput!): Uint64!


	 """封禁會員"""
	banUser(filter: UserFilterInput!): Uint64!
    """解封會員"""
    unbanUser(filter: UserFilterInput!): Uint64!
}`, BuiltIn: false},
	{Name: "../../../../docs/graphql/schema/platform/vip_svc.graphql", Input: `extend type Query {
    """升級日誌"""
    listVipUpgradeLog(filter: VipUpgradeLogFilterInput!, pagination: PaginationInput): ListVipUpgradeLogResp!
    """領取日誌"""
    listVipClaimLog(filter: VipClaimLogFilterInput!, pagination: PaginationInput): ListVipClaimLogResp!
    """VIP等級"""
    listVipLevel(filter: VipLevelFilterInput!, pagination: PaginationInput): ListVipLevelResp!
}

extend type Mutation {
    """新增VIP等級"""
    createVipLevel(in: VipLevelCreateInput!): Uint64!
    """更新VIP等級"""
    updateVipLevel(filter: VipLevelFilterInput!, in: VipLevelUpdateInput!): Uint64!
    """刪除VIP等級"""
    deleteVipLevel(filter: VipLevelFilterInput!): Uint64!
    """領取VIP獎勵"""
    claimVipReward(in: ClaimVipRewardInput!): Uint64!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_CreateCommonUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.CreateCommonUserReqInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNCreateCommonUserReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserReqInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.LoginReqInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNLoginReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginReqInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_applyMerchantBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantBalanceApplyInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNMerchantBalanceApplyInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceApplyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_auditMerchantBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantBalanceFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantBalanceFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.MerchantBalanceAuditInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNMerchantBalanceAuditInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceAuditInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_banUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_claimVipReward_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.ClaimVipRewardInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNClaimVipRewardInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐClaimVipRewardInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_configEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.EmailConfigInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNEmailConfigInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_configSms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.SmsConfigInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNSmsConfigInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.AgentCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNAgentCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.EventCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNEventCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.GameCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNGameCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createGeneralAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.GeneralAgentCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNGeneralAgentCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.HostsDenyCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNHostsDenyCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLineRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.LineRateCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNLineRateCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLineRent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.LineRentCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNLineRentCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMerchantDepositMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantDepositMethodCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNMerchantDepositMethodCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMerchantFeeMode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantFeeModeCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNMerchantFeeModeCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMerchantLine_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantLineCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNMerchantLineCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMerchantWithdrawMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantWithdrawMethodCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNMerchantWithdrawMethodCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMerchant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNMerchantCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNRoleCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSecurityEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.SecurityEventCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNSecurityEventCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSystemLine_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.SystemLineCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNSystemLineCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNTagCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TemplateCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNTemplateCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNUserRoleCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNUserTagCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNUserWhitelistCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.CreateUserReqInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNCreateUserReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserReqInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVipLevel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.VipLevelCreateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNVipLevelCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.AgentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNAgentFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.EventFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNEventFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.GameFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNGameFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGeneralAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.GeneralAgentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNGeneralAgentFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.HostsDenyFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNHostsDenyFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLineRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.LineRateFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNLineRateFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLineRent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.LineRentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNLineRentFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMerchantDepositMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantDepositMethodFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantDepositMethodFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMerchantFeeMode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantFeeModeFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantFeeModeFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMerchantLine_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantLineFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantLineFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMerchantWithdrawMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantWithdrawMethodFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantWithdrawMethodFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMerchant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSecurityEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.SecurityEventFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNSecurityEventFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSystemLine_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.SystemLineFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNSystemLineFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TemplateFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTemplateFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVipLevel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.VipLevelFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNVipLevelFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unbanUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.AgentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNAgentFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.AgentUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNAgentUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.EventFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNEventFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.EventUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNEventUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.GameFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNGameFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.GameUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNGameUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGeneralAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.GeneralAgentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNGeneralAgentFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.GeneralAgentUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNGeneralAgentUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.HostsDenyFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNHostsDenyFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.HostsDenyUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNHostsDenyUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLineRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.LineRateFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNLineRateFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.LineRateUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNLineRateUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLineRent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.LineRentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNLineRentFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.LineRentUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNLineRentUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMerchantDepositMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantDepositMethodFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantDepositMethodFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.MerchantDepositMethodUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNMerchantDepositMethodUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMerchantFeeMode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantFeeModeFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantFeeModeFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.MerchantFeeModeUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNMerchantFeeModeUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMerchantLine_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantLineFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantLineFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.MerchantLineUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNMerchantLineUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMerchantWithdrawMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantWithdrawMethodFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantWithdrawMethodFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.MerchantWithdrawMethodUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNMerchantWithdrawMethodUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMerchant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.MerchantFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMerchantFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.MerchantUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNMerchantUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.RoleUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNRoleUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSecurityEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.SecurityEventFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNSecurityEventFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.SecurityEventUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNSecurityEventUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSystemLine_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.SystemLineFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNSystemLineFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.SystemLineUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNSystemLineUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.TagUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNTagUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TemplateFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTemplateFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.TemplateUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNTemplateUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserUpdatePasswordInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg0, err = ec.unmarshalNUserUpdatePasswordInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserUpdatePasswordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.UserRoleUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNUserRoleUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.UserTagUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNUserTagUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.UserWhitelistUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNUserWhitelistUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.UserUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNUserUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVipLevel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.VipLevelFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNVipLevelFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 view.VipLevelUpdateInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNVipLevelUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.HostsDenyFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNHostsDenyFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listAuditLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.AuditLogFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNAuditLogFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listEmailRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.EmailRecordFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNEmailRecordFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailRecordFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.EventFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNEventFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listGamePlayer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.GamePlayerFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNGamePlayerFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGamePlayerFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listGameTransferRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.GameTransferRecordFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNGameTransferRecordFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameTransferRecordFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.GameFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOGameFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listHistoryEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.EventFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNEventFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listHostsDeny_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.HostsDenyFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOHostsDenyFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listLineRateHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.LineRateHistoryFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLineRateHistoryFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateHistoryFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listLineRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.LineRateFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLineRateFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listLineRent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.LineRentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLineRentFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMerchantBalanceLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.MerchantBalanceLogFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMerchantBalanceLogFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceLogFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMerchantDepositLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.MerchantDepositLogFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMerchantDepositLogFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositLogFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMerchantDepositMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.MerchantDepositMethodFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMerchantDepositMethodFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMerchantFeeMode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.MerchantFeeModeFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMerchantFeeModeFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMerchantLine_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.MerchantLineFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMerchantLineFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMerchantLoginHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.MerchantLoginHistoryFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMerchantLoginHistoryFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLoginHistoryFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMerchantWithdrawLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.MerchantWithdrawLogFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMerchantWithdrawLogFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawLogFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMerchantWithdrawMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.MerchantWithdrawMethodFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMerchantWithdrawMethodFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMerchant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.MerchantFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMerchantFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.RoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listSecurityEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.SecurityEventFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNSecurityEventFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listSmsRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.SmsRecordFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNSmsRecordFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsRecordFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listSystemLine_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.SystemLineFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOSystemLineFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.TemplateFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNTemplateFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUserLoginHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserLoginHistoryFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserLoginHistoryFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserRoleFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUserTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserTagFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUserWhitelist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserWhitelistFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listVipClaimLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.VipClaimLogFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNVipClaimLogFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipClaimLogFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listVipLevel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.VipLevelFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNVipLevelFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listVipUpgradeLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.VipUpgradeLogFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNVipUpgradeLogFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipUpgradeLogFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_userDepositInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userScore_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userWithdrawInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Qyery_listAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.AgentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOAgentFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Qyery_listGeneralAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *view.GeneralAgentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOGeneralAgentFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *view.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_receiveMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 view.UserAuth
	if tmp, ok := rawArgs["userAuth"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userAuth"))
		arg0, err = ec.unmarshalNUserAuth2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserAuth(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userAuth"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Agent_id(ctx context.Context, field graphql.CollectedField, obj *view.Agent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Agent_name(ctx context.Context, field graphql.CollectedField, obj *view.Agent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agent_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agent_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Agent_account(ctx context.Context, field graphql.CollectedField, obj *view.Agent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agent_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agent_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_id(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_userID(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_method(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_requestInput(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_requestInput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_requestInput(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_id(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_accountType(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_accountType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.AccountType)
	fc.Result = res
	return ec.marshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_accountType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_status(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.UserStatus)
	fc.Result = res
	return ec.marshalNUserStatus2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_username(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_aliasName(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_aliasName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AliasName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_aliasName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_avatarURL(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_avatarURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_avatarURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_whitelists(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_whitelists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Whitelists, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserWhitelist)
	fc.Result = res
	return ec.marshalNUserWhitelist2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_whitelists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserWhitelist_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserWhitelist_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserWhitelist_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserWhitelist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_menu(ctx context.Context, field graphql.CollectedField, obj *view.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_menu(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Menu, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Menu)
	fc.Result = res
	return ec.marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_menu(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Menu_name(ctx, field)
			case "key":
				return ec.fieldContext_Menu_key(ctx, field)
			case "superKey":
				return ec.fieldContext_Menu_superKey(ctx, field)
			case "next":
				return ec.fieldContext_Menu_next(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Menu", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_creatorID(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_creatorID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_creatorID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_creatorName(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_creatorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_creatorName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_updaterID(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_updaterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdaterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_updaterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_updaterName(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_updaterName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdaterName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_updaterName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Common_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.Common) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Common_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Common_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Common",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCommonUserResp_user(ctx context.Context, field graphql.CollectedField, obj *view.CreateCommonUserResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCommonUserResp_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.User)
	fc.Result = res
	return ec.marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCommonUserResp_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCommonUserResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "accountType":
				return ec.fieldContext_User_accountType(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_User_aliasName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "area":
				return ec.fieldContext_User_area(ctx, field)
			case "notes":
				return ec.fieldContext_User_notes(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "lastLoginIP":
				return ec.fieldContext_User_lastLoginIP(ctx, field)
			case "isDelete":
				return ec.fieldContext_User_isDelete(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_User_updateUserID(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "whitelists":
				return ec.fieldContext_User_whitelists(ctx, field)
			case "tags":
				return ec.fieldContext_User_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUploadURLResp_files(ctx context.Context, field graphql.CollectedField, obj *view.CreateUploadURLResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUploadURLResp_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.FileInfo)
	fc.Result = res
	return ec.marshalNFileInfo2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUploadURLResp_files(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUploadURLResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fileName":
				return ec.fieldContext_FileInfo_fileName(ctx, field)
			case "uploadURL":
				return ec.fieldContext_FileInfo_uploadURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUserResp_user(ctx context.Context, field graphql.CollectedField, obj *view.CreateUserResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUserResp_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.User)
	fc.Result = res
	return ec.marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUserResp_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUserResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "accountType":
				return ec.fieldContext_User_accountType(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_User_aliasName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "area":
				return ec.fieldContext_User_area(ctx, field)
			case "notes":
				return ec.fieldContext_User_notes(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "lastLoginIP":
				return ec.fieldContext_User_lastLoginIP(ctx, field)
			case "isDelete":
				return ec.fieldContext_User_isDelete(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_User_updateUserID(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "whitelists":
				return ec.fieldContext_User_whitelists(ctx, field)
			case "tags":
				return ec.fieldContext_User_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataList_data(ctx context.Context, field graphql.CollectedField, obj *view.DataList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataList_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]view.Data)
	fc.Result = res
	return ec.marshalNData2ᚕboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataList_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataList_meta(ctx context.Context, field graphql.CollectedField, obj *view.DataList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataList_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataList_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailConfig_smtpServer(ctx context.Context, field graphql.CollectedField, obj *view.EmailConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailConfig_smtpServer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPServer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailConfig_smtpServer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailConfig_smtpPort(ctx context.Context, field graphql.CollectedField, obj *view.EmailConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailConfig_smtpPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailConfig_smtpPort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailConfig_smtpUser(ctx context.Context, field graphql.CollectedField, obj *view.EmailConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailConfig_smtpUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailConfig_smtpUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailConfig_smtpFrom(ctx context.Context, field graphql.CollectedField, obj *view.EmailConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailConfig_smtpFrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailConfig_smtpFrom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailConfig_smtpFromName(ctx context.Context, field graphql.CollectedField, obj *view.EmailConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailConfig_smtpFromName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPFromName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailConfig_smtpFromName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailConfig_smtpSSL(ctx context.Context, field graphql.CollectedField, obj *view.EmailConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailConfig_smtpSSL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPSsl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailConfig_smtpSSL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_id(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_email(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_subject(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_subject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_subject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_content(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_sendTime(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_sendTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_sendTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_smtpServer(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_smtpServer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPServer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_smtpServer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_smtpPort(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_smtpPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_smtpPort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_smtpUser(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_smtpUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_smtpUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_smtpFrom(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_smtpFrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_smtpFrom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_smtpFromName(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_smtpFromName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPFromName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_smtpFromName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_smtpSSL(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_smtpSSL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMTPSsl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_smtpSSL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailRecord_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.EmailRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailRecord_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailRecord_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_id(ctx context.Context, field graphql.CollectedField, obj *view.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_name(ctx context.Context, field graphql.CollectedField, obj *view.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_description(ctx context.Context, field graphql.CollectedField, obj *view.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_startTime(ctx context.Context, field graphql.CollectedField, obj *view.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_startTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_startTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_endTime(ctx context.Context, field graphql.CollectedField, obj *view.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_endTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_endTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_remark(ctx context.Context, field graphql.CollectedField, obj *view.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_remark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_remark(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_id(ctx context.Context, field graphql.CollectedField, obj *view.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_name(ctx context.Context, field graphql.CollectedField, obj *view.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_content(ctx context.Context, field graphql.CollectedField, obj *view.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_contentType(ctx context.Context, field graphql.CollectedField, obj *view.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileInfo_fileName(ctx context.Context, field graphql.CollectedField, obj *view.FileInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileInfo_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileInfo_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileInfo_uploadURL(ctx context.Context, field graphql.CollectedField, obj *view.FileInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileInfo_uploadURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileInfo_uploadURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_id(ctx context.Context, field graphql.CollectedField, obj *view.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_name(ctx context.Context, field graphql.CollectedField, obj *view.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_description(ctx context.Context, field graphql.CollectedField, obj *view.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePlayer_id(ctx context.Context, field graphql.CollectedField, obj *view.GamePlayer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePlayer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePlayer_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePlayer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePlayer_username(ctx context.Context, field graphql.CollectedField, obj *view.GamePlayer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePlayer_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePlayer_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePlayer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePlayer_nickname(ctx context.Context, field graphql.CollectedField, obj *view.GamePlayer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePlayer_nickname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nickname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePlayer_nickname(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePlayer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePlayer_balance(ctx context.Context, field graphql.CollectedField, obj *view.GamePlayer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePlayer_balance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(decimal.Decimal)
	fc.Result = res
	return ec.marshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePlayer_balance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePlayer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePlayer_lastLoginTime(ctx context.Context, field graphql.CollectedField, obj *view.GamePlayer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePlayer_lastLoginTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePlayer_lastLoginTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePlayer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePlayer_lastLogoutTime(ctx context.Context, field graphql.CollectedField, obj *view.GamePlayer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePlayer_lastLogoutTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLogoutTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePlayer_lastLogoutTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePlayer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePlayer_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.GamePlayer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePlayer_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePlayer_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePlayer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePlayer_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.GamePlayer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePlayer_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePlayer_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePlayer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTransferRecord_id(ctx context.Context, field graphql.CollectedField, obj *view.GameTransferRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTransferRecord_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTransferRecord_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTransferRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTransferRecord_gamePlayerId(ctx context.Context, field graphql.CollectedField, obj *view.GameTransferRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTransferRecord_gamePlayerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GamePlayerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTransferRecord_gamePlayerId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTransferRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTransferRecord_gameId(ctx context.Context, field graphql.CollectedField, obj *view.GameTransferRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTransferRecord_gameId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTransferRecord_gameId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTransferRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTransferRecord_gameName(ctx context.Context, field graphql.CollectedField, obj *view.GameTransferRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTransferRecord_gameName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTransferRecord_gameName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTransferRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTransferRecord_amount(ctx context.Context, field graphql.CollectedField, obj *view.GameTransferRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTransferRecord_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(decimal.Decimal)
	fc.Result = res
	return ec.marshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTransferRecord_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTransferRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTransferRecord_remark(ctx context.Context, field graphql.CollectedField, obj *view.GameTransferRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTransferRecord_remark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTransferRecord_remark(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTransferRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTransferRecord_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.GameTransferRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTransferRecord_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTransferRecord_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTransferRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTransferRecord_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.GameTransferRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTransferRecord_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTransferRecord_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTransferRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GeneralAgent_id(ctx context.Context, field graphql.CollectedField, obj *view.GeneralAgent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GeneralAgent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GeneralAgent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GeneralAgent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GeneralAgent_name(ctx context.Context, field graphql.CollectedField, obj *view.GeneralAgent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GeneralAgent_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GeneralAgent_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GeneralAgent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GeneralAgent_account(ctx context.Context, field graphql.CollectedField, obj *view.GeneralAgent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GeneralAgent_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GeneralAgent_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GeneralAgent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_id(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_ipAddress(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_ipAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_ipAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_isEnabled(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_isEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_isEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_remark(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_remark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_remark(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HostsDeny_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.HostsDeny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HostsDeny_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HostsDeny_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HostsDeny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubClient_userID(ctx context.Context, field graphql.CollectedField, obj *view.HubClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubClient_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubClient_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubClient_devices(ctx context.Context, field graphql.CollectedField, obj *view.HubClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubClient_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.HubDevice)
	fc.Result = res
	return ec.marshalNHubDevice2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubDeviceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubClient_devices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_HubDevice_token(ctx, field)
			case "deviceUID":
				return ec.fieldContext_HubDevice_deviceUID(ctx, field)
			case "roomID":
				return ec.fieldContext_HubDevice_roomID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HubDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubDevice_token(ctx context.Context, field graphql.CollectedField, obj *view.HubDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubDevice_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubDevice_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubDevice_deviceUID(ctx context.Context, field graphql.CollectedField, obj *view.HubDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubDevice_deviceUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubDevice_deviceUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HubDevice_roomID(ctx context.Context, field graphql.CollectedField, obj *view.HubDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HubDevice_roomID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoomID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HubDevice_roomID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HubDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRate_id(ctx context.Context, field graphql.CollectedField, obj *view.LineRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRate_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRate_name(ctx context.Context, field graphql.CollectedField, obj *view.LineRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRate_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRate_description(ctx context.Context, field graphql.CollectedField, obj *view.LineRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRate_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRate_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRate_rate(ctx context.Context, field graphql.CollectedField, obj *view.LineRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRate_rate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(decimal.Decimal)
	fc.Result = res
	return ec.marshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRate_rate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRate_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.LineRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRate_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRate_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRate_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.LineRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRate_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRate_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRateHistory_id(ctx context.Context, field graphql.CollectedField, obj *view.LineRateHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRateHistory_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRateHistory_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRateHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRateHistory_name(ctx context.Context, field graphql.CollectedField, obj *view.LineRateHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRateHistory_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRateHistory_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRateHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRateHistory_description(ctx context.Context, field graphql.CollectedField, obj *view.LineRateHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRateHistory_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRateHistory_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRateHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRateHistory_rate(ctx context.Context, field graphql.CollectedField, obj *view.LineRateHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRateHistory_rate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(decimal.Decimal)
	fc.Result = res
	return ec.marshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRateHistory_rate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRateHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRateHistory_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.LineRateHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRateHistory_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRateHistory_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRateHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRateHistory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.LineRateHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRateHistory_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRateHistory_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRateHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRent_id(ctx context.Context, field graphql.CollectedField, obj *view.LineRent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRent_name(ctx context.Context, field graphql.CollectedField, obj *view.LineRent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRent_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRent_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRent_description(ctx context.Context, field graphql.CollectedField, obj *view.LineRent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRent_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRent_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRent_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.LineRent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRent_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRent_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LineRent_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.LineRent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LineRent_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LineRent_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LineRent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListAgentResp_agents(ctx context.Context, field graphql.CollectedField, obj *view.ListAgentResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAgentResp_agents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Agent)
	fc.Result = res
	return ec.marshalNAgent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAgentResp_agents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAgentResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Agent_id(ctx, field)
			case "name":
				return ec.fieldContext_Agent_name(ctx, field)
			case "account":
				return ec.fieldContext_Agent_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Agent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListAgentResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListAgentResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAgentResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAgentResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAgentResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListAuditLogResp_auditLogs(ctx context.Context, field graphql.CollectedField, obj *view.ListAuditLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAuditLogResp_auditLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLogs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.AuditLog)
	fc.Result = res
	return ec.marshalNAuditLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAuditLogResp_auditLogs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAuditLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuditLog_id(ctx, field)
			case "userID":
				return ec.fieldContext_AuditLog_userID(ctx, field)
			case "method":
				return ec.fieldContext_AuditLog_method(ctx, field)
			case "requestInput":
				return ec.fieldContext_AuditLog_requestInput(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuditLog_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListAuditLogResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListAuditLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAuditLogResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAuditLogResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAuditLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListEmailRecordResp_emailRecords(ctx context.Context, field graphql.CollectedField, obj *view.ListEmailRecordResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListEmailRecordResp_emailRecords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailRecords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.EmailRecord)
	fc.Result = res
	return ec.marshalNEmailRecord2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListEmailRecordResp_emailRecords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListEmailRecordResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EmailRecord_id(ctx, field)
			case "email":
				return ec.fieldContext_EmailRecord_email(ctx, field)
			case "subject":
				return ec.fieldContext_EmailRecord_subject(ctx, field)
			case "content":
				return ec.fieldContext_EmailRecord_content(ctx, field)
			case "sendTime":
				return ec.fieldContext_EmailRecord_sendTime(ctx, field)
			case "smtpServer":
				return ec.fieldContext_EmailRecord_smtpServer(ctx, field)
			case "smtpPort":
				return ec.fieldContext_EmailRecord_smtpPort(ctx, field)
			case "smtpUser":
				return ec.fieldContext_EmailRecord_smtpUser(ctx, field)
			case "smtpFrom":
				return ec.fieldContext_EmailRecord_smtpFrom(ctx, field)
			case "smtpFromName":
				return ec.fieldContext_EmailRecord_smtpFromName(ctx, field)
			case "smtpSSL":
				return ec.fieldContext_EmailRecord_smtpSSL(ctx, field)
			case "createdAt":
				return ec.fieldContext_EmailRecord_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_EmailRecord_createUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmailRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListEmailRecordResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListEmailRecordResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListEmailRecordResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListEmailRecordResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListEmailRecordResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListEventResp_events(ctx context.Context, field graphql.CollectedField, obj *view.ListEventResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListEventResp_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Event)
	fc.Result = res
	return ec.marshalNEvent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListEventResp_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListEventResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "name":
				return ec.fieldContext_Event_name(ctx, field)
			case "description":
				return ec.fieldContext_Event_description(ctx, field)
			case "startTime":
				return ec.fieldContext_Event_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_Event_endTime(ctx, field)
			case "remark":
				return ec.fieldContext_Event_remark(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListEventResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListEventResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListEventResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListEventResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListEventResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListGamePlayerResp_players(ctx context.Context, field graphql.CollectedField, obj *view.ListGamePlayerResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListGamePlayerResp_players(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Players, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.GamePlayer)
	fc.Result = res
	return ec.marshalNGamePlayer2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGamePlayerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListGamePlayerResp_players(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListGamePlayerResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GamePlayer_id(ctx, field)
			case "username":
				return ec.fieldContext_GamePlayer_username(ctx, field)
			case "nickname":
				return ec.fieldContext_GamePlayer_nickname(ctx, field)
			case "balance":
				return ec.fieldContext_GamePlayer_balance(ctx, field)
			case "lastLoginTime":
				return ec.fieldContext_GamePlayer_lastLoginTime(ctx, field)
			case "lastLogoutTime":
				return ec.fieldContext_GamePlayer_lastLogoutTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_GamePlayer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GamePlayer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GamePlayer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListGamePlayerResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListGamePlayerResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListGamePlayerResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListGamePlayerResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListGamePlayerResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListGameResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListGameResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListGameResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Game)
	fc.Result = res
	return ec.marshalNGame2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListGameResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListGameResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Game_id(ctx, field)
			case "name":
				return ec.fieldContext_Game_name(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListGameResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListGameResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListGameResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListGameResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListGameResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListGameTransferRecordResp_records(ctx context.Context, field graphql.CollectedField, obj *view.ListGameTransferRecordResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListGameTransferRecordResp_records(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Records, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.GameTransferRecord)
	fc.Result = res
	return ec.marshalNGameTransferRecord2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameTransferRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListGameTransferRecordResp_records(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListGameTransferRecordResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameTransferRecord_id(ctx, field)
			case "gamePlayerId":
				return ec.fieldContext_GameTransferRecord_gamePlayerId(ctx, field)
			case "gameId":
				return ec.fieldContext_GameTransferRecord_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_GameTransferRecord_gameName(ctx, field)
			case "amount":
				return ec.fieldContext_GameTransferRecord_amount(ctx, field)
			case "remark":
				return ec.fieldContext_GameTransferRecord_remark(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameTransferRecord_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameTransferRecord_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameTransferRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListGameTransferRecordResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListGameTransferRecordResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListGameTransferRecordResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListGameTransferRecordResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListGameTransferRecordResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListGeneralAgentResp_generalAgents(ctx context.Context, field graphql.CollectedField, obj *view.ListGeneralAgentResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListGeneralAgentResp_generalAgents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeneralAgents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.GeneralAgent)
	fc.Result = res
	return ec.marshalNGeneralAgent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListGeneralAgentResp_generalAgents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListGeneralAgentResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GeneralAgent_id(ctx, field)
			case "name":
				return ec.fieldContext_GeneralAgent_name(ctx, field)
			case "account":
				return ec.fieldContext_GeneralAgent_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GeneralAgent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListGeneralAgentResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListGeneralAgentResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListGeneralAgentResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListGeneralAgentResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListGeneralAgentResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListHostsDenyResp_hostsDenys(ctx context.Context, field graphql.CollectedField, obj *view.ListHostsDenyResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListHostsDenyResp_hostsDenys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostsDenys, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.HostsDeny)
	fc.Result = res
	return ec.marshalNHostsDeny2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListHostsDenyResp_hostsDenys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListHostsDenyResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HostsDeny_id(ctx, field)
			case "ipAddress":
				return ec.fieldContext_HostsDeny_ipAddress(ctx, field)
			case "isEnabled":
				return ec.fieldContext_HostsDeny_isEnabled(ctx, field)
			case "remark":
				return ec.fieldContext_HostsDeny_remark(ctx, field)
			case "createdAt":
				return ec.fieldContext_HostsDeny_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_HostsDeny_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HostsDeny_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_HostsDeny_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HostsDeny", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListHostsDenyResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListHostsDenyResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListHostsDenyResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListHostsDenyResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListHostsDenyResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListLineRateHistoryResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListLineRateHistoryResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListLineRateHistoryResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.LineRateHistory)
	fc.Result = res
	return ec.marshalNLineRateHistory2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateHistoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListLineRateHistoryResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListLineRateHistoryResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LineRateHistory_id(ctx, field)
			case "name":
				return ec.fieldContext_LineRateHistory_name(ctx, field)
			case "description":
				return ec.fieldContext_LineRateHistory_description(ctx, field)
			case "rate":
				return ec.fieldContext_LineRateHistory_rate(ctx, field)
			case "createdAt":
				return ec.fieldContext_LineRateHistory_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_LineRateHistory_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LineRateHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListLineRateHistoryResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListLineRateHistoryResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListLineRateHistoryResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListLineRateHistoryResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListLineRateHistoryResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListLineRateResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListLineRateResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListLineRateResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.LineRate)
	fc.Result = res
	return ec.marshalNLineRate2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListLineRateResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListLineRateResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LineRate_id(ctx, field)
			case "name":
				return ec.fieldContext_LineRate_name(ctx, field)
			case "description":
				return ec.fieldContext_LineRate_description(ctx, field)
			case "rate":
				return ec.fieldContext_LineRate_rate(ctx, field)
			case "createdAt":
				return ec.fieldContext_LineRate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_LineRate_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LineRate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListLineRateResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListLineRateResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListLineRateResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListLineRateResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListLineRateResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListLineRentResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListLineRentResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListLineRentResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.LineRent)
	fc.Result = res
	return ec.marshalNLineRent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListLineRentResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListLineRentResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LineRent_id(ctx, field)
			case "name":
				return ec.fieldContext_LineRent_name(ctx, field)
			case "description":
				return ec.fieldContext_LineRent_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_LineRent_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_LineRent_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LineRent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListLineRentResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListLineRentResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListLineRentResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListLineRentResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListLineRentResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantBalanceLogResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantBalanceLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantBalanceLogResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.MerchantBalanceLog)
	fc.Result = res
	return ec.marshalNMerchantBalanceLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantBalanceLogResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantBalanceLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantBalanceLog_id(ctx, field)
			case "merchantId":
				return ec.fieldContext_MerchantBalanceLog_merchantId(ctx, field)
			case "amount":
				return ec.fieldContext_MerchantBalanceLog_amount(ctx, field)
			case "description":
				return ec.fieldContext_MerchantBalanceLog_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantBalanceLog_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantBalanceLog_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantBalanceLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantBalanceLogResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantBalanceLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantBalanceLogResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantBalanceLogResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantBalanceLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantDepositLogResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantDepositLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantDepositLogResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.MerchantDepositLog)
	fc.Result = res
	return ec.marshalNMerchantDepositLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantDepositLogResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantDepositLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantDepositLog_id(ctx, field)
			case "merchantId":
				return ec.fieldContext_MerchantDepositLog_merchantId(ctx, field)
			case "amount":
				return ec.fieldContext_MerchantDepositLog_amount(ctx, field)
			case "description":
				return ec.fieldContext_MerchantDepositLog_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantDepositLog_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantDepositLog_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantDepositLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantDepositLogResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantDepositLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantDepositLogResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantDepositLogResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantDepositLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantDepositMethodResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantDepositMethodResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantDepositMethodResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.MerchantDepositMethod)
	fc.Result = res
	return ec.marshalNMerchantDepositMethod2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantDepositMethodResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantDepositMethodResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantDepositMethod_id(ctx, field)
			case "name":
				return ec.fieldContext_MerchantDepositMethod_name(ctx, field)
			case "description":
				return ec.fieldContext_MerchantDepositMethod_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantDepositMethod_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantDepositMethod_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantDepositMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantDepositMethodResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantDepositMethodResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantDepositMethodResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantDepositMethodResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantDepositMethodResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantFeeModeResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantFeeModeResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantFeeModeResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.MerchantFeeMode)
	fc.Result = res
	return ec.marshalNMerchantFeeMode2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantFeeModeResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantFeeModeResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantFeeMode_id(ctx, field)
			case "name":
				return ec.fieldContext_MerchantFeeMode_name(ctx, field)
			case "description":
				return ec.fieldContext_MerchantFeeMode_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantFeeMode_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantFeeMode_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantFeeMode", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantFeeModeResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantFeeModeResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantFeeModeResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantFeeModeResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantFeeModeResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantLineResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantLineResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantLineResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.MerchantLine)
	fc.Result = res
	return ec.marshalNMerchantLine2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantLineResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantLineResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantLine_id(ctx, field)
			case "name":
				return ec.fieldContext_MerchantLine_name(ctx, field)
			case "description":
				return ec.fieldContext_MerchantLine_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantLine_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantLine_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantLine", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantLineResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantLineResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantLineResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantLineResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantLineResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantLoginHistoryResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantLoginHistoryResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantLoginHistoryResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.MerchantLoginHistory)
	fc.Result = res
	return ec.marshalNMerchantLoginHistory2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLoginHistoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantLoginHistoryResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantLoginHistoryResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantLoginHistory_id(ctx, field)
			case "merchantId":
				return ec.fieldContext_MerchantLoginHistory_merchantId(ctx, field)
			case "ip":
				return ec.fieldContext_MerchantLoginHistory_ip(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantLoginHistory_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantLoginHistory_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantLoginHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantLoginHistoryResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantLoginHistoryResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantLoginHistoryResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantLoginHistoryResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantLoginHistoryResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Merchant)
	fc.Result = res
	return ec.marshalNMerchant2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Merchant_id(ctx, field)
			case "name":
				return ec.fieldContext_Merchant_name(ctx, field)
			case "description":
				return ec.fieldContext_Merchant_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_Merchant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Merchant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Merchant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantWithdrawLogResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantWithdrawLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantWithdrawLogResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.MerchantWithdrawLog)
	fc.Result = res
	return ec.marshalNMerchantWithdrawLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantWithdrawLogResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantWithdrawLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantWithdrawLog_id(ctx, field)
			case "merchantId":
				return ec.fieldContext_MerchantWithdrawLog_merchantId(ctx, field)
			case "amount":
				return ec.fieldContext_MerchantWithdrawLog_amount(ctx, field)
			case "description":
				return ec.fieldContext_MerchantWithdrawLog_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantWithdrawLog_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantWithdrawLog_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantWithdrawLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantWithdrawLogResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantWithdrawLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantWithdrawLogResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantWithdrawLogResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantWithdrawLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantWithdrawMethodResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantWithdrawMethodResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantWithdrawMethodResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.MerchantWithdrawMethod)
	fc.Result = res
	return ec.marshalNMerchantWithdrawMethod2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantWithdrawMethodResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantWithdrawMethodResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantWithdrawMethod_id(ctx, field)
			case "name":
				return ec.fieldContext_MerchantWithdrawMethod_name(ctx, field)
			case "description":
				return ec.fieldContext_MerchantWithdrawMethod_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantWithdrawMethod_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantWithdrawMethod_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantWithdrawMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMerchantWithdrawMethodResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListMerchantWithdrawMethodResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMerchantWithdrawMethodResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMerchantWithdrawMethodResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMerchantWithdrawMethodResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListMetadata_count(ctx context.Context, field graphql.CollectedField, obj *view.ListMetadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListMetadata_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListMetadata_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListMetadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListRoleResp_roles(ctx context.Context, field graphql.CollectedField, obj *view.ListRoleResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListRoleResp_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListRoleResp_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListRoleResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "name":
				return ec.fieldContext_Role_name(ctx, field)
			case "authority":
				return ec.fieldContext_Role_authority(ctx, field)
			case "supportAccountType":
				return ec.fieldContext_Role_supportAccountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Role_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Role_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListRoleResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListRoleResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListRoleResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListRoleResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListRoleResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSecurityEventResp_securityEvents(ctx context.Context, field graphql.CollectedField, obj *view.ListSecurityEventResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSecurityEventResp_securityEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecurityEvents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.SecurityEvent)
	fc.Result = res
	return ec.marshalNSecurityEvent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSecurityEventResp_securityEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSecurityEventResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SecurityEvent_id(ctx, field)
			case "name":
				return ec.fieldContext_SecurityEvent_name(ctx, field)
			case "description":
				return ec.fieldContext_SecurityEvent_description(ctx, field)
			case "isEnable":
				return ec.fieldContext_SecurityEvent_isEnable(ctx, field)
			case "createdAt":
				return ec.fieldContext_SecurityEvent_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SecurityEvent_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_SecurityEvent_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_SecurityEvent_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SecurityEvent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSecurityEventResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListSecurityEventResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSecurityEventResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSecurityEventResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSecurityEventResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSmsRecordResp_smsRecords(ctx context.Context, field graphql.CollectedField, obj *view.ListSmsRecordResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSmsRecordResp_smsRecords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmsRecords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.SmsRecord)
	fc.Result = res
	return ec.marshalNSmsRecord2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSmsRecordResp_smsRecords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSmsRecordResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SmsRecord_id(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_SmsRecord_phoneNumber(ctx, field)
			case "content":
				return ec.fieldContext_SmsRecord_content(ctx, field)
			case "sendTime":
				return ec.fieldContext_SmsRecord_sendTime(ctx, field)
			case "account":
				return ec.fieldContext_SmsRecord_account(ctx, field)
			case "url":
				return ec.fieldContext_SmsRecord_url(ctx, field)
			case "createdAt":
				return ec.fieldContext_SmsRecord_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_SmsRecord_createUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SmsRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSmsRecordResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListSmsRecordResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSmsRecordResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSmsRecordResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSmsRecordResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSystemLineResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListSystemLineResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSystemLineResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.SystemLine)
	fc.Result = res
	return ec.marshalNSystemLine2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSystemLineResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSystemLineResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemLine_id(ctx, field)
			case "name":
				return ec.fieldContext_SystemLine_name(ctx, field)
			case "description":
				return ec.fieldContext_SystemLine_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemLine_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemLine_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemLine", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSystemLineResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListSystemLineResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSystemLineResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSystemLineResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSystemLineResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTagResp_tags(ctx context.Context, field graphql.CollectedField, obj *view.ListTagResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTagResp_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTagResp_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTagResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "RGBHex":
				return ec.fieldContext_Tag_RGBHex(ctx, field)
			case "isEnable":
				return ec.fieldContext_Tag_isEnable(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Tag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Tag_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTagResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListTagResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTagResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTagResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTagResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTemplateResp_templates(ctx context.Context, field graphql.CollectedField, obj *view.ListTemplateResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTemplateResp_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Templates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTemplateResp_templates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTemplateResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Template_id(ctx, field)
			case "name":
				return ec.fieldContext_Template_name(ctx, field)
			case "content":
				return ec.fieldContext_Template_content(ctx, field)
			case "createdAt":
				return ec.fieldContext_Template_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Template_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Template", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTemplateResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListTemplateResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTemplateResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTemplateResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTemplateResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserLoginHistoryResp_userLoginHistories(ctx context.Context, field graphql.CollectedField, obj *view.ListUserLoginHistoryResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserLoginHistoryResp_userLoginHistories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLoginHistories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserLoginHistory)
	fc.Result = res
	return ec.marshalNUserLoginHistory2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserLoginHistoryResp_userLoginHistories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserLoginHistoryResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserLoginHistory_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserLoginHistory_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserLoginHistory_ipAddress(ctx, field)
			case "country":
				return ec.fieldContext_UserLoginHistory_country(ctx, field)
			case "administrativeArea":
				return ec.fieldContext_UserLoginHistory_administrativeArea(ctx, field)
			case "deviceOS":
				return ec.fieldContext_UserLoginHistory_deviceOS(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserLoginHistory_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserLoginHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserLoginHistoryResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserLoginHistoryResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserLoginHistoryResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalOMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserLoginHistoryResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserLoginHistoryResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserResp_users(ctx context.Context, field graphql.CollectedField, obj *view.ListUserResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserResp_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserResp_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "accountType":
				return ec.fieldContext_User_accountType(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_User_aliasName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "area":
				return ec.fieldContext_User_area(ctx, field)
			case "notes":
				return ec.fieldContext_User_notes(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "lastLoginIP":
				return ec.fieldContext_User_lastLoginIP(ctx, field)
			case "isDelete":
				return ec.fieldContext_User_isDelete(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_User_updateUserID(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "whitelists":
				return ec.fieldContext_User_whitelists(ctx, field)
			case "tags":
				return ec.fieldContext_User_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserRoleResp_userRoles(ctx context.Context, field graphql.CollectedField, obj *view.ListUserRoleResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserRoleResp_userRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRoles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserRole)
	fc.Result = res
	return ec.marshalNUserRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserRoleResp_userRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserRoleResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserRole_userID(ctx, field)
			case "roleID":
				return ec.fieldContext_UserRole_roleID(ctx, field)
			case "isAdmin":
				return ec.fieldContext_UserRole_isAdmin(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserRole_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserRole_updateUserID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserRole_updatedAt(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserRoleResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserRoleResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserRoleResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserRoleResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserRoleResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserTagResp_userTags(ctx context.Context, field graphql.CollectedField, obj *view.ListUserTagResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserTagResp_userTags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserTag)
	fc.Result = res
	return ec.marshalNUserTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserTagResp_userTags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserTagResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserTag_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserTag_userID(ctx, field)
			case "tagID":
				return ec.fieldContext_UserTag_tagID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserTag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserTag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserTag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserTag_updateUserID(ctx, field)
			case "tag":
				return ec.fieldContext_UserTag_tag(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserTag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserTagResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserTagResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserTagResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserTagResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserTagResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserWhitelistResp_userWhitelists(ctx context.Context, field graphql.CollectedField, obj *view.ListUserWhitelistResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserWhitelistResp_userWhitelists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserWhitelists, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserWhitelist)
	fc.Result = res
	return ec.marshalNUserWhitelist2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserWhitelistResp_userWhitelists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserWhitelistResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserWhitelist_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserWhitelist_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserWhitelist_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserWhitelist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListUserWhitelistResp_meta(ctx context.Context, field graphql.CollectedField, obj *view.ListUserWhitelistResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListUserWhitelistResp_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListUserWhitelistResp_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListUserWhitelistResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Meta_total(ctx, field)
			case "page":
				return ec.fieldContext_Meta_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Meta_perPage(ctx, field)
			case "totalPage":
				return ec.fieldContext_Meta_totalPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListVipClaimLogResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListVipClaimLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListVipClaimLogResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.VipClaimLog)
	fc.Result = res
	return ec.marshalNVipClaimLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipClaimLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListVipClaimLogResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListVipClaimLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_VipClaimLog_id(ctx, field)
			case "userID":
				return ec.fieldContext_VipClaimLog_userID(ctx, field)
			case "vipLevelID":
				return ec.fieldContext_VipClaimLog_vipLevelID(ctx, field)
			case "claimAt":
				return ec.fieldContext_VipClaimLog_claimAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_VipClaimLog_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_VipClaimLog_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VipClaimLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListVipClaimLogResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListVipClaimLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListVipClaimLogResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListVipClaimLogResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListVipClaimLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListVipLevelResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListVipLevelResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListVipLevelResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.VipLevel)
	fc.Result = res
	return ec.marshalNVipLevel2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListVipLevelResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListVipLevelResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_VipLevel_id(ctx, field)
			case "name":
				return ec.fieldContext_VipLevel_name(ctx, field)
			case "description":
				return ec.fieldContext_VipLevel_description(ctx, field)
			case "icon":
				return ec.fieldContext_VipLevel_icon(ctx, field)
			case "sort":
				return ec.fieldContext_VipLevel_sort(ctx, field)
			case "createdAt":
				return ec.fieldContext_VipLevel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_VipLevel_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VipLevel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListVipLevelResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListVipLevelResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListVipLevelResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListVipLevelResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListVipLevelResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListVipUpgradeLogResp_list(ctx context.Context, field graphql.CollectedField, obj *view.ListVipUpgradeLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListVipUpgradeLogResp_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.VipUpgradeLog)
	fc.Result = res
	return ec.marshalNVipUpgradeLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipUpgradeLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListVipUpgradeLogResp_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListVipUpgradeLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_VipUpgradeLog_id(ctx, field)
			case "userID":
				return ec.fieldContext_VipUpgradeLog_userID(ctx, field)
			case "vipLevelID":
				return ec.fieldContext_VipUpgradeLog_vipLevelID(ctx, field)
			case "upgradeAt":
				return ec.fieldContext_VipUpgradeLog_upgradeAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_VipUpgradeLog_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_VipUpgradeLog_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VipUpgradeLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListVipUpgradeLogResp_total(ctx context.Context, field graphql.CollectedField, obj *view.ListVipUpgradeLogResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListVipUpgradeLogResp_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListVipUpgradeLogResp_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListVipUpgradeLogResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginResp_token(ctx context.Context, field graphql.CollectedField, obj *view.LoginResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginResp_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginResp_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginResp_deviceUID(ctx context.Context, field graphql.CollectedField, obj *view.LoginResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginResp_deviceUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginResp_deviceUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginResp_userAgent(ctx context.Context, field graphql.CollectedField, obj *view.LoginResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginResp_userAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginResp_userAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_name(ctx context.Context, field graphql.CollectedField, obj *view.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_key(ctx context.Context, field graphql.CollectedField, obj *view.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_superKey(ctx context.Context, field graphql.CollectedField, obj *view.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_superKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_superKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Menu_next(ctx context.Context, field graphql.CollectedField, obj *view.Menu) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Menu_next(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Next, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Menu)
	fc.Result = res
	return ec.marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Menu_next(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Menu",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Menu_name(ctx, field)
			case "key":
				return ec.fieldContext_Menu_key(ctx, field)
			case "superKey":
				return ec.fieldContext_Menu_superKey(ctx, field)
			case "next":
				return ec.fieldContext_Menu_next(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Menu", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Merchant_id(ctx context.Context, field graphql.CollectedField, obj *view.Merchant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Merchant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Merchant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Merchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Merchant_name(ctx context.Context, field graphql.CollectedField, obj *view.Merchant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Merchant_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Merchant_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Merchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Merchant_description(ctx context.Context, field graphql.CollectedField, obj *view.Merchant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Merchant_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Merchant_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Merchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Merchant_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.Merchant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Merchant_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Merchant_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Merchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Merchant_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.Merchant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Merchant_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Merchant_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Merchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantBalanceLog_id(ctx context.Context, field graphql.CollectedField, obj *view.MerchantBalanceLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantBalanceLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantBalanceLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantBalanceLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantBalanceLog_merchantId(ctx context.Context, field graphql.CollectedField, obj *view.MerchantBalanceLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantBalanceLog_merchantId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantBalanceLog_merchantId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantBalanceLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantBalanceLog_amount(ctx context.Context, field graphql.CollectedField, obj *view.MerchantBalanceLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantBalanceLog_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(decimal.Decimal)
	fc.Result = res
	return ec.marshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantBalanceLog_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantBalanceLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantBalanceLog_description(ctx context.Context, field graphql.CollectedField, obj *view.MerchantBalanceLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantBalanceLog_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantBalanceLog_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantBalanceLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantBalanceLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantBalanceLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantBalanceLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantBalanceLog_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantBalanceLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantBalanceLog_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantBalanceLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantBalanceLog_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantBalanceLog_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantBalanceLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositLog_id(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositLog_merchantId(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositLog_merchantId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositLog_merchantId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositLog_amount(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositLog_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(decimal.Decimal)
	fc.Result = res
	return ec.marshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositLog_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositLog_description(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositLog_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositLog_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositLog_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositLog_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositLog_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositLog_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositMethod_id(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositMethod_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositMethod_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositMethod_name(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositMethod_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositMethod_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositMethod_description(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositMethod_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositMethod_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositMethod_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositMethod_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositMethod_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantDepositMethod_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantDepositMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantDepositMethod_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantDepositMethod_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantDepositMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantFeeMode_id(ctx context.Context, field graphql.CollectedField, obj *view.MerchantFeeMode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantFeeMode_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantFeeMode_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantFeeMode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantFeeMode_name(ctx context.Context, field graphql.CollectedField, obj *view.MerchantFeeMode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantFeeMode_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantFeeMode_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantFeeMode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantFeeMode_description(ctx context.Context, field graphql.CollectedField, obj *view.MerchantFeeMode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantFeeMode_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantFeeMode_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantFeeMode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantFeeMode_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantFeeMode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantFeeMode_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantFeeMode_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantFeeMode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantFeeMode_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantFeeMode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantFeeMode_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantFeeMode_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantFeeMode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLine_id(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLine_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLine_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLine_name(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLine_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLine_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLine_description(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLine_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLine_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLine_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLine_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLine_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLine_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLine_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLine_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLoginHistory_id(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLoginHistory_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLoginHistory_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLoginHistory_merchantId(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLoginHistory_merchantId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLoginHistory_merchantId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLoginHistory_ip(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLoginHistory_ip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLoginHistory_ip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLoginHistory_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLoginHistory_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLoginHistory_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantLoginHistory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantLoginHistory_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantLoginHistory_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawLog_id(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawLog_merchantId(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawLog_merchantId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawLog_merchantId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawLog_amount(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawLog_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(decimal.Decimal)
	fc.Result = res
	return ec.marshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawLog_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawLog_description(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawLog_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawLog_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawLog_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawLog_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawLog_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawLog_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawMethod_id(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawMethod_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawMethod_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawMethod_name(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawMethod_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawMethod_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawMethod_description(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawMethod_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawMethod_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawMethod_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawMethod_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawMethod_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantWithdrawMethod_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.MerchantWithdrawMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MerchantWithdrawMethod_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MerchantWithdrawMethod_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantWithdrawMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_total(ctx context.Context, field graphql.CollectedField, obj *view.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_page(ctx context.Context, field graphql.CollectedField, obj *view.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_perPage(ctx context.Context, field graphql.CollectedField, obj *view.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_perPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_perPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_totalPage(ctx context.Context, field graphql.CollectedField, obj *view.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_totalPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_totalPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAgent(rctx, fc.Args["in"].(view.AgentCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAgent(rctx, fc.Args["filter"].(view.AgentFilterInput), fc.Args["in"].(view.AgentUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAgent(rctx, fc.Args["filter"].(view.AgentFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGeneralAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGeneralAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGeneralAgent(rctx, fc.Args["in"].(view.GeneralAgentCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGeneralAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGeneralAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGeneralAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGeneralAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGeneralAgent(rctx, fc.Args["filter"].(view.GeneralAgentFilterInput), fc.Args["in"].(view.GeneralAgentUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGeneralAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGeneralAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGeneralAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGeneralAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteGeneralAgent(rctx, fc.Args["filter"].(view.GeneralAgentFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGeneralAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGeneralAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateCommonUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateCommonUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCommonUser(rctx, fc.Args["in"].(view.CreateCommonUserReqInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.CreateCommonUserResp)
	fc.Result = res
	return ec.marshalNCreateCommonUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateCommonUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_CreateCommonUserResp_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateCommonUserResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateCommonUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, fc.Args["in"].(view.LoginReqInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.LoginResp)
	fc.Result = res
	return ec.marshalNLoginResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_LoginResp_token(ctx, field)
			case "deviceUID":
				return ec.fieldContext_LoginResp_deviceUID(ctx, field)
			case "userAgent":
				return ec.fieldContext_LoginResp_userAgent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LoginResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Logout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Logout(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Logout(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_RefreshToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_RefreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RefreshToken(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.RefreshTokenResp)
	fc.Result = res
	return ec.marshalNRefreshTokenResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRefreshTokenResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_RefreshToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_RefreshTokenResp_token(ctx, field)
			case "expires":
				return ec.fieldContext_RefreshTokenResp_expires(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RefreshTokenResp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEvent(rctx, fc.Args["in"].(view.EventCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEvent(rctx, fc.Args["filter"].(view.EventFilterInput), fc.Args["in"].(view.EventUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEvent(rctx, fc.Args["filter"].(view.EventFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemLine(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSystemLine(rctx, fc.Args["in"].(view.SystemLineCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemLine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemLine_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemLine(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemLine(rctx, fc.Args["filter"].(view.SystemLineFilterInput), fc.Args["in"].(view.SystemLineUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemLine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemLine_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSystemLine(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSystemLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemLine(rctx, fc.Args["filter"].(view.SystemLineFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSystemLine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSystemLine_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMerchantLine(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMerchantLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMerchantLine(rctx, fc.Args["in"].(view.MerchantLineCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMerchantLine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMerchantLine_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMerchantLine(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMerchantLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMerchantLine(rctx, fc.Args["filter"].(view.MerchantLineFilterInput), fc.Args["in"].(view.MerchantLineUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMerchantLine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMerchantLine_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMerchantLine(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMerchantLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMerchantLine(rctx, fc.Args["filter"].(view.MerchantLineFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMerchantLine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMerchantLine_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLineRent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createLineRent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLineRent(rctx, fc.Args["in"].(view.LineRentCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createLineRent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLineRent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLineRent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLineRent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLineRent(rctx, fc.Args["filter"].(view.LineRentFilterInput), fc.Args["in"].(view.LineRentUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLineRent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLineRent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLineRent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteLineRent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLineRent(rctx, fc.Args["filter"].(view.LineRentFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteLineRent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLineRent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLineRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createLineRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLineRate(rctx, fc.Args["in"].(view.LineRateCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createLineRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLineRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLineRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLineRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLineRate(rctx, fc.Args["filter"].(view.LineRateFilterInput), fc.Args["in"].(view.LineRateUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLineRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLineRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLineRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteLineRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLineRate(rctx, fc.Args["filter"].(view.LineRateFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteLineRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLineRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGame(rctx, fc.Args["in"].(view.GameCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGame(rctx, fc.Args["filter"].(view.GameFilterInput), fc.Args["in"].(view.GameUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteGame(rctx, fc.Args["filter"].(view.GameFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMerchant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMerchant(rctx, fc.Args["in"].(view.MerchantCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMerchant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMerchant(rctx, fc.Args["filter"].(view.MerchantFilterInput), fc.Args["in"].(view.MerchantUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMerchant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMerchant(rctx, fc.Args["filter"].(view.MerchantFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMerchantWithdrawMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMerchantWithdrawMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMerchantWithdrawMethod(rctx, fc.Args["in"].(view.MerchantWithdrawMethodCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMerchantWithdrawMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMerchantWithdrawMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMerchantWithdrawMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMerchantWithdrawMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMerchantWithdrawMethod(rctx, fc.Args["filter"].(view.MerchantWithdrawMethodFilterInput), fc.Args["in"].(view.MerchantWithdrawMethodUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMerchantWithdrawMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMerchantWithdrawMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMerchantWithdrawMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMerchantWithdrawMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMerchantWithdrawMethod(rctx, fc.Args["filter"].(view.MerchantWithdrawMethodFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMerchantWithdrawMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMerchantWithdrawMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMerchantDepositMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMerchantDepositMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMerchantDepositMethod(rctx, fc.Args["in"].(view.MerchantDepositMethodCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMerchantDepositMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMerchantDepositMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMerchantDepositMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMerchantDepositMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMerchantDepositMethod(rctx, fc.Args["filter"].(view.MerchantDepositMethodFilterInput), fc.Args["in"].(view.MerchantDepositMethodUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMerchantDepositMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMerchantDepositMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMerchantDepositMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMerchantDepositMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMerchantDepositMethod(rctx, fc.Args["filter"].(view.MerchantDepositMethodFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMerchantDepositMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMerchantDepositMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMerchantFeeMode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMerchantFeeMode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMerchantFeeMode(rctx, fc.Args["in"].(view.MerchantFeeModeCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMerchantFeeMode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMerchantFeeMode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMerchantFeeMode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMerchantFeeMode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMerchantFeeMode(rctx, fc.Args["filter"].(view.MerchantFeeModeFilterInput), fc.Args["in"].(view.MerchantFeeModeUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMerchantFeeMode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMerchantFeeMode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMerchantFeeMode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMerchantFeeMode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMerchantFeeMode(rctx, fc.Args["filter"].(view.MerchantFeeModeFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMerchantFeeMode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMerchantFeeMode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_applyMerchantBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_applyMerchantBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApplyMerchantBalance(rctx, fc.Args["in"].(view.MerchantBalanceApplyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_applyMerchantBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_applyMerchantBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_auditMerchantBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_auditMerchantBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuditMerchantBalance(rctx, fc.Args["filter"].(view.MerchantBalanceFilterInput), fc.Args["in"].(view.MerchantBalanceAuditInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_auditMerchantBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_auditMerchantBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRole(rctx, fc.Args["in"].(view.RoleCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRole(rctx, fc.Args["filter"].(view.RoleFilterInput), fc.Args["in"].(view.RoleUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRole(rctx, fc.Args["filter"].(view.RoleFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateHostsDeny(rctx, fc.Args["in"].(view.HostsDenyCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.HostsDeny)
	fc.Result = res
	return ec.marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HostsDeny_id(ctx, field)
			case "ipAddress":
				return ec.fieldContext_HostsDeny_ipAddress(ctx, field)
			case "isEnabled":
				return ec.fieldContext_HostsDeny_isEnabled(ctx, field)
			case "remark":
				return ec.fieldContext_HostsDeny_remark(ctx, field)
			case "createdAt":
				return ec.fieldContext_HostsDeny_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_HostsDeny_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HostsDeny_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_HostsDeny_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HostsDeny", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateHostsDeny(rctx, fc.Args["filter"].(view.HostsDenyFilterInput), fc.Args["in"].(view.HostsDenyUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.HostsDeny)
	fc.Result = res
	return ec.marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HostsDeny_id(ctx, field)
			case "ipAddress":
				return ec.fieldContext_HostsDeny_ipAddress(ctx, field)
			case "isEnabled":
				return ec.fieldContext_HostsDeny_isEnabled(ctx, field)
			case "remark":
				return ec.fieldContext_HostsDeny_remark(ctx, field)
			case "createdAt":
				return ec.fieldContext_HostsDeny_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_HostsDeny_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HostsDeny_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_HostsDeny_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HostsDeny", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteHostsDeny(rctx, fc.Args["filter"].(view.HostsDenyFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_configSms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_configSms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigSms(rctx, fc.Args["in"].(view.SmsConfigInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_configSms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_configSms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_configEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_configEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigEmail(rctx, fc.Args["in"].(view.EmailConfigInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_configEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_configEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTemplate(rctx, fc.Args["in"].(view.TemplateCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTemplate(rctx, fc.Args["filter"].(view.TemplateFilterInput), fc.Args["in"].(view.TemplateUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTemplate(rctx, fc.Args["filter"].(view.TemplateFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTag(rctx, fc.Args["in"].(view.TagCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTag(rctx, fc.Args["filter"].(view.TagFilterInput), fc.Args["in"].(view.TagUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTag(rctx, fc.Args["filter"].(view.TagFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSecurityEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSecurityEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSecurityEvent(rctx, fc.Args["in"].(view.SecurityEventCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSecurityEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSecurityEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSecurityEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSecurityEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSecurityEvent(rctx, fc.Args["filter"].(view.SecurityEventFilterInput), fc.Args["in"].(view.SecurityEventUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSecurityEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSecurityEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSecurityEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSecurityEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSecurityEvent(rctx, fc.Args["filter"].(view.SecurityEventFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSecurityEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSecurityEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["in"].(view.CreateUserReqInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.CreateUserResp)
	fc.Result = res
	return ec.marshalNCreateUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_CreateUserResp_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateUserResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["filter"].(view.UserFilterInput), fc.Args["in"].(view.UserUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, fc.Args["filter"].(view.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserPassword(rctx, fc.Args["in"].(view.UserUpdatePasswordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserWhitelist(rctx, fc.Args["in"].(view.UserWhitelistCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserWhitelist(rctx, fc.Args["filter"].(view.UserWhitelistFilterInput), fc.Args["in"].(view.UserWhitelistUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserWhitelist(rctx, fc.Args["filter"].(view.UserWhitelistFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserRole(rctx, fc.Args["in"].(view.UserRoleCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserRole(rctx, fc.Args["filter"].(view.UserRoleFilterInput), fc.Args["in"].(view.UserRoleUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserRole(rctx, fc.Args["filter"].(view.UserRoleFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserTag(rctx, fc.Args["in"].(view.UserTagCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserTag(rctx, fc.Args["filter"].(view.UserTagFilterInput), fc.Args["in"].(view.UserTagUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserTag(rctx, fc.Args["filter"].(view.UserTagFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_banUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_banUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BanUser(rctx, fc.Args["filter"].(view.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_banUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_banUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unbanUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unbanUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnbanUser(rctx, fc.Args["filter"].(view.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unbanUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unbanUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createVipLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createVipLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVipLevel(rctx, fc.Args["in"].(view.VipLevelCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createVipLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createVipLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateVipLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateVipLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVipLevel(rctx, fc.Args["filter"].(view.VipLevelFilterInput), fc.Args["in"].(view.VipLevelUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateVipLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateVipLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteVipLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteVipLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVipLevel(rctx, fc.Args["filter"].(view.VipLevelFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteVipLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteVipLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_claimVipReward(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_claimVipReward(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ClaimVipReward(rctx, fc.Args["in"].(view.ClaimVipRewardInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_claimVipReward(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_claimVipReward_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_Me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Me(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Me(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Claims)
	fc.Result = res
	return ec.marshalNClaims2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐClaims(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Me(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Claims_id(ctx, field)
			case "accountType":
				return ec.fieldContext_Claims_accountType(ctx, field)
			case "status":
				return ec.fieldContext_Claims_status(ctx, field)
			case "username":
				return ec.fieldContext_Claims_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_Claims_aliasName(ctx, field)
			case "avatarURL":
				return ec.fieldContext_Claims_avatarURL(ctx, field)
			case "whitelists":
				return ec.fieldContext_Claims_whitelists(ctx, field)
			case "menu":
				return ec.fieldContext_Claims_menu(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Claims", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListEvent(rctx, fc.Args["filter"].(view.EventFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListEventResp)
	fc.Result = res
	return ec.marshalNListEventResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListEventResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "events":
				return ec.fieldContext_ListEventResp_events(ctx, field)
			case "meta":
				return ec.fieldContext_ListEventResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListEventResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listHistoryEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listHistoryEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListHistoryEvent(rctx, fc.Args["filter"].(view.EventFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListEventResp)
	fc.Result = res
	return ec.marshalNListEventResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListEventResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listHistoryEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "events":
				return ec.fieldContext_ListEventResp_events(ctx, field)
			case "meta":
				return ec.fieldContext_ListEventResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListEventResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listHistoryEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listGamePlayer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listGamePlayer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListGamePlayer(rctx, fc.Args["filter"].(view.GamePlayerFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListGamePlayerResp)
	fc.Result = res
	return ec.marshalNListGamePlayerResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGamePlayerResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listGamePlayer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "players":
				return ec.fieldContext_ListGamePlayerResp_players(ctx, field)
			case "meta":
				return ec.fieldContext_ListGamePlayerResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListGamePlayerResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listGamePlayer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listGameTransferRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listGameTransferRecord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListGameTransferRecord(rctx, fc.Args["filter"].(view.GameTransferRecordFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListGameTransferRecordResp)
	fc.Result = res
	return ec.marshalNListGameTransferRecordResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGameTransferRecordResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listGameTransferRecord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "records":
				return ec.fieldContext_ListGameTransferRecordResp_records(ctx, field)
			case "meta":
				return ec.fieldContext_ListGameTransferRecordResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListGameTransferRecordResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listGameTransferRecord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listSystemLine(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listSystemLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListSystemLine(rctx, fc.Args["filter"].(*view.SystemLineFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListSystemLineResp)
	fc.Result = res
	return ec.marshalNListSystemLineResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListSystemLineResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listSystemLine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListSystemLineResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListSystemLineResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListSystemLineResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listSystemLine_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMerchantLine(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMerchantLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMerchantLine(rctx, fc.Args["filter"].(*view.MerchantLineFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListMerchantLineResp)
	fc.Result = res
	return ec.marshalNListMerchantLineResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantLineResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMerchantLine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListMerchantLineResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListMerchantLineResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListMerchantLineResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMerchantLine_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listLineRent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listLineRent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListLineRent(rctx, fc.Args["filter"].(*view.LineRentFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListLineRentResp)
	fc.Result = res
	return ec.marshalNListLineRentResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListLineRentResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listLineRent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListLineRentResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListLineRentResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListLineRentResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listLineRent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listLineRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listLineRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListLineRate(rctx, fc.Args["filter"].(*view.LineRateFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListLineRateResp)
	fc.Result = res
	return ec.marshalNListLineRateResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListLineRateResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listLineRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListLineRateResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListLineRateResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListLineRateResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listLineRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listLineRateHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listLineRateHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListLineRateHistory(rctx, fc.Args["filter"].(*view.LineRateHistoryFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListLineRateHistoryResp)
	fc.Result = res
	return ec.marshalNListLineRateHistoryResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListLineRateHistoryResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listLineRateHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListLineRateHistoryResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListLineRateHistoryResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListLineRateHistoryResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listLineRateHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListGame(rctx, fc.Args["filter"].(*view.GameFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListGameResp)
	fc.Result = res
	return ec.marshalNListGameResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGameResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListGameResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListGameResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListGameResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listHubClients(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listHubClients(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListHubClients(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.HubClient)
	fc.Result = res
	return ec.marshalNHubClient2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubClientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listHubClients(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userID":
				return ec.fieldContext_HubClient_userID(ctx, field)
			case "devices":
				return ec.fieldContext_HubClient_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HubClient", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMenu(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMenu(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMenu(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Menu)
	fc.Result = res
	return ec.marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMenu(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Menu_name(ctx, field)
			case "key":
				return ec.fieldContext_Menu_key(ctx, field)
			case "superKey":
				return ec.fieldContext_Menu_superKey(ctx, field)
			case "next":
				return ec.fieldContext_Menu_next(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Menu", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMerchant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMerchant(rctx, fc.Args["filter"].(*view.MerchantFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListMerchantResp)
	fc.Result = res
	return ec.marshalNListMerchantResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListMerchantResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListMerchantResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListMerchantResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMerchantWithdrawMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMerchantWithdrawMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMerchantWithdrawMethod(rctx, fc.Args["filter"].(*view.MerchantWithdrawMethodFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListMerchantWithdrawMethodResp)
	fc.Result = res
	return ec.marshalNListMerchantWithdrawMethodResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantWithdrawMethodResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMerchantWithdrawMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListMerchantWithdrawMethodResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListMerchantWithdrawMethodResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListMerchantWithdrawMethodResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMerchantWithdrawMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMerchantDepositMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMerchantDepositMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMerchantDepositMethod(rctx, fc.Args["filter"].(*view.MerchantDepositMethodFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListMerchantDepositMethodResp)
	fc.Result = res
	return ec.marshalNListMerchantDepositMethodResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantDepositMethodResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMerchantDepositMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListMerchantDepositMethodResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListMerchantDepositMethodResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListMerchantDepositMethodResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMerchantDepositMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMerchantFeeMode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMerchantFeeMode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMerchantFeeMode(rctx, fc.Args["filter"].(*view.MerchantFeeModeFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListMerchantFeeModeResp)
	fc.Result = res
	return ec.marshalNListMerchantFeeModeResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantFeeModeResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMerchantFeeMode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListMerchantFeeModeResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListMerchantFeeModeResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListMerchantFeeModeResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMerchantFeeMode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMerchantBalanceLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMerchantBalanceLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMerchantBalanceLog(rctx, fc.Args["filter"].(*view.MerchantBalanceLogFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListMerchantBalanceLogResp)
	fc.Result = res
	return ec.marshalNListMerchantBalanceLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantBalanceLogResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMerchantBalanceLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListMerchantBalanceLogResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListMerchantBalanceLogResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListMerchantBalanceLogResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMerchantBalanceLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMerchantWithdrawLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMerchantWithdrawLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMerchantWithdrawLog(rctx, fc.Args["filter"].(*view.MerchantWithdrawLogFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListMerchantWithdrawLogResp)
	fc.Result = res
	return ec.marshalNListMerchantWithdrawLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantWithdrawLogResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMerchantWithdrawLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListMerchantWithdrawLogResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListMerchantWithdrawLogResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListMerchantWithdrawLogResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMerchantWithdrawLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMerchantDepositLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMerchantDepositLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMerchantDepositLog(rctx, fc.Args["filter"].(*view.MerchantDepositLogFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListMerchantDepositLogResp)
	fc.Result = res
	return ec.marshalNListMerchantDepositLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantDepositLogResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMerchantDepositLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListMerchantDepositLogResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListMerchantDepositLogResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListMerchantDepositLogResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMerchantDepositLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMerchantLoginHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMerchantLoginHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMerchantLoginHistory(rctx, fc.Args["filter"].(*view.MerchantLoginHistoryFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListMerchantLoginHistoryResp)
	fc.Result = res
	return ec.marshalNListMerchantLoginHistoryResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantLoginHistoryResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMerchantLoginHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListMerchantLoginHistoryResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListMerchantLoginHistoryResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListMerchantLoginHistoryResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMerchantLoginHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRole(rctx, fc.Args["filter"].(view.RoleFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Role)
	fc.Result = res
	return ec.marshalNRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "name":
				return ec.fieldContext_Role_name(ctx, field)
			case "authority":
				return ec.fieldContext_Role_authority(ctx, field)
			case "supportAccountType":
				return ec.fieldContext_Role_supportAccountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Role_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Role_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListRole(rctx, fc.Args["filter"].(view.RoleFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListRoleResp)
	fc.Result = res
	return ec.marshalNListRoleResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListRoleResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "roles":
				return ec.fieldContext_ListRoleResp_roles(ctx, field)
			case "meta":
				return ec.fieldContext_ListRoleResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListRoleResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHostsDeny(rctx, fc.Args["filter"].(view.HostsDenyFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.HostsDeny)
	fc.Result = res
	return ec.marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HostsDeny_id(ctx, field)
			case "ipAddress":
				return ec.fieldContext_HostsDeny_ipAddress(ctx, field)
			case "isEnabled":
				return ec.fieldContext_HostsDeny_isEnabled(ctx, field)
			case "remark":
				return ec.fieldContext_HostsDeny_remark(ctx, field)
			case "createdAt":
				return ec.fieldContext_HostsDeny_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_HostsDeny_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HostsDeny_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_HostsDeny_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HostsDeny", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listHostsDeny(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listHostsDeny(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListHostsDeny(rctx, fc.Args["filter"].(*view.HostsDenyFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListHostsDenyResp)
	fc.Result = res
	return ec.marshalNListHostsDenyResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListHostsDenyResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listHostsDeny(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hostsDenys":
				return ec.fieldContext_ListHostsDenyResp_hostsDenys(ctx, field)
			case "meta":
				return ec.fieldContext_ListHostsDenyResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListHostsDenyResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listHostsDeny_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListTemplate(rctx, fc.Args["filter"].(view.TemplateFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListTemplateResp)
	fc.Result = res
	return ec.marshalNListTemplateResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListTemplateResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "templates":
				return ec.fieldContext_ListTemplateResp_templates(ctx, field)
			case "meta":
				return ec.fieldContext_ListTemplateResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListTemplateResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listAuditLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listAuditLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListAuditLog(rctx, fc.Args["filter"].(view.AuditLogFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListAuditLogResp)
	fc.Result = res
	return ec.marshalNListAuditLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListAuditLogResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listAuditLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "auditLogs":
				return ec.fieldContext_ListAuditLogResp_auditLogs(ctx, field)
			case "meta":
				return ec.fieldContext_ListAuditLogResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListAuditLogResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listAuditLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTag(rctx, fc.Args["filter"].(view.TagFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "RGBHex":
				return ec.fieldContext_Tag_RGBHex(ctx, field)
			case "isEnable":
				return ec.fieldContext_Tag_isEnable(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Tag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Tag_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListTag(rctx, fc.Args["filter"].(view.TagFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListTagResp)
	fc.Result = res
	return ec.marshalNListTagResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListTagResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tags":
				return ec.fieldContext_ListTagResp_tags(ctx, field)
			case "meta":
				return ec.fieldContext_ListTagResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListTagResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listSecurityEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listSecurityEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListSecurityEvent(rctx, fc.Args["filter"].(view.SecurityEventFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListSecurityEventResp)
	fc.Result = res
	return ec.marshalNListSecurityEventResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListSecurityEventResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listSecurityEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "securityEvents":
				return ec.fieldContext_ListSecurityEventResp_securityEvents(ctx, field)
			case "meta":
				return ec.fieldContext_ListSecurityEventResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListSecurityEventResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listSecurityEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSmsConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSmsConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSmsConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.SmsConfig)
	fc.Result = res
	return ec.marshalNSmsConfig2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSmsConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_SmsConfig_account(ctx, field)
			case "url":
				return ec.fieldContext_SmsConfig_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SmsConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listSmsRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listSmsRecord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListSmsRecord(rctx, fc.Args["filter"].(view.SmsRecordFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListSmsRecordResp)
	fc.Result = res
	return ec.marshalNListSmsRecordResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListSmsRecordResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listSmsRecord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "smsRecords":
				return ec.fieldContext_ListSmsRecordResp_smsRecords(ctx, field)
			case "meta":
				return ec.fieldContext_ListSmsRecordResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListSmsRecordResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listSmsRecord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getEmailConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getEmailConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetEmailConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.EmailConfig)
	fc.Result = res
	return ec.marshalNEmailConfig2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getEmailConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "smtpServer":
				return ec.fieldContext_EmailConfig_smtpServer(ctx, field)
			case "smtpPort":
				return ec.fieldContext_EmailConfig_smtpPort(ctx, field)
			case "smtpUser":
				return ec.fieldContext_EmailConfig_smtpUser(ctx, field)
			case "smtpFrom":
				return ec.fieldContext_EmailConfig_smtpFrom(ctx, field)
			case "smtpFromName":
				return ec.fieldContext_EmailConfig_smtpFromName(ctx, field)
			case "smtpSSL":
				return ec.fieldContext_EmailConfig_smtpSSL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmailConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listEmailRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listEmailRecord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListEmailRecord(rctx, fc.Args["filter"].(view.EmailRecordFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListEmailRecordResp)
	fc.Result = res
	return ec.marshalNListEmailRecordResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListEmailRecordResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listEmailRecord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emailRecords":
				return ec.fieldContext_ListEmailRecordResp_emailRecords(ctx, field)
			case "meta":
				return ec.fieldContext_ListEmailRecordResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListEmailRecordResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listEmailRecord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUser(rctx, fc.Args["filter"].(view.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.User)
	fc.Result = res
	return ec.marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "accountType":
				return ec.fieldContext_User_accountType(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "aliasName":
				return ec.fieldContext_User_aliasName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "area":
				return ec.fieldContext_User_area(ctx, field)
			case "notes":
				return ec.fieldContext_User_notes(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "lastLoginAt":
				return ec.fieldContext_User_lastLoginAt(ctx, field)
			case "lastLoginIP":
				return ec.fieldContext_User_lastLoginIP(ctx, field)
			case "isDelete":
				return ec.fieldContext_User_isDelete(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_User_updateUserID(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "whitelists":
				return ec.fieldContext_User_whitelists(ctx, field)
			case "tags":
				return ec.fieldContext_User_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUser(rctx, fc.Args["filter"].(view.UserFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserResp)
	fc.Result = res
	return ec.marshalNListUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "users":
				return ec.fieldContext_ListUserResp_users(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserWhitelist(rctx, fc.Args["filter"].(view.UserWhitelistFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.UserWhitelist)
	fc.Result = res
	return ec.marshalNUserWhitelist2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelist(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserWhitelist_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserWhitelist_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserWhitelist_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserWhitelist", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserWhitelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserWhitelist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserWhitelist(rctx, fc.Args["filter"].(view.UserWhitelistFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserWhitelistResp)
	fc.Result = res
	return ec.marshalNListUserWhitelistResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserWhitelistResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserWhitelist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userWhitelists":
				return ec.fieldContext_ListUserWhitelistResp_userWhitelists(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserWhitelistResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserWhitelistResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUserWhitelist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserRole(rctx, fc.Args["filter"].(view.UserRoleFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.UserRole)
	fc.Result = res
	return ec.marshalNUserRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserRole_userID(ctx, field)
			case "roleID":
				return ec.fieldContext_UserRole_roleID(ctx, field)
			case "isAdmin":
				return ec.fieldContext_UserRole_isAdmin(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserRole_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserRole_updateUserID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserRole_updatedAt(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserRole(rctx, fc.Args["filter"].(view.UserRoleFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserRoleResp)
	fc.Result = res
	return ec.marshalNListUserRoleResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserRoleResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userRoles":
				return ec.fieldContext_ListUserRoleResp_userRoles(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserRoleResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserRoleResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserTag(rctx, fc.Args["filter"].(view.UserTagFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.UserTag)
	fc.Result = res
	return ec.marshalNUserTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserTag_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserTag_userID(ctx, field)
			case "tagID":
				return ec.fieldContext_UserTag_tagID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserTag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserTag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserTag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserTag_updateUserID(ctx, field)
			case "tag":
				return ec.fieldContext_UserTag_tag(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserTag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserTag(rctx, fc.Args["filter"].(view.UserTagFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserTagResp)
	fc.Result = res
	return ec.marshalNListUserTagResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserTagResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userTags":
				return ec.fieldContext_ListUserTagResp_userTags(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserTagResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserTagResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUserTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserLoginHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserLoginHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserLoginHistory(rctx, fc.Args["filter"].(view.UserLoginHistoryFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListUserLoginHistoryResp)
	fc.Result = res
	return ec.marshalNListUserLoginHistoryResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserLoginHistoryResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserLoginHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userLoginHistories":
				return ec.fieldContext_ListUserLoginHistoryResp_userLoginHistories(ctx, field)
			case "meta":
				return ec.fieldContext_ListUserLoginHistoryResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListUserLoginHistoryResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUserLoginHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_userWithdrawInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userWithdrawInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserWithdrawInfo(rctx, fc.Args["filter"].(view.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.UserWithdrawInfo)
	fc.Result = res
	return ec.marshalNUserWithdrawInfo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWithdrawInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userWithdrawInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserWithdrawInfo_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserWithdrawInfo_userID(ctx, field)
			case "bankName":
				return ec.fieldContext_UserWithdrawInfo_bankName(ctx, field)
			case "bankBranch":
				return ec.fieldContext_UserWithdrawInfo_bankBranch(ctx, field)
			case "bankAccount":
				return ec.fieldContext_UserWithdrawInfo_bankAccount(ctx, field)
			case "bankAccountName":
				return ec.fieldContext_UserWithdrawInfo_bankAccountName(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserWithdrawInfo_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserWithdrawInfo_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserWithdrawInfo_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserWithdrawInfo_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserWithdrawInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userWithdrawInfo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_userDepositInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userDepositInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserDepositInfo(rctx, fc.Args["filter"].(view.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.UserDepositInfo)
	fc.Result = res
	return ec.marshalNUserDepositInfo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserDepositInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userDepositInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserDepositInfo_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserDepositInfo_userID(ctx, field)
			case "bankName":
				return ec.fieldContext_UserDepositInfo_bankName(ctx, field)
			case "bankBranch":
				return ec.fieldContext_UserDepositInfo_bankBranch(ctx, field)
			case "bankAccount":
				return ec.fieldContext_UserDepositInfo_bankAccount(ctx, field)
			case "bankAccountName":
				return ec.fieldContext_UserDepositInfo_bankAccountName(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserDepositInfo_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserDepositInfo_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserDepositInfo_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserDepositInfo_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserDepositInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userDepositInfo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_userScore(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserScore(rctx, fc.Args["filter"].(view.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.UserScore)
	fc.Result = res
	return ec.marshalNUserScore2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserScore(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserScore_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserScore_userID(ctx, field)
			case "score":
				return ec.fieldContext_UserScore_score(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserScore_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserScore_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserScore_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserScore_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserScore", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userScore_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listVipUpgradeLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listVipUpgradeLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListVipUpgradeLog(rctx, fc.Args["filter"].(view.VipUpgradeLogFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListVipUpgradeLogResp)
	fc.Result = res
	return ec.marshalNListVipUpgradeLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListVipUpgradeLogResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listVipUpgradeLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListVipUpgradeLogResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListVipUpgradeLogResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListVipUpgradeLogResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listVipUpgradeLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listVipClaimLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listVipClaimLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListVipClaimLog(rctx, fc.Args["filter"].(view.VipClaimLogFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListVipClaimLogResp)
	fc.Result = res
	return ec.marshalNListVipClaimLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListVipClaimLogResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listVipClaimLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListVipClaimLogResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListVipClaimLogResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListVipClaimLogResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listVipClaimLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listVipLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listVipLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListVipLevel(rctx, fc.Args["filter"].(view.VipLevelFilterInput), fc.Args["pagination"].(*view.PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListVipLevelResp)
	fc.Result = res
	return ec.marshalNListVipLevelResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListVipLevelResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listVipLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListVipLevelResp_list(ctx, field)
			case "total":
				return ec.fieldContext_ListVipLevelResp_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListVipLevelResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listVipLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Qyery_listAgent(ctx context.Context, field graphql.CollectedField, obj *view.Qyery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Qyery_listAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListAgentResp)
	fc.Result = res
	return ec.marshalNListAgentResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListAgentResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Qyery_listAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Qyery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "agents":
				return ec.fieldContext_ListAgentResp_agents(ctx, field)
			case "meta":
				return ec.fieldContext_ListAgentResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListAgentResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Qyery_listAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Qyery_listGeneralAgent(ctx context.Context, field graphql.CollectedField, obj *view.Qyery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Qyery_listGeneralAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListGeneralAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.ListGeneralAgentResp)
	fc.Result = res
	return ec.marshalNListGeneralAgentResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGeneralAgentResp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Qyery_listGeneralAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Qyery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "generalAgents":
				return ec.fieldContext_ListGeneralAgentResp_generalAgents(ctx, field)
			case "meta":
				return ec.fieldContext_ListGeneralAgentResp_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListGeneralAgentResp", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Qyery_listGeneralAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _RefreshTokenResp_token(ctx context.Context, field graphql.CollectedField, obj *view.RefreshTokenResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RefreshTokenResp_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RefreshTokenResp_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RefreshTokenResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RefreshTokenResp_expires(ctx context.Context, field graphql.CollectedField, obj *view.RefreshTokenResp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RefreshTokenResp_expires(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expires, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RefreshTokenResp_expires(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RefreshTokenResp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_id(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_name(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_authority(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_authority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.Menu)
	fc.Result = res
	return ec.marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_authority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Menu_name(ctx, field)
			case "key":
				return ec.fieldContext_Menu_key(ctx, field)
			case "superKey":
				return ec.fieldContext_Menu_superKey(ctx, field)
			case "next":
				return ec.fieldContext_Menu_next(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Menu", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_supportAccountType(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_supportAccountType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportAccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.AccountType)
	fc.Result = res
	return ec.marshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_supportAccountType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityEvent_id(ctx context.Context, field graphql.CollectedField, obj *view.SecurityEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityEvent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityEvent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityEvent_name(ctx context.Context, field graphql.CollectedField, obj *view.SecurityEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityEvent_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityEvent_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityEvent_description(ctx context.Context, field graphql.CollectedField, obj *view.SecurityEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityEvent_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityEvent_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityEvent_isEnable(ctx context.Context, field graphql.CollectedField, obj *view.SecurityEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityEvent_isEnable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityEvent_isEnable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.SecurityEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityEvent_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityEvent_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityEvent_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.SecurityEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityEvent_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityEvent_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityEvent_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.SecurityEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityEvent_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityEvent_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityEvent_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.SecurityEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityEvent_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityEvent_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsConfig_account(ctx context.Context, field graphql.CollectedField, obj *view.SmsConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsConfig_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsConfig_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsConfig_url(ctx context.Context, field graphql.CollectedField, obj *view.SmsConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsConfig_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsConfig_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsRecord_id(ctx context.Context, field graphql.CollectedField, obj *view.SmsRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsRecord_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsRecord_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsRecord_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *view.SmsRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsRecord_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsRecord_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsRecord_content(ctx context.Context, field graphql.CollectedField, obj *view.SmsRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsRecord_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsRecord_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsRecord_sendTime(ctx context.Context, field graphql.CollectedField, obj *view.SmsRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsRecord_sendTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsRecord_sendTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsRecord_account(ctx context.Context, field graphql.CollectedField, obj *view.SmsRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsRecord_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsRecord_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsRecord_url(ctx context.Context, field graphql.CollectedField, obj *view.SmsRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsRecord_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsRecord_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsRecord_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.SmsRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsRecord_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsRecord_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SmsRecord_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.SmsRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SmsRecord_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SmsRecord_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SmsRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_receiveMessage(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_receiveMessage(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ReceiveMessage(rctx, fc.Args["userAuth"].(view.UserAuth))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNString2string(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_receiveMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_receiveMessage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SystemLine_id(ctx context.Context, field graphql.CollectedField, obj *view.SystemLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemLine_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemLine_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemLine_name(ctx context.Context, field graphql.CollectedField, obj *view.SystemLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemLine_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemLine_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemLine_description(ctx context.Context, field graphql.CollectedField, obj *view.SystemLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemLine_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemLine_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemLine_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.SystemLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemLine_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemLine_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemLine_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.SystemLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemLine_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemLine_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_RGBHex(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_RGBHex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RGBHex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_RGBHex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_isEnable(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_isEnable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_isEnable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Template_id(ctx context.Context, field graphql.CollectedField, obj *view.Template) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Template_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Template_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Template_name(ctx context.Context, field graphql.CollectedField, obj *view.Template) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Template_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Template_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Template_content(ctx context.Context, field graphql.CollectedField, obj *view.Template) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Template_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Template_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Template_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.Template) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Template_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Template_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Template_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.Template) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Template_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Template_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_accountType(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_accountType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.AccountType)
	fc.Result = res
	return ec.marshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_accountType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_status(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.UserStatus)
	fc.Result = res
	return ec.marshalNUserStatus2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_aliasName(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_aliasName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AliasName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_aliasName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_area(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_area(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_area(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_notes(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_notes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_notes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_avatarURL(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_avatarURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_avatarURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastLoginAt(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastLoginAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastLoginAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastLoginIP(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastLoginIP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastLoginIP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isDelete(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_roles(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserRole)
	fc.Result = res
	return ec.marshalNUserRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserRole_userID(ctx, field)
			case "roleID":
				return ec.fieldContext_UserRole_roleID(ctx, field)
			case "isAdmin":
				return ec.fieldContext_UserRole_isAdmin(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserRole_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserRole_updateUserID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserRole_updatedAt(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_whitelists(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_whitelists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Whitelists, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserWhitelist)
	fc.Result = res
	return ec.marshalNUserWhitelist2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_whitelists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserWhitelist_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserWhitelist_userID(ctx, field)
			case "ipAddress":
				return ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserWhitelist_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserWhitelist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_tags(ctx context.Context, field graphql.CollectedField, obj *view.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*view.UserTag)
	fc.Result = res
	return ec.marshalNUserTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserTag_id(ctx, field)
			case "userID":
				return ec.fieldContext_UserTag_userID(ctx, field)
			case "tagID":
				return ec.fieldContext_UserTag_tagID(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserTag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserTag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_UserTag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_UserTag_updateUserID(ctx, field)
			case "tag":
				return ec.fieldContext_UserTag_tag(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserTag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_id(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_bankName(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_bankName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_bankName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_bankBranch(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_bankBranch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankBranch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_bankBranch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_bankAccount(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_bankAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_bankAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_bankAccountName(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_bankAccountName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankAccountName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_bankAccountName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDepositInfo_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserDepositInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDepositInfo_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDepositInfo_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDepositInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_id(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_ipAddress(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_ipAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_ipAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_country(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_administrativeArea(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_administrativeArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdministrativeArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_administrativeArea(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_deviceOS(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_deviceOS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceOs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.DeviceOs)
	fc.Result = res
	return ec.marshalNDeviceOS2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐDeviceOs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_deviceOS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeviceOS does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLoginHistory_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserLoginHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLoginHistory_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLoginHistory_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLoginHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_id(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_roleID(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_roleID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_roleID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_isAdmin(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_isAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(view.YesNo)
	fc.Result = res
	return ec.marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_isAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type YesNo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_role(ctx context.Context, field graphql.CollectedField, obj *view.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Role)
	fc.Result = res
	return ec.marshalNRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "name":
				return ec.fieldContext_Role_name(ctx, field)
			case "authority":
				return ec.fieldContext_Role_authority(ctx, field)
			case "supportAccountType":
				return ec.fieldContext_Role_supportAccountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Role_createUserID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Role_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserScore_id(ctx context.Context, field graphql.CollectedField, obj *view.UserScore) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserScore_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserScore_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserScore_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserScore) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserScore_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserScore_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserScore_score(ctx context.Context, field graphql.CollectedField, obj *view.UserScore) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserScore_score(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(decimal.Decimal)
	fc.Result = res
	return ec.marshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserScore_score(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserScore_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserScore) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserScore_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserScore_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserScore_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.UserScore) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserScore_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserScore_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserScore_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserScore) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserScore_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserScore_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserScore_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserScore) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserScore_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserScore_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_id(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_tagID(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_tagID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_tagID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserTag_tag(ctx context.Context, field graphql.CollectedField, obj *view.UserTag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserTag_tag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*view.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserTag_tag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "RGBHex":
				return ec.fieldContext_Tag_RGBHex(ctx, field)
			case "isEnable":
				return ec.fieldContext_Tag_isEnable(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "createUserID":
				return ec.fieldContext_Tag_createUserID(ctx, field)
			case "updateUserID":
				return ec.fieldContext_Tag_updateUserID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWhitelist_id(ctx context.Context, field graphql.CollectedField, obj *view.UserWhitelist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWhitelist_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWhitelist_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWhitelist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWhitelist_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserWhitelist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWhitelist_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWhitelist_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWhitelist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWhitelist_ipAddress(ctx context.Context, field graphql.CollectedField, obj *view.UserWhitelist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWhitelist_ipAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWhitelist_ipAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWhitelist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWhitelist_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserWhitelist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWhitelist_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWhitelist_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWhitelist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_id(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_userID(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_bankName(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_bankName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_bankName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_bankBranch(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_bankBranch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankBranch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_bankBranch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_bankAccount(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_bankAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_bankAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_bankAccountName(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_bankAccountName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankAccountName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_bankAccountName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_createUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_createUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_createUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserWithdrawInfo_updateUserID(ctx context.Context, field graphql.CollectedField, obj *view.UserWithdrawInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserWithdrawInfo_updateUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserWithdrawInfo_updateUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserWithdrawInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipClaimLog_id(ctx context.Context, field graphql.CollectedField, obj *view.VipClaimLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipClaimLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipClaimLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipClaimLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipClaimLog_userID(ctx context.Context, field graphql.CollectedField, obj *view.VipClaimLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipClaimLog_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipClaimLog_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipClaimLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipClaimLog_vipLevelID(ctx context.Context, field graphql.CollectedField, obj *view.VipClaimLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipClaimLog_vipLevelID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VipLevelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipClaimLog_vipLevelID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipClaimLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipClaimLog_claimAt(ctx context.Context, field graphql.CollectedField, obj *view.VipClaimLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipClaimLog_claimAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClaimAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipClaimLog_claimAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipClaimLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipClaimLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.VipClaimLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipClaimLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipClaimLog_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipClaimLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipClaimLog_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.VipClaimLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipClaimLog_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipClaimLog_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipClaimLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipLevel_id(ctx context.Context, field graphql.CollectedField, obj *view.VipLevel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipLevel_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipLevel_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipLevel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipLevel_name(ctx context.Context, field graphql.CollectedField, obj *view.VipLevel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipLevel_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipLevel_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipLevel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipLevel_description(ctx context.Context, field graphql.CollectedField, obj *view.VipLevel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipLevel_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipLevel_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipLevel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipLevel_icon(ctx context.Context, field graphql.CollectedField, obj *view.VipLevel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipLevel_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipLevel_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipLevel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipLevel_sort(ctx context.Context, field graphql.CollectedField, obj *view.VipLevel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipLevel_sort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	fc.Result = res
	return ec.marshalOUint642ᚖuint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipLevel_sort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipLevel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipLevel_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.VipLevel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipLevel_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipLevel_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipLevel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipLevel_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.VipLevel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipLevel_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipLevel_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipLevel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipUpgradeLog_id(ctx context.Context, field graphql.CollectedField, obj *view.VipUpgradeLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipUpgradeLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipUpgradeLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipUpgradeLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipUpgradeLog_userID(ctx context.Context, field graphql.CollectedField, obj *view.VipUpgradeLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipUpgradeLog_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipUpgradeLog_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipUpgradeLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipUpgradeLog_vipLevelID(ctx context.Context, field graphql.CollectedField, obj *view.VipUpgradeLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipUpgradeLog_vipLevelID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VipLevelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipUpgradeLog_vipLevelID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipUpgradeLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipUpgradeLog_upgradeAt(ctx context.Context, field graphql.CollectedField, obj *view.VipUpgradeLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipUpgradeLog_upgradeAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpgradeAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipUpgradeLog_upgradeAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipUpgradeLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipUpgradeLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *view.VipUpgradeLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipUpgradeLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipUpgradeLog_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipUpgradeLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipUpgradeLog_updatedAt(ctx context.Context, field graphql.CollectedField, obj *view.VipUpgradeLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VipUpgradeLog_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamp2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VipUpgradeLog_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipUpgradeLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAgentCreateInput(ctx context.Context, obj interface{}) (view.AgentCreateInput, error) {
	var it view.AgentCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "account", "password", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAgentFilterInput(ctx context.Context, obj interface{}) (view.AgentFilterInput, error) {
	var it view.AgentFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"agent", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "agent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			data, err := ec.unmarshalOAgentInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Agent = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAgentInput(ctx context.Context, obj interface{}) (view.AgentInput, error) {
	var it view.AgentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAgentUpdateInput(ctx context.Context, obj interface{}) (view.AgentUpdateInput, error) {
	var it view.AgentUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "account", "password", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditLogFilterInput(ctx context.Context, obj interface{}) (view.AuditLogFilterInput, error) {
	var it view.AuditLogFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"auditLog", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "auditLog":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auditLog"))
			data, err := ec.unmarshalOAuditLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuditLog = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditLogInput(ctx context.Context, obj interface{}) (view.AuditLogInput, error) {
	var it view.AuditLogInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userID", "method", "requestInput"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "requestInput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestInput"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequestInput = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBaseFilterInput(ctx context.Context, obj interface{}) (view.BaseFilterInput, error) {
	var it view.BaseFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"IDs", "searchIn", "keyword", "createdAtLT", "createdAtLTE", "createdAtGT", "createdAtGTE", "sortField", "sortType", "rangeField", "rangeType", "lessThan", "lessThanEqual", "greaterThan", "greaterThanEqual"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "IDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IDs"))
			data, err := ec.unmarshalOUint642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDs = data
		case "searchIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchIn"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SearchIn = data
		case "keyword":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLt = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLte = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGt = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGte = data
		case "sortField":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortField"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SortField = data
		case "sortType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortType"))
			data, err := ec.unmarshalOSortType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSortType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SortType = data
		case "rangeField":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rangeField"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RangeField = data
		case "rangeType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rangeType"))
			data, err := ec.unmarshalORangeType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRangeType(ctx, v)
			if err != nil {
				return it, err
			}
			it.RangeType = data
		case "lessThan":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessThan"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LessThan = data
		case "lessThanEqual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessThanEqual"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LessThanEqual = data
		case "greaterThan":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("greaterThan"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GreaterThan = data
		case "greaterThanEqual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("greaterThanEqual"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GreaterThanEqual = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClaimVipRewardInput(ctx context.Context, obj interface{}) (view.ClaimVipRewardInput, error) {
	var it view.ClaimVipRewardInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"vipLevel"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "vipLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vipLevel"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VipLevel = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCommonUserReqInput(ctx context.Context, obj interface{}) (view.CreateCommonUserReqInput, error) {
	var it view.CreateCommonUserReqInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password", "accountType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUploadURLInput(ctx context.Context, obj interface{}) (view.CreateUploadURLInput, error) {
	var it view.CreateUploadURLInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"expireSec", "files"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "expireSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expireSec"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpireSec = data
		case "files":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files"))
			data, err := ec.unmarshalNFileInfoInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfoInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Files = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserReqInput(ctx context.Context, obj interface{}) (view.CreateUserReqInput, error) {
	var it view.CreateUserReqInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password", "accountType", "aliasName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "aliasName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliasName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AliasName = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailConfigInput(ctx context.Context, obj interface{}) (view.EmailConfigInput, error) {
	var it view.EmailConfigInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"smtpServer", "smtpPort", "smtpUser", "smtpPassword", "smtpFrom", "smtpFromName", "smtpSSL"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "smtpServer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtpServer"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SMTPServer = data
		case "smtpPort":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtpPort"))
			data, err := ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SMTPPort = data
		case "smtpUser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtpUser"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SMTPUser = data
		case "smtpPassword":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtpPassword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SMTPPassword = data
		case "smtpFrom":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtpFrom"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SMTPFrom = data
		case "smtpFromName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtpFromName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SMTPFromName = data
		case "smtpSSL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtpSSL"))
			data, err := ec.unmarshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.SMTPSsl = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailRecordFilterInput(ctx context.Context, obj interface{}) (view.EmailRecordFilterInput, error) {
	var it view.EmailRecordFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"emailRecord", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "emailRecord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailRecord"))
			data, err := ec.unmarshalOEmailRecordInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailRecordInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailRecord = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailRecordInput(ctx context.Context, obj interface{}) (view.EmailRecordInput, error) {
	var it view.EmailRecordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventCreateInput(ctx context.Context, obj interface{}) (view.EventCreateInput, error) {
	var it view.EventCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "startTime", "endTime", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "startTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			data, err := ec.unmarshalNTimestamp2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTime = data
		case "endTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			data, err := ec.unmarshalNTimestamp2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTime = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventFilterInput(ctx context.Context, obj interface{}) (view.EventFilterInput, error) {
	var it view.EventFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"event", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "event":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
			data, err := ec.unmarshalOEventInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Event = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventInput(ctx context.Context, obj interface{}) (view.EventInput, error) {
	var it view.EventInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "startTime", "endTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "startTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			data, err := ec.unmarshalOTimestamp2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTime = data
		case "endTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			data, err := ec.unmarshalOTimestamp2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTime = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventUpdateInput(ctx context.Context, obj interface{}) (view.EventUpdateInput, error) {
	var it view.EventUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "startTime", "endTime", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "startTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			data, err := ec.unmarshalOTimestamp2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTime = data
		case "endTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			data, err := ec.unmarshalOTimestamp2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTime = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFileInfoInput(ctx context.Context, obj interface{}) (view.FileInfoInput, error) {
	var it view.FileInfoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fileName", "size", "md5"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fileName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileName = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "md5":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("md5"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Md5 = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameCreateInput(ctx context.Context, obj interface{}) (view.GameCreateInput, error) {
	var it view.GameCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameFilterInput(ctx context.Context, obj interface{}) (view.GameFilterInput, error) {
	var it view.GameFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"game", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "game":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("game"))
			data, err := ec.unmarshalOGameInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Game = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameInput(ctx context.Context, obj interface{}) (view.GameInput, error) {
	var it view.GameInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGamePlayerFilterInput(ctx context.Context, obj interface{}) (view.GamePlayerFilterInput, error) {
	var it view.GamePlayerFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gamePlayer", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gamePlayer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gamePlayer"))
			data, err := ec.unmarshalOGamePlayerInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGamePlayerInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.GamePlayer = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGamePlayerInput(ctx context.Context, obj interface{}) (view.GamePlayerInput, error) {
	var it view.GamePlayerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "account", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameTransferRecordFilterInput(ctx context.Context, obj interface{}) (view.GameTransferRecordFilterInput, error) {
	var it view.GameTransferRecordFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameTransferRecord", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameTransferRecord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameTransferRecord"))
			data, err := ec.unmarshalOGameTransferRecordInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameTransferRecordInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameTransferRecord = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameTransferRecordInput(ctx context.Context, obj interface{}) (view.GameTransferRecordInput, error) {
	var it view.GameTransferRecordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "gamePlayerId", "gameId", "gameName", "amount", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "gamePlayerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gamePlayerId"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GamePlayerID = data
		case "gameId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "gameName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameName = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalODecimal2ᚖgithubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameUpdateInput(ctx context.Context, obj interface{}) (view.GameUpdateInput, error) {
	var it view.GameUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGeneralAgentCreateInput(ctx context.Context, obj interface{}) (view.GeneralAgentCreateInput, error) {
	var it view.GeneralAgentCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "account", "password", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGeneralAgentFilterInput(ctx context.Context, obj interface{}) (view.GeneralAgentFilterInput, error) {
	var it view.GeneralAgentFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"generalAgent", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "generalAgent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("generalAgent"))
			data, err := ec.unmarshalOGeneralAgentInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.GeneralAgent = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGeneralAgentInput(ctx context.Context, obj interface{}) (view.GeneralAgentInput, error) {
	var it view.GeneralAgentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGeneralAgentUpdateInput(ctx context.Context, obj interface{}) (view.GeneralAgentUpdateInput, error) {
	var it view.GeneralAgentUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "account", "password", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHostsDenyCreateInput(ctx context.Context, obj interface{}) (view.HostsDenyCreateInput, error) {
	var it view.HostsDenyCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ipAddress", "isEnabled", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		case "isEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnabled"))
			data, err := ec.unmarshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnabled = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHostsDenyFilterInput(ctx context.Context, obj interface{}) (view.HostsDenyFilterInput, error) {
	var it view.HostsDenyFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"hostsDeny", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "hostsDeny":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostsDeny"))
			data, err := ec.unmarshalOHostsDenyInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostsDeny = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHostsDenyInput(ctx context.Context, obj interface{}) (view.HostsDenyInput, error) {
	var it view.HostsDenyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "ipAddress", "isEnabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		case "isEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnabled"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHostsDenyUpdateInput(ctx context.Context, obj interface{}) (view.HostsDenyUpdateInput, error) {
	var it view.HostsDenyUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ipAddress", "isEnabled", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		case "isEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnabled"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnabled = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRateCreateInput(ctx context.Context, obj interface{}) (view.LineRateCreateInput, error) {
	var it view.LineRateCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRateFilterInput(ctx context.Context, obj interface{}) (view.LineRateFilterInput, error) {
	var it view.LineRateFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lineRate", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lineRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lineRate"))
			data, err := ec.unmarshalOLineRateInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.LineRate = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRateHistoryFilterInput(ctx context.Context, obj interface{}) (view.LineRateHistoryFilterInput, error) {
	var it view.LineRateHistoryFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lineRateHistory", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lineRateHistory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lineRateHistory"))
			data, err := ec.unmarshalOLineRateHistoryInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateHistoryInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.LineRateHistory = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRateHistoryInput(ctx context.Context, obj interface{}) (view.LineRateHistoryInput, error) {
	var it view.LineRateHistoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "lineRateId", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "lineRateId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lineRateId"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LineRateID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRateInput(ctx context.Context, obj interface{}) (view.LineRateInput, error) {
	var it view.LineRateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRateUpdateInput(ctx context.Context, obj interface{}) (view.LineRateUpdateInput, error) {
	var it view.LineRateUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRentCreateInput(ctx context.Context, obj interface{}) (view.LineRentCreateInput, error) {
	var it view.LineRentCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRentFilterInput(ctx context.Context, obj interface{}) (view.LineRentFilterInput, error) {
	var it view.LineRentFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lineRent", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lineRent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lineRent"))
			data, err := ec.unmarshalOLineRentInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.LineRent = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRentInput(ctx context.Context, obj interface{}) (view.LineRentInput, error) {
	var it view.LineRentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLineRentUpdateInput(ctx context.Context, obj interface{}) (view.LineRentUpdateInput, error) {
	var it view.LineRentUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginReqInput(ctx context.Context, obj interface{}) (view.LoginReqInput, error) {
	var it view.LoginReqInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMenuInput(ctx context.Context, obj interface{}) (view.MenuInput, error) {
	var it view.MenuInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "next"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "next":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("next"))
			data, err := ec.unmarshalNMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Next = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantBalanceApplyInput(ctx context.Context, obj interface{}) (view.MerchantBalanceApplyInput, error) {
	var it view.MerchantBalanceApplyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantBalanceAuditInput(ctx context.Context, obj interface{}) (view.MerchantBalanceAuditInput, error) {
	var it view.MerchantBalanceAuditInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"opinion"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "opinion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opinion"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Opinion = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantBalanceFilterInput(ctx context.Context, obj interface{}) (view.MerchantBalanceFilterInput, error) {
	var it view.MerchantBalanceFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantBalance", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantBalance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantBalance"))
			data, err := ec.unmarshalOMerchantBalanceInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantBalance = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantBalanceInput(ctx context.Context, obj interface{}) (view.MerchantBalanceInput, error) {
	var it view.MerchantBalanceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantBalanceLogFilterInput(ctx context.Context, obj interface{}) (view.MerchantBalanceLogFilterInput, error) {
	var it view.MerchantBalanceLogFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantBalanceLog", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantBalanceLog":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantBalanceLog"))
			data, err := ec.unmarshalOMerchantBalanceLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceLogInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantBalanceLog = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantBalanceLogInput(ctx context.Context, obj interface{}) (view.MerchantBalanceLogInput, error) {
	var it view.MerchantBalanceLogInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantCreateInput(ctx context.Context, obj interface{}) (view.MerchantCreateInput, error) {
	var it view.MerchantCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantDepositLogFilterInput(ctx context.Context, obj interface{}) (view.MerchantDepositLogFilterInput, error) {
	var it view.MerchantDepositLogFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantDepositLog", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantDepositLog":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantDepositLog"))
			data, err := ec.unmarshalOMerchantDepositLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositLogInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantDepositLog = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantDepositLogInput(ctx context.Context, obj interface{}) (view.MerchantDepositLogInput, error) {
	var it view.MerchantDepositLogInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantDepositMethodCreateInput(ctx context.Context, obj interface{}) (view.MerchantDepositMethodCreateInput, error) {
	var it view.MerchantDepositMethodCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantDepositMethodFilterInput(ctx context.Context, obj interface{}) (view.MerchantDepositMethodFilterInput, error) {
	var it view.MerchantDepositMethodFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantDepositMethod", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantDepositMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantDepositMethod"))
			data, err := ec.unmarshalOMerchantDepositMethodInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantDepositMethod = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantDepositMethodInput(ctx context.Context, obj interface{}) (view.MerchantDepositMethodInput, error) {
	var it view.MerchantDepositMethodInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantDepositMethodUpdateInput(ctx context.Context, obj interface{}) (view.MerchantDepositMethodUpdateInput, error) {
	var it view.MerchantDepositMethodUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantFeeModeCreateInput(ctx context.Context, obj interface{}) (view.MerchantFeeModeCreateInput, error) {
	var it view.MerchantFeeModeCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantFeeModeFilterInput(ctx context.Context, obj interface{}) (view.MerchantFeeModeFilterInput, error) {
	var it view.MerchantFeeModeFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantFeeMode", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantFeeMode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantFeeMode"))
			data, err := ec.unmarshalOMerchantFeeModeInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantFeeMode = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantFeeModeInput(ctx context.Context, obj interface{}) (view.MerchantFeeModeInput, error) {
	var it view.MerchantFeeModeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantFeeModeUpdateInput(ctx context.Context, obj interface{}) (view.MerchantFeeModeUpdateInput, error) {
	var it view.MerchantFeeModeUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantFilterInput(ctx context.Context, obj interface{}) (view.MerchantFilterInput, error) {
	var it view.MerchantFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchant", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchant"))
			data, err := ec.unmarshalOMerchantInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Merchant = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantInput(ctx context.Context, obj interface{}) (view.MerchantInput, error) {
	var it view.MerchantInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantLineCreateInput(ctx context.Context, obj interface{}) (view.MerchantLineCreateInput, error) {
	var it view.MerchantLineCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantLineFilterInput(ctx context.Context, obj interface{}) (view.MerchantLineFilterInput, error) {
	var it view.MerchantLineFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantLine", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantLine":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantLine"))
			data, err := ec.unmarshalOMerchantLineInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantLine = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantLineInput(ctx context.Context, obj interface{}) (view.MerchantLineInput, error) {
	var it view.MerchantLineInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantLineUpdateInput(ctx context.Context, obj interface{}) (view.MerchantLineUpdateInput, error) {
	var it view.MerchantLineUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantLoginHistoryFilterInput(ctx context.Context, obj interface{}) (view.MerchantLoginHistoryFilterInput, error) {
	var it view.MerchantLoginHistoryFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantLoginHistory", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantLoginHistory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantLoginHistory"))
			data, err := ec.unmarshalOMerchantLoginHistoryInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLoginHistoryInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantLoginHistory = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantLoginHistoryInput(ctx context.Context, obj interface{}) (view.MerchantLoginHistoryInput, error) {
	var it view.MerchantLoginHistoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantUpdateInput(ctx context.Context, obj interface{}) (view.MerchantUpdateInput, error) {
	var it view.MerchantUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantWithdrawLogFilterInput(ctx context.Context, obj interface{}) (view.MerchantWithdrawLogFilterInput, error) {
	var it view.MerchantWithdrawLogFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantWithdrawLog", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantWithdrawLog":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantWithdrawLog"))
			data, err := ec.unmarshalOMerchantWithdrawLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawLogInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantWithdrawLog = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantWithdrawLogInput(ctx context.Context, obj interface{}) (view.MerchantWithdrawLogInput, error) {
	var it view.MerchantWithdrawLogInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantWithdrawMethodCreateInput(ctx context.Context, obj interface{}) (view.MerchantWithdrawMethodCreateInput, error) {
	var it view.MerchantWithdrawMethodCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantWithdrawMethodFilterInput(ctx context.Context, obj interface{}) (view.MerchantWithdrawMethodFilterInput, error) {
	var it view.MerchantWithdrawMethodFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantWithdrawMethod", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantWithdrawMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantWithdrawMethod"))
			data, err := ec.unmarshalOMerchantWithdrawMethodInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantWithdrawMethod = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantWithdrawMethodInput(ctx context.Context, obj interface{}) (view.MerchantWithdrawMethodInput, error) {
	var it view.MerchantWithdrawMethodInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantWithdrawMethodUpdateInput(ctx context.Context, obj interface{}) (view.MerchantWithdrawMethodUpdateInput, error) {
	var it view.MerchantWithdrawMethodUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (view.PaginationInput, error) {
	var it view.PaginationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "perPage", "offsetType", "offsetID", "limit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = data
		case "offsetType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offsetType"))
			data, err := ec.unmarshalOOffsetType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐOffsetType(ctx, v)
			if err != nil {
				return it, err
			}
			it.OffsetType = data
		case "offsetID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offsetID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OffsetID = data
		case "limit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Limit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterReqInput(ctx context.Context, obj interface{}) (view.RegisterReqInput, error) {
	var it view.RegisterReqInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleCreateInput(ctx context.Context, obj interface{}) (view.RoleCreateInput, error) {
	var it view.RoleCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "supportAccountType", "authority"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "supportAccountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportAccountType"))
			data, err := ec.unmarshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupportAccountType = data
		case "authority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authority"))
			data, err := ec.unmarshalNMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Authority = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleFilterInput(ctx context.Context, obj interface{}) (view.RoleFilterInput, error) {
	var it view.RoleFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalORoleInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleInput(ctx context.Context, obj interface{}) (view.RoleInput, error) {
	var it view.RoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "supportAccountType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "supportAccountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportAccountType"))
			data, err := ec.unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupportAccountType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleUpdateInput(ctx context.Context, obj interface{}) (view.RoleUpdateInput, error) {
	var it view.RoleUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "supportAccountType", "authority"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "supportAccountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportAccountType"))
			data, err := ec.unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupportAccountType = data
		case "authority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authority"))
			data, err := ec.unmarshalOMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Authority = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSecurityEventCreateInput(ctx context.Context, obj interface{}) (view.SecurityEventCreateInput, error) {
	var it view.SecurityEventCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSecurityEventFilterInput(ctx context.Context, obj interface{}) (view.SecurityEventFilterInput, error) {
	var it view.SecurityEventFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"securityEvent", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "securityEvent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("securityEvent"))
			data, err := ec.unmarshalOSecurityEventInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecurityEvent = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSecurityEventInput(ctx context.Context, obj interface{}) (view.SecurityEventInput, error) {
	var it view.SecurityEventInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSecurityEventUpdateInput(ctx context.Context, obj interface{}) (view.SecurityEventUpdateInput, error) {
	var it view.SecurityEventUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSmsConfigInput(ctx context.Context, obj interface{}) (view.SmsConfigInput, error) {
	var it view.SmsConfigInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"account", "password", "url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "account":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Account = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSmsRecordFilterInput(ctx context.Context, obj interface{}) (view.SmsRecordFilterInput, error) {
	var it view.SmsRecordFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"smsRecord", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "smsRecord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsRecord"))
			data, err := ec.unmarshalOSmsRecordInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsRecordInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.SmsRecord = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSmsRecordInput(ctx context.Context, obj interface{}) (view.SmsRecordInput, error) {
	var it view.SmsRecordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "phoneNumber"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "phoneNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemLineCreateInput(ctx context.Context, obj interface{}) (view.SystemLineCreateInput, error) {
	var it view.SystemLineCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemLineFilterInput(ctx context.Context, obj interface{}) (view.SystemLineFilterInput, error) {
	var it view.SystemLineFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemLine", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemLine":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemLine"))
			data, err := ec.unmarshalOSystemLineInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemLine = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemLineInput(ctx context.Context, obj interface{}) (view.SystemLineInput, error) {
	var it view.SystemLineInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemLineUpdateInput(ctx context.Context, obj interface{}) (view.SystemLineUpdateInput, error) {
	var it view.SystemLineUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "remark"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagCreateInput(ctx context.Context, obj interface{}) (view.TagCreateInput, error) {
	var it view.TagCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "RGBHex"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "RGBHex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RGBHex"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RGBHex = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagFilterInput(ctx context.Context, obj interface{}) (view.TagFilterInput, error) {
	var it view.TagFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tag", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tag":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			data, err := ec.unmarshalOTagInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tag = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagInput(ctx context.Context, obj interface{}) (view.TagInput, error) {
	var it view.TagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "isEnable"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "isEnable":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnable"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnable = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagUpdateInput(ctx context.Context, obj interface{}) (view.TagUpdateInput, error) {
	var it view.TagUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "RGBHex", "isEnable"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "RGBHex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RGBHex"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RGBHex = data
		case "isEnable":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEnable"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsEnable = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTemplateCreateInput(ctx context.Context, obj interface{}) (view.TemplateCreateInput, error) {
	var it view.TemplateCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "content", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTemplateFilterInput(ctx context.Context, obj interface{}) (view.TemplateFilterInput, error) {
	var it view.TemplateFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"template", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "template":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("template"))
			data, err := ec.unmarshalOTemplateInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Template = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTemplateInput(ctx context.Context, obj interface{}) (view.TemplateInput, error) {
	var it view.TemplateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTemplateUpdateInput(ctx context.Context, obj interface{}) (view.TemplateUpdateInput, error) {
	var it view.TemplateUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "content", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserAuth(ctx context.Context, obj interface{}) (view.UserAuth, error) {
	var it view.UserAuth
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"token", "deviceUID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "deviceUID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deviceUID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeviceUID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilterInput(ctx context.Context, obj interface{}) (view.UserFilterInput, error) {
	var it view.UserFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user", "baseFilter", "tagIDs", "roleIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			data, err := ec.unmarshalOUserInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.User = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		case "tagIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagIDs"))
			data, err := ec.unmarshalOUint642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagIDs = data
		case "roleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIDs"))
			data, err := ec.unmarshalOUint642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (view.UserInput, error) {
	var it view.UserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "accountType", "status", "username", "aliasName", "email", "area", "notes", "avatarURL"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOUserStatus2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "aliasName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliasName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AliasName = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "area":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Area = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		case "avatarURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLoginHistoryFilterInput(ctx context.Context, obj interface{}) (view.UserLoginHistoryFilterInput, error) {
	var it view.UserLoginHistoryFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"baseFilter", "userLoginHistory"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		case "userLoginHistory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLoginHistory"))
			data, err := ec.unmarshalOUserLoginHistoryInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLoginHistory = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLoginHistoryInput(ctx context.Context, obj interface{}) (view.UserLoginHistoryInput, error) {
	var it view.UserLoginHistoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleCreateInput(ctx context.Context, obj interface{}) (view.UserRoleCreateInput, error) {
	var it view.UserRoleCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "roleID", "isAdmin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "roleID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleID = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleFilterInput(ctx context.Context, obj interface{}) (view.UserRoleFilterInput, error) {
	var it view.UserRoleFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userRole", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userRole":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userRole"))
			data, err := ec.unmarshalOUserRoleInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserRole = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleInput(ctx context.Context, obj interface{}) (view.UserRoleInput, error) {
	var it view.UserRoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userID", "roleID", "isAdmin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "roleID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleID = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleUpdateInput(ctx context.Context, obj interface{}) (view.UserRoleUpdateInput, error) {
	var it view.UserRoleUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roleID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roleID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTagCreateInput(ctx context.Context, obj interface{}) (view.UserTagCreateInput, error) {
	var it view.UserTagCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "tagID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "tagID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTagFilterInput(ctx context.Context, obj interface{}) (view.UserTagFilterInput, error) {
	var it view.UserTagFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userTag", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userTag":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTag"))
			data, err := ec.unmarshalOUserTagInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTag = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTagInput(ctx context.Context, obj interface{}) (view.UserTagInput, error) {
	var it view.UserTagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userID", "tagID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "tagID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTagUpdateInput(ctx context.Context, obj interface{}) (view.UserTagUpdateInput, error) {
	var it view.UserTagUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tagID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tagID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateInput(ctx context.Context, obj interface{}) (view.UserUpdateInput, error) {
	var it view.UserUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "aliasName", "area", "notes", "avatarContent", "accountType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOUserStatus2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "aliasName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliasName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AliasName = data
		case "area":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Area = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		case "avatarContent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarContent"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarContent = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdatePasswordInput(ctx context.Context, obj interface{}) (view.UserUpdatePasswordInput, error) {
	var it view.UserUpdatePasswordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhitelistCreateInput(ctx context.Context, obj interface{}) (view.UserWhitelistCreateInput, error) {
	var it view.UserWhitelistCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "ipAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhitelistFilterInput(ctx context.Context, obj interface{}) (view.UserWhitelistFilterInput, error) {
	var it view.UserWhitelistFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userWhitelist", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userWhitelist":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userWhitelist"))
			data, err := ec.unmarshalOUserWhitelistInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserWhitelist = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhitelistInput(ctx context.Context, obj interface{}) (view.UserWhitelistInput, error) {
	var it view.UserWhitelistInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userID", "ipAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhitelistUpdateInput(ctx context.Context, obj interface{}) (view.UserWhitelistUpdateInput, error) {
	var it view.UserWhitelistUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ipAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ipAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IPAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVipClaimLogFilterInput(ctx context.Context, obj interface{}) (view.VipClaimLogFilterInput, error) {
	var it view.VipClaimLogFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"vipClaimLog", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "vipClaimLog":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vipClaimLog"))
			data, err := ec.unmarshalOVipClaimLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipClaimLogInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.VipClaimLog = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVipClaimLogInput(ctx context.Context, obj interface{}) (view.VipClaimLogInput, error) {
	var it view.VipClaimLogInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userID", "vipLevel", "claimTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "vipLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vipLevel"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VipLevel = data
		case "claimTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claimTime"))
			data, err := ec.unmarshalOTimestamp2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimTime = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVipLevelCreateInput(ctx context.Context, obj interface{}) (view.VipLevelCreateInput, error) {
	var it view.VipLevelCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"level", "name", "description", "icon", "sort"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "level":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("level"))
			data, err := ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Level = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "icon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Icon = data
		case "sort":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sort = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVipLevelFilterInput(ctx context.Context, obj interface{}) (view.VipLevelFilterInput, error) {
	var it view.VipLevelFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"vipLevel", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "vipLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vipLevel"))
			data, err := ec.unmarshalOVipLevelInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.VipLevel = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVipLevelInput(ctx context.Context, obj interface{}) (view.VipLevelInput, error) {
	var it view.VipLevelInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "level", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "level":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("level"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Level = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVipLevelUpdateInput(ctx context.Context, obj interface{}) (view.VipLevelUpdateInput, error) {
	var it view.VipLevelUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"level", "name", "description", "icon", "sort"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "level":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("level"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Level = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "icon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Icon = data
		case "sort":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sort = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVipUpgradeLogFilterInput(ctx context.Context, obj interface{}) (view.VipUpgradeLogFilterInput, error) {
	var it view.VipUpgradeLogFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"vipUpgradeLog", "baseFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "vipUpgradeLog":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vipUpgradeLog"))
			data, err := ec.unmarshalOVipUpgradeLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipUpgradeLogInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.VipUpgradeLog = data
		case "baseFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseFilter"))
			data, err := ec.unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseFilter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVipUpgradeLogInput(ctx context.Context, obj interface{}) (view.VipUpgradeLogInput, error) {
	var it view.VipUpgradeLogInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userID", "vipLevelFrom", "vipLevelTo", "upgradeTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "vipLevelFrom":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vipLevelFrom"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VipLevelFrom = data
		case "vipLevelTo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vipLevelTo"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VipLevelTo = data
		case "upgradeTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upgradeTime"))
			data, err := ec.unmarshalOTimestamp2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpgradeTime = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Data(ctx context.Context, sel ast.SelectionSet, obj view.Data) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case view.File:
		return ec._File(ctx, sel, &obj)
	case *view.File:
		if obj == nil {
			return graphql.Null
		}
		return ec._File(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var agentImplementors = []string{"Agent"}

func (ec *executionContext) _Agent(ctx context.Context, sel ast.SelectionSet, obj *view.Agent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, agentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Agent")
		case "id":
			out.Values[i] = ec._Agent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Agent_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "account":
			out.Values[i] = ec._Agent_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var auditLogImplementors = []string{"AuditLog"}

func (ec *executionContext) _AuditLog(ctx context.Context, sel ast.SelectionSet, obj *view.AuditLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditLog")
		case "id":
			out.Values[i] = ec._AuditLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._AuditLog_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "method":
			out.Values[i] = ec._AuditLog_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requestInput":
			out.Values[i] = ec._AuditLog_requestInput(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._AuditLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var claimsImplementors = []string{"Claims"}

func (ec *executionContext) _Claims(ctx context.Context, sel ast.SelectionSet, obj *view.Claims) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, claimsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Claims")
		case "id":
			out.Values[i] = ec._Claims_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountType":
			out.Values[i] = ec._Claims_accountType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Claims_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._Claims_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "aliasName":
			out.Values[i] = ec._Claims_aliasName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "avatarURL":
			out.Values[i] = ec._Claims_avatarURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "whitelists":
			out.Values[i] = ec._Claims_whitelists(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "menu":
			out.Values[i] = ec._Claims_menu(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commonImplementors = []string{"Common"}

func (ec *executionContext) _Common(ctx context.Context, sel ast.SelectionSet, obj *view.Common) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Common")
		case "creatorID":
			out.Values[i] = ec._Common_creatorID(ctx, field, obj)
		case "creatorName":
			out.Values[i] = ec._Common_creatorName(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Common_createdAt(ctx, field, obj)
		case "updaterID":
			out.Values[i] = ec._Common_updaterID(ctx, field, obj)
		case "updaterName":
			out.Values[i] = ec._Common_updaterName(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Common_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createCommonUserRespImplementors = []string{"CreateCommonUserResp"}

func (ec *executionContext) _CreateCommonUserResp(ctx context.Context, sel ast.SelectionSet, obj *view.CreateCommonUserResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCommonUserRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCommonUserResp")
		case "user":
			out.Values[i] = ec._CreateCommonUserResp_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createUploadURLRespImplementors = []string{"CreateUploadURLResp"}

func (ec *executionContext) _CreateUploadURLResp(ctx context.Context, sel ast.SelectionSet, obj *view.CreateUploadURLResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createUploadURLRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateUploadURLResp")
		case "files":
			out.Values[i] = ec._CreateUploadURLResp_files(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createUserRespImplementors = []string{"CreateUserResp"}

func (ec *executionContext) _CreateUserResp(ctx context.Context, sel ast.SelectionSet, obj *view.CreateUserResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createUserRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateUserResp")
		case "user":
			out.Values[i] = ec._CreateUserResp_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dataListImplementors = []string{"DataList"}

func (ec *executionContext) _DataList(ctx context.Context, sel ast.SelectionSet, obj *view.DataList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataList")
		case "data":
			out.Values[i] = ec._DataList_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._DataList_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emailConfigImplementors = []string{"EmailConfig"}

func (ec *executionContext) _EmailConfig(ctx context.Context, sel ast.SelectionSet, obj *view.EmailConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailConfig")
		case "smtpServer":
			out.Values[i] = ec._EmailConfig_smtpServer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpPort":
			out.Values[i] = ec._EmailConfig_smtpPort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpUser":
			out.Values[i] = ec._EmailConfig_smtpUser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpFrom":
			out.Values[i] = ec._EmailConfig_smtpFrom(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpFromName":
			out.Values[i] = ec._EmailConfig_smtpFromName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpSSL":
			out.Values[i] = ec._EmailConfig_smtpSSL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emailRecordImplementors = []string{"EmailRecord"}

func (ec *executionContext) _EmailRecord(ctx context.Context, sel ast.SelectionSet, obj *view.EmailRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailRecordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailRecord")
		case "id":
			out.Values[i] = ec._EmailRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._EmailRecord_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subject":
			out.Values[i] = ec._EmailRecord_subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._EmailRecord_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sendTime":
			out.Values[i] = ec._EmailRecord_sendTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpServer":
			out.Values[i] = ec._EmailRecord_smtpServer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpPort":
			out.Values[i] = ec._EmailRecord_smtpPort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpUser":
			out.Values[i] = ec._EmailRecord_smtpUser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpFrom":
			out.Values[i] = ec._EmailRecord_smtpFrom(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpFromName":
			out.Values[i] = ec._EmailRecord_smtpFromName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtpSSL":
			out.Values[i] = ec._EmailRecord_smtpSSL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._EmailRecord_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._EmailRecord_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eventImplementors = []string{"Event"}

func (ec *executionContext) _Event(ctx context.Context, sel ast.SelectionSet, obj *view.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Event")
		case "id":
			out.Values[i] = ec._Event_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Event_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Event_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startTime":
			out.Values[i] = ec._Event_startTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endTime":
			out.Values[i] = ec._Event_endTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "remark":
			out.Values[i] = ec._Event_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileImplementors = []string{"File", "Data"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *view.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "id":
			out.Values[i] = ec._File_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._File_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._File_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contentType":
			out.Values[i] = ec._File_contentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileInfoImplementors = []string{"FileInfo"}

func (ec *executionContext) _FileInfo(ctx context.Context, sel ast.SelectionSet, obj *view.FileInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileInfo")
		case "fileName":
			out.Values[i] = ec._FileInfo_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uploadURL":
			out.Values[i] = ec._FileInfo_uploadURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameImplementors = []string{"Game"}

func (ec *executionContext) _Game(ctx context.Context, sel ast.SelectionSet, obj *view.Game) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Game")
		case "id":
			out.Values[i] = ec._Game_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Game_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Game_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Game_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Game_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gamePlayerImplementors = []string{"GamePlayer"}

func (ec *executionContext) _GamePlayer(ctx context.Context, sel ast.SelectionSet, obj *view.GamePlayer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gamePlayerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GamePlayer")
		case "id":
			out.Values[i] = ec._GamePlayer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._GamePlayer_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nickname":
			out.Values[i] = ec._GamePlayer_nickname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "balance":
			out.Values[i] = ec._GamePlayer_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastLoginTime":
			out.Values[i] = ec._GamePlayer_lastLoginTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastLogoutTime":
			out.Values[i] = ec._GamePlayer_lastLogoutTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._GamePlayer_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._GamePlayer_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameTransferRecordImplementors = []string{"GameTransferRecord"}

func (ec *executionContext) _GameTransferRecord(ctx context.Context, sel ast.SelectionSet, obj *view.GameTransferRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameTransferRecordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameTransferRecord")
		case "id":
			out.Values[i] = ec._GameTransferRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gamePlayerId":
			out.Values[i] = ec._GameTransferRecord_gamePlayerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gameId":
			out.Values[i] = ec._GameTransferRecord_gameId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gameName":
			out.Values[i] = ec._GameTransferRecord_gameName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._GameTransferRecord_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "remark":
			out.Values[i] = ec._GameTransferRecord_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._GameTransferRecord_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._GameTransferRecord_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var generalAgentImplementors = []string{"GeneralAgent"}

func (ec *executionContext) _GeneralAgent(ctx context.Context, sel ast.SelectionSet, obj *view.GeneralAgent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generalAgentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GeneralAgent")
		case "id":
			out.Values[i] = ec._GeneralAgent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._GeneralAgent_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "account":
			out.Values[i] = ec._GeneralAgent_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var hostsDenyImplementors = []string{"HostsDeny"}

func (ec *executionContext) _HostsDeny(ctx context.Context, sel ast.SelectionSet, obj *view.HostsDeny) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hostsDenyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HostsDeny")
		case "id":
			out.Values[i] = ec._HostsDeny_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ipAddress":
			out.Values[i] = ec._HostsDeny_ipAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isEnabled":
			out.Values[i] = ec._HostsDeny_isEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "remark":
			out.Values[i] = ec._HostsDeny_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._HostsDeny_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._HostsDeny_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._HostsDeny_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._HostsDeny_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var hubClientImplementors = []string{"HubClient"}

func (ec *executionContext) _HubClient(ctx context.Context, sel ast.SelectionSet, obj *view.HubClient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hubClientImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HubClient")
		case "userID":
			out.Values[i] = ec._HubClient_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "devices":
			out.Values[i] = ec._HubClient_devices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var hubDeviceImplementors = []string{"HubDevice"}

func (ec *executionContext) _HubDevice(ctx context.Context, sel ast.SelectionSet, obj *view.HubDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hubDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HubDevice")
		case "token":
			out.Values[i] = ec._HubDevice_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deviceUID":
			out.Values[i] = ec._HubDevice_deviceUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roomID":
			out.Values[i] = ec._HubDevice_roomID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var lineRateImplementors = []string{"LineRate"}

func (ec *executionContext) _LineRate(ctx context.Context, sel ast.SelectionSet, obj *view.LineRate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lineRateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LineRate")
		case "id":
			out.Values[i] = ec._LineRate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._LineRate_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._LineRate_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rate":
			out.Values[i] = ec._LineRate_rate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._LineRate_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._LineRate_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var lineRateHistoryImplementors = []string{"LineRateHistory"}

func (ec *executionContext) _LineRateHistory(ctx context.Context, sel ast.SelectionSet, obj *view.LineRateHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lineRateHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LineRateHistory")
		case "id":
			out.Values[i] = ec._LineRateHistory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._LineRateHistory_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._LineRateHistory_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rate":
			out.Values[i] = ec._LineRateHistory_rate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._LineRateHistory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._LineRateHistory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var lineRentImplementors = []string{"LineRent"}

func (ec *executionContext) _LineRent(ctx context.Context, sel ast.SelectionSet, obj *view.LineRent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lineRentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LineRent")
		case "id":
			out.Values[i] = ec._LineRent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._LineRent_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._LineRent_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._LineRent_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._LineRent_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listAgentRespImplementors = []string{"ListAgentResp"}

func (ec *executionContext) _ListAgentResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListAgentResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listAgentRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListAgentResp")
		case "agents":
			out.Values[i] = ec._ListAgentResp_agents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListAgentResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listAuditLogRespImplementors = []string{"ListAuditLogResp"}

func (ec *executionContext) _ListAuditLogResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListAuditLogResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listAuditLogRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListAuditLogResp")
		case "auditLogs":
			out.Values[i] = ec._ListAuditLogResp_auditLogs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListAuditLogResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listEmailRecordRespImplementors = []string{"ListEmailRecordResp"}

func (ec *executionContext) _ListEmailRecordResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListEmailRecordResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listEmailRecordRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListEmailRecordResp")
		case "emailRecords":
			out.Values[i] = ec._ListEmailRecordResp_emailRecords(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListEmailRecordResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listEventRespImplementors = []string{"ListEventResp"}

func (ec *executionContext) _ListEventResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListEventResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listEventRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListEventResp")
		case "events":
			out.Values[i] = ec._ListEventResp_events(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListEventResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listGamePlayerRespImplementors = []string{"ListGamePlayerResp"}

func (ec *executionContext) _ListGamePlayerResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListGamePlayerResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listGamePlayerRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListGamePlayerResp")
		case "players":
			out.Values[i] = ec._ListGamePlayerResp_players(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListGamePlayerResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listGameRespImplementors = []string{"ListGameResp"}

func (ec *executionContext) _ListGameResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListGameResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listGameRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListGameResp")
		case "list":
			out.Values[i] = ec._ListGameResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListGameResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listGameTransferRecordRespImplementors = []string{"ListGameTransferRecordResp"}

func (ec *executionContext) _ListGameTransferRecordResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListGameTransferRecordResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listGameTransferRecordRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListGameTransferRecordResp")
		case "records":
			out.Values[i] = ec._ListGameTransferRecordResp_records(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListGameTransferRecordResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listGeneralAgentRespImplementors = []string{"ListGeneralAgentResp"}

func (ec *executionContext) _ListGeneralAgentResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListGeneralAgentResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listGeneralAgentRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListGeneralAgentResp")
		case "generalAgents":
			out.Values[i] = ec._ListGeneralAgentResp_generalAgents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListGeneralAgentResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listHostsDenyRespImplementors = []string{"ListHostsDenyResp"}

func (ec *executionContext) _ListHostsDenyResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListHostsDenyResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listHostsDenyRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListHostsDenyResp")
		case "hostsDenys":
			out.Values[i] = ec._ListHostsDenyResp_hostsDenys(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListHostsDenyResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listLineRateHistoryRespImplementors = []string{"ListLineRateHistoryResp"}

func (ec *executionContext) _ListLineRateHistoryResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListLineRateHistoryResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listLineRateHistoryRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListLineRateHistoryResp")
		case "list":
			out.Values[i] = ec._ListLineRateHistoryResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListLineRateHistoryResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listLineRateRespImplementors = []string{"ListLineRateResp"}

func (ec *executionContext) _ListLineRateResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListLineRateResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listLineRateRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListLineRateResp")
		case "list":
			out.Values[i] = ec._ListLineRateResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListLineRateResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listLineRentRespImplementors = []string{"ListLineRentResp"}

func (ec *executionContext) _ListLineRentResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListLineRentResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listLineRentRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListLineRentResp")
		case "list":
			out.Values[i] = ec._ListLineRentResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListLineRentResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMerchantBalanceLogRespImplementors = []string{"ListMerchantBalanceLogResp"}

func (ec *executionContext) _ListMerchantBalanceLogResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListMerchantBalanceLogResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMerchantBalanceLogRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMerchantBalanceLogResp")
		case "list":
			out.Values[i] = ec._ListMerchantBalanceLogResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListMerchantBalanceLogResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMerchantDepositLogRespImplementors = []string{"ListMerchantDepositLogResp"}

func (ec *executionContext) _ListMerchantDepositLogResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListMerchantDepositLogResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMerchantDepositLogRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMerchantDepositLogResp")
		case "list":
			out.Values[i] = ec._ListMerchantDepositLogResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListMerchantDepositLogResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMerchantDepositMethodRespImplementors = []string{"ListMerchantDepositMethodResp"}

func (ec *executionContext) _ListMerchantDepositMethodResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListMerchantDepositMethodResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMerchantDepositMethodRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMerchantDepositMethodResp")
		case "list":
			out.Values[i] = ec._ListMerchantDepositMethodResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListMerchantDepositMethodResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMerchantFeeModeRespImplementors = []string{"ListMerchantFeeModeResp"}

func (ec *executionContext) _ListMerchantFeeModeResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListMerchantFeeModeResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMerchantFeeModeRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMerchantFeeModeResp")
		case "list":
			out.Values[i] = ec._ListMerchantFeeModeResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListMerchantFeeModeResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMerchantLineRespImplementors = []string{"ListMerchantLineResp"}

func (ec *executionContext) _ListMerchantLineResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListMerchantLineResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMerchantLineRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMerchantLineResp")
		case "list":
			out.Values[i] = ec._ListMerchantLineResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListMerchantLineResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMerchantLoginHistoryRespImplementors = []string{"ListMerchantLoginHistoryResp"}

func (ec *executionContext) _ListMerchantLoginHistoryResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListMerchantLoginHistoryResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMerchantLoginHistoryRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMerchantLoginHistoryResp")
		case "list":
			out.Values[i] = ec._ListMerchantLoginHistoryResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListMerchantLoginHistoryResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMerchantRespImplementors = []string{"ListMerchantResp"}

func (ec *executionContext) _ListMerchantResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListMerchantResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMerchantRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMerchantResp")
		case "list":
			out.Values[i] = ec._ListMerchantResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListMerchantResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMerchantWithdrawLogRespImplementors = []string{"ListMerchantWithdrawLogResp"}

func (ec *executionContext) _ListMerchantWithdrawLogResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListMerchantWithdrawLogResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMerchantWithdrawLogRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMerchantWithdrawLogResp")
		case "list":
			out.Values[i] = ec._ListMerchantWithdrawLogResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListMerchantWithdrawLogResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMerchantWithdrawMethodRespImplementors = []string{"ListMerchantWithdrawMethodResp"}

func (ec *executionContext) _ListMerchantWithdrawMethodResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListMerchantWithdrawMethodResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMerchantWithdrawMethodRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMerchantWithdrawMethodResp")
		case "list":
			out.Values[i] = ec._ListMerchantWithdrawMethodResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListMerchantWithdrawMethodResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listMetadataImplementors = []string{"ListMetadata"}

func (ec *executionContext) _ListMetadata(ctx context.Context, sel ast.SelectionSet, obj *view.ListMetadata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listMetadataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListMetadata")
		case "count":
			out.Values[i] = ec._ListMetadata_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listRoleRespImplementors = []string{"ListRoleResp"}

func (ec *executionContext) _ListRoleResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListRoleResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listRoleRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListRoleResp")
		case "roles":
			out.Values[i] = ec._ListRoleResp_roles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListRoleResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listSecurityEventRespImplementors = []string{"ListSecurityEventResp"}

func (ec *executionContext) _ListSecurityEventResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListSecurityEventResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listSecurityEventRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListSecurityEventResp")
		case "securityEvents":
			out.Values[i] = ec._ListSecurityEventResp_securityEvents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListSecurityEventResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listSmsRecordRespImplementors = []string{"ListSmsRecordResp"}

func (ec *executionContext) _ListSmsRecordResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListSmsRecordResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listSmsRecordRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListSmsRecordResp")
		case "smsRecords":
			out.Values[i] = ec._ListSmsRecordResp_smsRecords(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListSmsRecordResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listSystemLineRespImplementors = []string{"ListSystemLineResp"}

func (ec *executionContext) _ListSystemLineResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListSystemLineResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listSystemLineRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListSystemLineResp")
		case "list":
			out.Values[i] = ec._ListSystemLineResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListSystemLineResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listTagRespImplementors = []string{"ListTagResp"}

func (ec *executionContext) _ListTagResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListTagResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listTagRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListTagResp")
		case "tags":
			out.Values[i] = ec._ListTagResp_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListTagResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listTemplateRespImplementors = []string{"ListTemplateResp"}

func (ec *executionContext) _ListTemplateResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListTemplateResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listTemplateRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListTemplateResp")
		case "templates":
			out.Values[i] = ec._ListTemplateResp_templates(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListTemplateResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserLoginHistoryRespImplementors = []string{"ListUserLoginHistoryResp"}

func (ec *executionContext) _ListUserLoginHistoryResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserLoginHistoryResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserLoginHistoryRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserLoginHistoryResp")
		case "userLoginHistories":
			out.Values[i] = ec._ListUserLoginHistoryResp_userLoginHistories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserLoginHistoryResp_meta(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserRespImplementors = []string{"ListUserResp"}

func (ec *executionContext) _ListUserResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserResp")
		case "users":
			out.Values[i] = ec._ListUserResp_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserRoleRespImplementors = []string{"ListUserRoleResp"}

func (ec *executionContext) _ListUserRoleResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserRoleResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserRoleRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserRoleResp")
		case "userRoles":
			out.Values[i] = ec._ListUserRoleResp_userRoles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserRoleResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserTagRespImplementors = []string{"ListUserTagResp"}

func (ec *executionContext) _ListUserTagResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserTagResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserTagRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserTagResp")
		case "userTags":
			out.Values[i] = ec._ListUserTagResp_userTags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserTagResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listUserWhitelistRespImplementors = []string{"ListUserWhitelistResp"}

func (ec *executionContext) _ListUserWhitelistResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListUserWhitelistResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listUserWhitelistRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListUserWhitelistResp")
		case "userWhitelists":
			out.Values[i] = ec._ListUserWhitelistResp_userWhitelists(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._ListUserWhitelistResp_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listVipClaimLogRespImplementors = []string{"ListVipClaimLogResp"}

func (ec *executionContext) _ListVipClaimLogResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListVipClaimLogResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listVipClaimLogRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListVipClaimLogResp")
		case "list":
			out.Values[i] = ec._ListVipClaimLogResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListVipClaimLogResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listVipLevelRespImplementors = []string{"ListVipLevelResp"}

func (ec *executionContext) _ListVipLevelResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListVipLevelResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listVipLevelRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListVipLevelResp")
		case "list":
			out.Values[i] = ec._ListVipLevelResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListVipLevelResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listVipUpgradeLogRespImplementors = []string{"ListVipUpgradeLogResp"}

func (ec *executionContext) _ListVipUpgradeLogResp(ctx context.Context, sel ast.SelectionSet, obj *view.ListVipUpgradeLogResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listVipUpgradeLogRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListVipUpgradeLogResp")
		case "list":
			out.Values[i] = ec._ListVipUpgradeLogResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._ListVipUpgradeLogResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var loginRespImplementors = []string{"LoginResp"}

func (ec *executionContext) _LoginResp(ctx context.Context, sel ast.SelectionSet, obj *view.LoginResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginResp")
		case "token":
			out.Values[i] = ec._LoginResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deviceUID":
			out.Values[i] = ec._LoginResp_deviceUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userAgent":
			out.Values[i] = ec._LoginResp_userAgent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var menuImplementors = []string{"Menu"}

func (ec *executionContext) _Menu(ctx context.Context, sel ast.SelectionSet, obj *view.Menu) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, menuImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Menu")
		case "name":
			out.Values[i] = ec._Menu_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "key":
			out.Values[i] = ec._Menu_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "superKey":
			out.Values[i] = ec._Menu_superKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "next":
			out.Values[i] = ec._Menu_next(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantImplementors = []string{"Merchant"}

func (ec *executionContext) _Merchant(ctx context.Context, sel ast.SelectionSet, obj *view.Merchant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Merchant")
		case "id":
			out.Values[i] = ec._Merchant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Merchant_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Merchant_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Merchant_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Merchant_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantBalanceLogImplementors = []string{"MerchantBalanceLog"}

func (ec *executionContext) _MerchantBalanceLog(ctx context.Context, sel ast.SelectionSet, obj *view.MerchantBalanceLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantBalanceLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantBalanceLog")
		case "id":
			out.Values[i] = ec._MerchantBalanceLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchantId":
			out.Values[i] = ec._MerchantBalanceLog_merchantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._MerchantBalanceLog_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._MerchantBalanceLog_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantBalanceLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantBalanceLog_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantDepositLogImplementors = []string{"MerchantDepositLog"}

func (ec *executionContext) _MerchantDepositLog(ctx context.Context, sel ast.SelectionSet, obj *view.MerchantDepositLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantDepositLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantDepositLog")
		case "id":
			out.Values[i] = ec._MerchantDepositLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchantId":
			out.Values[i] = ec._MerchantDepositLog_merchantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._MerchantDepositLog_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._MerchantDepositLog_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantDepositLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantDepositLog_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantDepositMethodImplementors = []string{"MerchantDepositMethod"}

func (ec *executionContext) _MerchantDepositMethod(ctx context.Context, sel ast.SelectionSet, obj *view.MerchantDepositMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantDepositMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantDepositMethod")
		case "id":
			out.Values[i] = ec._MerchantDepositMethod_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MerchantDepositMethod_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._MerchantDepositMethod_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantDepositMethod_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantDepositMethod_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantFeeModeImplementors = []string{"MerchantFeeMode"}

func (ec *executionContext) _MerchantFeeMode(ctx context.Context, sel ast.SelectionSet, obj *view.MerchantFeeMode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantFeeModeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantFeeMode")
		case "id":
			out.Values[i] = ec._MerchantFeeMode_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MerchantFeeMode_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._MerchantFeeMode_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantFeeMode_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantFeeMode_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantLineImplementors = []string{"MerchantLine"}

func (ec *executionContext) _MerchantLine(ctx context.Context, sel ast.SelectionSet, obj *view.MerchantLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantLineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantLine")
		case "id":
			out.Values[i] = ec._MerchantLine_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MerchantLine_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._MerchantLine_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantLine_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantLine_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantLoginHistoryImplementors = []string{"MerchantLoginHistory"}

func (ec *executionContext) _MerchantLoginHistory(ctx context.Context, sel ast.SelectionSet, obj *view.MerchantLoginHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantLoginHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantLoginHistory")
		case "id":
			out.Values[i] = ec._MerchantLoginHistory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchantId":
			out.Values[i] = ec._MerchantLoginHistory_merchantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ip":
			out.Values[i] = ec._MerchantLoginHistory_ip(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantLoginHistory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantLoginHistory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantWithdrawLogImplementors = []string{"MerchantWithdrawLog"}

func (ec *executionContext) _MerchantWithdrawLog(ctx context.Context, sel ast.SelectionSet, obj *view.MerchantWithdrawLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantWithdrawLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantWithdrawLog")
		case "id":
			out.Values[i] = ec._MerchantWithdrawLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchantId":
			out.Values[i] = ec._MerchantWithdrawLog_merchantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._MerchantWithdrawLog_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._MerchantWithdrawLog_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantWithdrawLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantWithdrawLog_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantWithdrawMethodImplementors = []string{"MerchantWithdrawMethod"}

func (ec *executionContext) _MerchantWithdrawMethod(ctx context.Context, sel ast.SelectionSet, obj *view.MerchantWithdrawMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantWithdrawMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantWithdrawMethod")
		case "id":
			out.Values[i] = ec._MerchantWithdrawMethod_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MerchantWithdrawMethod_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._MerchantWithdrawMethod_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantWithdrawMethod_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantWithdrawMethod_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metaImplementors = []string{"Meta"}

func (ec *executionContext) _Meta(ctx context.Context, sel ast.SelectionSet, obj *view.Meta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Meta")
		case "total":
			out.Values[i] = ec._Meta_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._Meta_page(ctx, field, obj)
		case "perPage":
			out.Values[i] = ec._Meta_perPage(ctx, field, obj)
		case "totalPage":
			out.Values[i] = ec._Meta_totalPage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAgent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAgent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAgent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAgent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAgent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAgent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createGeneralAgent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGeneralAgent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGeneralAgent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGeneralAgent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteGeneralAgent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGeneralAgent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "CreateCommonUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateCommonUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Login":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Login(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Logout":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Logout(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "RefreshToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_RefreshToken(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createEvent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEvent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateEvent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEvent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteEvent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEvent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSystemLine":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemLine(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateSystemLine":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemLine(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSystemLine":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSystemLine(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMerchantLine":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMerchantLine(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMerchantLine":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMerchantLine(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMerchantLine":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMerchantLine(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLineRent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLineRent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateLineRent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLineRent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteLineRent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLineRent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLineRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLineRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateLineRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLineRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteLineRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLineRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createGame":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGame(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGame":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGame(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteGame":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGame(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMerchant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMerchant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMerchant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMerchant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMerchant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMerchant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMerchantWithdrawMethod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMerchantWithdrawMethod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMerchantWithdrawMethod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMerchantWithdrawMethod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMerchantWithdrawMethod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMerchantWithdrawMethod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMerchantDepositMethod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMerchantDepositMethod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMerchantDepositMethod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMerchantDepositMethod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMerchantDepositMethod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMerchantDepositMethod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMerchantFeeMode":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMerchantFeeMode(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMerchantFeeMode":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMerchantFeeMode(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMerchantFeeMode":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMerchantFeeMode(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "applyMerchantBalance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_applyMerchantBalance(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "auditMerchantBalance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_auditMerchantBalance(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createHostsDeny":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createHostsDeny(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateHostsDeny":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateHostsDeny(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteHostsDeny":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteHostsDeny(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "configSms":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_configSms(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "configEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_configEmail(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTemplate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTemplate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTemplate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTemplate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTemplate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTemplate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSecurityEvent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSecurityEvent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateSecurityEvent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSecurityEvent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSecurityEvent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSecurityEvent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserPassword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserWhitelist":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserWhitelist(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserWhitelist":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserWhitelist(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUserWhitelist":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserWhitelist(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUserRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUserTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "banUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_banUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unbanUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unbanUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createVipLevel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createVipLevel(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateVipLevel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateVipLevel(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteVipLevel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteVipLevel(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "claimVipReward":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_claimVipReward(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "Me":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Me(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listEvent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listEvent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listHistoryEvent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listHistoryEvent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listGamePlayer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listGamePlayer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listGameTransferRecord":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listGameTransferRecord(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listSystemLine":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listSystemLine(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMerchantLine":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMerchantLine(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listLineRent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listLineRent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listLineRate":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listLineRate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listLineRateHistory":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listLineRateHistory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listGame":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listGame(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listHubClients":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listHubClients(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMenu":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMenu(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMerchantWithdrawMethod":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMerchantWithdrawMethod(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMerchantDepositMethod":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMerchantDepositMethod(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMerchantFeeMode":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMerchantFeeMode(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMerchantBalanceLog":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMerchantBalanceLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMerchantWithdrawLog":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMerchantWithdrawLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMerchantDepositLog":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMerchantDepositLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listMerchantLoginHistory":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMerchantLoginHistory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getHostsDeny":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHostsDeny(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listHostsDeny":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listHostsDeny(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listTemplate":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listTemplate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listAuditLog":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listAuditLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTag":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTag(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listTag":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listTag(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listSecurityEvent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listSecurityEvent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getSmsConfig":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSmsConfig(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listSmsRecord":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listSmsRecord(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getEmailConfig":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEmailConfig(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listEmailRecord":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listEmailRecord(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserWhitelist":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserWhitelist(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUserWhitelist":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserWhitelist(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUserRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserTag":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserTag(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUserTag":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserTag(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUserLoginHistory":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserLoginHistory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "userWithdrawInfo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userWithdrawInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "userDepositInfo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userDepositInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "userScore":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userScore(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listVipUpgradeLog":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listVipUpgradeLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listVipClaimLog":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listVipClaimLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listVipLevel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listVipLevel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var qyeryImplementors = []string{"Qyery"}

func (ec *executionContext) _Qyery(ctx context.Context, sel ast.SelectionSet, obj *view.Qyery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, qyeryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Qyery")
		case "listAgent":
			out.Values[i] = ec._Qyery_listAgent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "listGeneralAgent":
			out.Values[i] = ec._Qyery_listGeneralAgent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var refreshTokenRespImplementors = []string{"RefreshTokenResp"}

func (ec *executionContext) _RefreshTokenResp(ctx context.Context, sel ast.SelectionSet, obj *view.RefreshTokenResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, refreshTokenRespImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RefreshTokenResp")
		case "token":
			out.Values[i] = ec._RefreshTokenResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expires":
			out.Values[i] = ec._RefreshTokenResp_expires(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *view.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "id":
			out.Values[i] = ec._Role_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Role_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authority":
			out.Values[i] = ec._Role_authority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "supportAccountType":
			out.Values[i] = ec._Role_supportAccountType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Role_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._Role_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Role_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._Role_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var securityEventImplementors = []string{"SecurityEvent"}

func (ec *executionContext) _SecurityEvent(ctx context.Context, sel ast.SelectionSet, obj *view.SecurityEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, securityEventImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SecurityEvent")
		case "id":
			out.Values[i] = ec._SecurityEvent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._SecurityEvent_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._SecurityEvent_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isEnable":
			out.Values[i] = ec._SecurityEvent_isEnable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._SecurityEvent_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._SecurityEvent_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._SecurityEvent_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._SecurityEvent_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var smsConfigImplementors = []string{"SmsConfig"}

func (ec *executionContext) _SmsConfig(ctx context.Context, sel ast.SelectionSet, obj *view.SmsConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, smsConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SmsConfig")
		case "account":
			out.Values[i] = ec._SmsConfig_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._SmsConfig_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var smsRecordImplementors = []string{"SmsRecord"}

func (ec *executionContext) _SmsRecord(ctx context.Context, sel ast.SelectionSet, obj *view.SmsRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, smsRecordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SmsRecord")
		case "id":
			out.Values[i] = ec._SmsRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumber":
			out.Values[i] = ec._SmsRecord_phoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._SmsRecord_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sendTime":
			out.Values[i] = ec._SmsRecord_sendTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "account":
			out.Values[i] = ec._SmsRecord_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._SmsRecord_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._SmsRecord_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._SmsRecord_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "receiveMessage":
		return ec._Subscription_receiveMessage(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var systemLineImplementors = []string{"SystemLine"}

func (ec *executionContext) _SystemLine(ctx context.Context, sel ast.SelectionSet, obj *view.SystemLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemLineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemLine")
		case "id":
			out.Values[i] = ec._SystemLine_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._SystemLine_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._SystemLine_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._SystemLine_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._SystemLine_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *view.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":
			out.Values[i] = ec._Tag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Tag_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "RGBHex":
			out.Values[i] = ec._Tag_RGBHex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isEnable":
			out.Values[i] = ec._Tag_isEnable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Tag_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Tag_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._Tag_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._Tag_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateImplementors = []string{"Template"}

func (ec *executionContext) _Template(ctx context.Context, sel ast.SelectionSet, obj *view.Template) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Template")
		case "id":
			out.Values[i] = ec._Template_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Template_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._Template_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Template_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Template_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *view.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountType":
			out.Values[i] = ec._User_accountType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._User_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "aliasName":
			out.Values[i] = ec._User_aliasName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "area":
			out.Values[i] = ec._User_area(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notes":
			out.Values[i] = ec._User_notes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "avatarURL":
			out.Values[i] = ec._User_avatarURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastLoginAt":
			out.Values[i] = ec._User_lastLoginAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastLoginIP":
			out.Values[i] = ec._User_lastLoginIP(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDelete":
			out.Values[i] = ec._User_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._User_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roles":
			out.Values[i] = ec._User_roles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "whitelists":
			out.Values[i] = ec._User_whitelists(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tags":
			out.Values[i] = ec._User_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userDepositInfoImplementors = []string{"UserDepositInfo"}

func (ec *executionContext) _UserDepositInfo(ctx context.Context, sel ast.SelectionSet, obj *view.UserDepositInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userDepositInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserDepositInfo")
		case "id":
			out.Values[i] = ec._UserDepositInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserDepositInfo_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankName":
			out.Values[i] = ec._UserDepositInfo_bankName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankBranch":
			out.Values[i] = ec._UserDepositInfo_bankBranch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankAccount":
			out.Values[i] = ec._UserDepositInfo_bankAccount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankAccountName":
			out.Values[i] = ec._UserDepositInfo_bankAccountName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserDepositInfo_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._UserDepositInfo_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._UserDepositInfo_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._UserDepositInfo_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userLoginHistoryImplementors = []string{"UserLoginHistory"}

func (ec *executionContext) _UserLoginHistory(ctx context.Context, sel ast.SelectionSet, obj *view.UserLoginHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userLoginHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserLoginHistory")
		case "id":
			out.Values[i] = ec._UserLoginHistory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserLoginHistory_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ipAddress":
			out.Values[i] = ec._UserLoginHistory_ipAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "country":
			out.Values[i] = ec._UserLoginHistory_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "administrativeArea":
			out.Values[i] = ec._UserLoginHistory_administrativeArea(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deviceOS":
			out.Values[i] = ec._UserLoginHistory_deviceOS(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserLoginHistory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userRoleImplementors = []string{"UserRole"}

func (ec *executionContext) _UserRole(ctx context.Context, sel ast.SelectionSet, obj *view.UserRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRole")
		case "id":
			out.Values[i] = ec._UserRole_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserRole_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roleID":
			out.Values[i] = ec._UserRole_roleID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isAdmin":
			out.Values[i] = ec._UserRole_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._UserRole_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._UserRole_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserRole_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._UserRole_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "role":
			out.Values[i] = ec._UserRole_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userScoreImplementors = []string{"UserScore"}

func (ec *executionContext) _UserScore(ctx context.Context, sel ast.SelectionSet, obj *view.UserScore) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userScoreImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserScore")
		case "id":
			out.Values[i] = ec._UserScore_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserScore_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "score":
			out.Values[i] = ec._UserScore_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserScore_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._UserScore_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._UserScore_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._UserScore_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userTagImplementors = []string{"UserTag"}

func (ec *executionContext) _UserTag(ctx context.Context, sel ast.SelectionSet, obj *view.UserTag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userTagImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserTag")
		case "id":
			out.Values[i] = ec._UserTag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserTag_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tagID":
			out.Values[i] = ec._UserTag_tagID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserTag_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._UserTag_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._UserTag_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._UserTag_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tag":
			out.Values[i] = ec._UserTag_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userWhitelistImplementors = []string{"UserWhitelist"}

func (ec *executionContext) _UserWhitelist(ctx context.Context, sel ast.SelectionSet, obj *view.UserWhitelist) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userWhitelistImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserWhitelist")
		case "id":
			out.Values[i] = ec._UserWhitelist_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserWhitelist_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ipAddress":
			out.Values[i] = ec._UserWhitelist_ipAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserWhitelist_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userWithdrawInfoImplementors = []string{"UserWithdrawInfo"}

func (ec *executionContext) _UserWithdrawInfo(ctx context.Context, sel ast.SelectionSet, obj *view.UserWithdrawInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userWithdrawInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserWithdrawInfo")
		case "id":
			out.Values[i] = ec._UserWithdrawInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._UserWithdrawInfo_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankName":
			out.Values[i] = ec._UserWithdrawInfo_bankName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankBranch":
			out.Values[i] = ec._UserWithdrawInfo_bankBranch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankAccount":
			out.Values[i] = ec._UserWithdrawInfo_bankAccount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankAccountName":
			out.Values[i] = ec._UserWithdrawInfo_bankAccountName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserWithdrawInfo_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._UserWithdrawInfo_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUserID":
			out.Values[i] = ec._UserWithdrawInfo_createUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserID":
			out.Values[i] = ec._UserWithdrawInfo_updateUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vipClaimLogImplementors = []string{"VipClaimLog"}

func (ec *executionContext) _VipClaimLog(ctx context.Context, sel ast.SelectionSet, obj *view.VipClaimLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vipClaimLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VipClaimLog")
		case "id":
			out.Values[i] = ec._VipClaimLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._VipClaimLog_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vipLevelID":
			out.Values[i] = ec._VipClaimLog_vipLevelID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "claimAt":
			out.Values[i] = ec._VipClaimLog_claimAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._VipClaimLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._VipClaimLog_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vipLevelImplementors = []string{"VipLevel"}

func (ec *executionContext) _VipLevel(ctx context.Context, sel ast.SelectionSet, obj *view.VipLevel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vipLevelImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VipLevel")
		case "id":
			out.Values[i] = ec._VipLevel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._VipLevel_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._VipLevel_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "icon":
			out.Values[i] = ec._VipLevel_icon(ctx, field, obj)
		case "sort":
			out.Values[i] = ec._VipLevel_sort(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._VipLevel_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._VipLevel_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vipUpgradeLogImplementors = []string{"VipUpgradeLog"}

func (ec *executionContext) _VipUpgradeLog(ctx context.Context, sel ast.SelectionSet, obj *view.VipUpgradeLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vipUpgradeLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VipUpgradeLog")
		case "id":
			out.Values[i] = ec._VipUpgradeLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._VipUpgradeLog_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vipLevelID":
			out.Values[i] = ec._VipUpgradeLog_vipLevelID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "upgradeAt":
			out.Values[i] = ec._VipUpgradeLog_upgradeAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._VipUpgradeLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._VipUpgradeLog_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx context.Context, v interface{}) (view.AccountType, error) {
	var res view.AccountType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountType2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx context.Context, sel ast.SelectionSet, v view.AccountType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAgent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Agent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAgent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgent(ctx context.Context, sel ast.SelectionSet, v *view.Agent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Agent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAgentCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentCreateInput(ctx context.Context, v interface{}) (view.AgentCreateInput, error) {
	res, err := ec.unmarshalInputAgentCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAgentFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentFilterInput(ctx context.Context, v interface{}) (view.AgentFilterInput, error) {
	res, err := ec.unmarshalInputAgentFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAgentUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentUpdateInput(ctx context.Context, v interface{}) (view.AgentUpdateInput, error) {
	res, err := ec.unmarshalInputAgentUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuditLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.AuditLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuditLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuditLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLog(ctx context.Context, sel ast.SelectionSet, v *view.AuditLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditLog(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuditLogFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogFilterInput(ctx context.Context, v interface{}) (view.AuditLogFilterInput, error) {
	res, err := ec.unmarshalInputAuditLogFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNClaimVipRewardInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐClaimVipRewardInput(ctx context.Context, v interface{}) (view.ClaimVipRewardInput, error) {
	res, err := ec.unmarshalInputClaimVipRewardInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClaims2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐClaims(ctx context.Context, sel ast.SelectionSet, v view.Claims) graphql.Marshaler {
	return ec._Claims(ctx, sel, &v)
}

func (ec *executionContext) marshalNClaims2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐClaims(ctx context.Context, sel ast.SelectionSet, v *view.Claims) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Claims(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCommonUserReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserReqInput(ctx context.Context, v interface{}) (view.CreateCommonUserReqInput, error) {
	res, err := ec.unmarshalInputCreateCommonUserReqInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateCommonUserResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserResp(ctx context.Context, sel ast.SelectionSet, v view.CreateCommonUserResp) graphql.Marshaler {
	return ec._CreateCommonUserResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateCommonUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateCommonUserResp(ctx context.Context, sel ast.SelectionSet, v *view.CreateCommonUserResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateCommonUserResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateUserReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserReqInput(ctx context.Context, v interface{}) (view.CreateUserReqInput, error) {
	res, err := ec.unmarshalInputCreateUserReqInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateUserResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserResp(ctx context.Context, sel ast.SelectionSet, v view.CreateUserResp) graphql.Marshaler {
	return ec._CreateUserResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐCreateUserResp(ctx context.Context, sel ast.SelectionSet, v *view.CreateUserResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateUserResp(ctx, sel, v)
}

func (ec *executionContext) marshalNData2ᚕboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐData(ctx context.Context, sel ast.SelectionSet, v []view.Data) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOData2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx context.Context, v interface{}) (decimal.Decimal, error) {
	res, err := value.UnmarshalDecimal(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDecimal2githubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx context.Context, sel ast.SelectionSet, v decimal.Decimal) graphql.Marshaler {
	res := value.MarshalDecimal(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDeviceOS2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐDeviceOs(ctx context.Context, v interface{}) (view.DeviceOs, error) {
	var res view.DeviceOs
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceOS2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐDeviceOs(ctx context.Context, sel ast.SelectionSet, v view.DeviceOs) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEmailConfig2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailConfig(ctx context.Context, sel ast.SelectionSet, v view.EmailConfig) graphql.Marshaler {
	return ec._EmailConfig(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmailConfig2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailConfig(ctx context.Context, sel ast.SelectionSet, v *view.EmailConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmailConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmailConfigInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailConfigInput(ctx context.Context, v interface{}) (view.EmailConfigInput, error) {
	res, err := ec.unmarshalInputEmailConfigInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmailRecord2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.EmailRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmailRecord2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmailRecord2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailRecord(ctx context.Context, sel ast.SelectionSet, v *view.EmailRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmailRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmailRecordFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailRecordFilterInput(ctx context.Context, v interface{}) (view.EmailRecordFilterInput, error) {
	res, err := ec.unmarshalInputEmailRecordFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEvent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Event) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEvent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEvent(ctx context.Context, sel ast.SelectionSet, v *view.Event) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Event(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEventCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventCreateInput(ctx context.Context, v interface{}) (view.EventCreateInput, error) {
	res, err := ec.unmarshalInputEventCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventFilterInput(ctx context.Context, v interface{}) (view.EventFilterInput, error) {
	res, err := ec.unmarshalInputEventFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventUpdateInput(ctx context.Context, v interface{}) (view.EventUpdateInput, error) {
	res, err := ec.unmarshalInputEventUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFileInfo2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfo(ctx context.Context, sel ast.SelectionSet, v []*view.FileInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFileInfo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNFileInfoInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfoInput(ctx context.Context, v interface{}) ([]*view.FileInfoInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*view.FileInfoInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFileInfoInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfoInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGame2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Game) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGame2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGame(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGame2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGame(ctx context.Context, sel ast.SelectionSet, v *view.Game) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Game(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGameCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameCreateInput(ctx context.Context, v interface{}) (view.GameCreateInput, error) {
	res, err := ec.unmarshalInputGameCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGameFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameFilterInput(ctx context.Context, v interface{}) (view.GameFilterInput, error) {
	res, err := ec.unmarshalInputGameFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGamePlayer2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGamePlayerᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.GamePlayer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGamePlayer2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGamePlayer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGamePlayer2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGamePlayer(ctx context.Context, sel ast.SelectionSet, v *view.GamePlayer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GamePlayer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGamePlayerFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGamePlayerFilterInput(ctx context.Context, v interface{}) (view.GamePlayerFilterInput, error) {
	res, err := ec.unmarshalInputGamePlayerFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGameTransferRecord2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameTransferRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.GameTransferRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGameTransferRecord2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameTransferRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGameTransferRecord2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameTransferRecord(ctx context.Context, sel ast.SelectionSet, v *view.GameTransferRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameTransferRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGameTransferRecordFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameTransferRecordFilterInput(ctx context.Context, v interface{}) (view.GameTransferRecordFilterInput, error) {
	res, err := ec.unmarshalInputGameTransferRecordFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGameUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameUpdateInput(ctx context.Context, v interface{}) (view.GameUpdateInput, error) {
	res, err := ec.unmarshalInputGameUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGeneralAgent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.GeneralAgent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGeneralAgent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGeneralAgent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgent(ctx context.Context, sel ast.SelectionSet, v *view.GeneralAgent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GeneralAgent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGeneralAgentCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentCreateInput(ctx context.Context, v interface{}) (view.GeneralAgentCreateInput, error) {
	res, err := ec.unmarshalInputGeneralAgentCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGeneralAgentFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentFilterInput(ctx context.Context, v interface{}) (view.GeneralAgentFilterInput, error) {
	res, err := ec.unmarshalInputGeneralAgentFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGeneralAgentUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentUpdateInput(ctx context.Context, v interface{}) (view.GeneralAgentUpdateInput, error) {
	res, err := ec.unmarshalInputGeneralAgentUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHostsDeny2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx context.Context, sel ast.SelectionSet, v view.HostsDeny) graphql.Marshaler {
	return ec._HostsDeny(ctx, sel, &v)
}

func (ec *executionContext) marshalNHostsDeny2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.HostsDeny) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHostsDeny2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDeny(ctx context.Context, sel ast.SelectionSet, v *view.HostsDeny) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HostsDeny(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHostsDenyCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyCreateInput(ctx context.Context, v interface{}) (view.HostsDenyCreateInput, error) {
	res, err := ec.unmarshalInputHostsDenyCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHostsDenyFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx context.Context, v interface{}) (view.HostsDenyFilterInput, error) {
	res, err := ec.unmarshalInputHostsDenyFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHostsDenyUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyUpdateInput(ctx context.Context, v interface{}) (view.HostsDenyUpdateInput, error) {
	res, err := ec.unmarshalInputHostsDenyUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHubClient2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubClientᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.HubClient) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHubClient2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubClient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHubClient2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubClient(ctx context.Context, sel ast.SelectionSet, v *view.HubClient) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HubClient(ctx, sel, v)
}

func (ec *executionContext) marshalNHubDevice2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubDeviceᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.HubDevice) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHubDevice2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHubDevice2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHubDevice(ctx context.Context, sel ast.SelectionSet, v *view.HubDevice) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HubDevice(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt642int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLineRate2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.LineRate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLineRate2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLineRate2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRate(ctx context.Context, sel ast.SelectionSet, v *view.LineRate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LineRate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLineRateCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateCreateInput(ctx context.Context, v interface{}) (view.LineRateCreateInput, error) {
	res, err := ec.unmarshalInputLineRateCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLineRateFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateFilterInput(ctx context.Context, v interface{}) (view.LineRateFilterInput, error) {
	res, err := ec.unmarshalInputLineRateFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLineRateHistory2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateHistoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.LineRateHistory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLineRateHistory2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLineRateHistory2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateHistory(ctx context.Context, sel ast.SelectionSet, v *view.LineRateHistory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LineRateHistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLineRateUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateUpdateInput(ctx context.Context, v interface{}) (view.LineRateUpdateInput, error) {
	res, err := ec.unmarshalInputLineRateUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLineRent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.LineRent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLineRent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLineRent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRent(ctx context.Context, sel ast.SelectionSet, v *view.LineRent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LineRent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLineRentCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentCreateInput(ctx context.Context, v interface{}) (view.LineRentCreateInput, error) {
	res, err := ec.unmarshalInputLineRentCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLineRentFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentFilterInput(ctx context.Context, v interface{}) (view.LineRentFilterInput, error) {
	res, err := ec.unmarshalInputLineRentFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLineRentUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentUpdateInput(ctx context.Context, v interface{}) (view.LineRentUpdateInput, error) {
	res, err := ec.unmarshalInputLineRentUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNListAgentResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListAgentResp(ctx context.Context, sel ast.SelectionSet, v *view.ListAgentResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListAgentResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListAuditLogResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListAuditLogResp(ctx context.Context, sel ast.SelectionSet, v view.ListAuditLogResp) graphql.Marshaler {
	return ec._ListAuditLogResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListAuditLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListAuditLogResp(ctx context.Context, sel ast.SelectionSet, v *view.ListAuditLogResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListAuditLogResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListEmailRecordResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListEmailRecordResp(ctx context.Context, sel ast.SelectionSet, v view.ListEmailRecordResp) graphql.Marshaler {
	return ec._ListEmailRecordResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListEmailRecordResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListEmailRecordResp(ctx context.Context, sel ast.SelectionSet, v *view.ListEmailRecordResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListEmailRecordResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListEventResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListEventResp(ctx context.Context, sel ast.SelectionSet, v view.ListEventResp) graphql.Marshaler {
	return ec._ListEventResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListEventResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListEventResp(ctx context.Context, sel ast.SelectionSet, v *view.ListEventResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListEventResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListGamePlayerResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGamePlayerResp(ctx context.Context, sel ast.SelectionSet, v view.ListGamePlayerResp) graphql.Marshaler {
	return ec._ListGamePlayerResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListGamePlayerResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGamePlayerResp(ctx context.Context, sel ast.SelectionSet, v *view.ListGamePlayerResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListGamePlayerResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListGameResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGameResp(ctx context.Context, sel ast.SelectionSet, v view.ListGameResp) graphql.Marshaler {
	return ec._ListGameResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListGameResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGameResp(ctx context.Context, sel ast.SelectionSet, v *view.ListGameResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListGameResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListGameTransferRecordResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGameTransferRecordResp(ctx context.Context, sel ast.SelectionSet, v view.ListGameTransferRecordResp) graphql.Marshaler {
	return ec._ListGameTransferRecordResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListGameTransferRecordResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGameTransferRecordResp(ctx context.Context, sel ast.SelectionSet, v *view.ListGameTransferRecordResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListGameTransferRecordResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListGeneralAgentResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListGeneralAgentResp(ctx context.Context, sel ast.SelectionSet, v *view.ListGeneralAgentResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListGeneralAgentResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListHostsDenyResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListHostsDenyResp(ctx context.Context, sel ast.SelectionSet, v view.ListHostsDenyResp) graphql.Marshaler {
	return ec._ListHostsDenyResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListHostsDenyResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListHostsDenyResp(ctx context.Context, sel ast.SelectionSet, v *view.ListHostsDenyResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListHostsDenyResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListLineRateHistoryResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListLineRateHistoryResp(ctx context.Context, sel ast.SelectionSet, v view.ListLineRateHistoryResp) graphql.Marshaler {
	return ec._ListLineRateHistoryResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListLineRateHistoryResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListLineRateHistoryResp(ctx context.Context, sel ast.SelectionSet, v *view.ListLineRateHistoryResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListLineRateHistoryResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListLineRateResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListLineRateResp(ctx context.Context, sel ast.SelectionSet, v view.ListLineRateResp) graphql.Marshaler {
	return ec._ListLineRateResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListLineRateResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListLineRateResp(ctx context.Context, sel ast.SelectionSet, v *view.ListLineRateResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListLineRateResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListLineRentResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListLineRentResp(ctx context.Context, sel ast.SelectionSet, v view.ListLineRentResp) graphql.Marshaler {
	return ec._ListLineRentResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListLineRentResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListLineRentResp(ctx context.Context, sel ast.SelectionSet, v *view.ListLineRentResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListLineRentResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListMerchantBalanceLogResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantBalanceLogResp(ctx context.Context, sel ast.SelectionSet, v view.ListMerchantBalanceLogResp) graphql.Marshaler {
	return ec._ListMerchantBalanceLogResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListMerchantBalanceLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantBalanceLogResp(ctx context.Context, sel ast.SelectionSet, v *view.ListMerchantBalanceLogResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListMerchantBalanceLogResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListMerchantDepositLogResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantDepositLogResp(ctx context.Context, sel ast.SelectionSet, v view.ListMerchantDepositLogResp) graphql.Marshaler {
	return ec._ListMerchantDepositLogResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListMerchantDepositLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantDepositLogResp(ctx context.Context, sel ast.SelectionSet, v *view.ListMerchantDepositLogResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListMerchantDepositLogResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListMerchantDepositMethodResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantDepositMethodResp(ctx context.Context, sel ast.SelectionSet, v view.ListMerchantDepositMethodResp) graphql.Marshaler {
	return ec._ListMerchantDepositMethodResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListMerchantDepositMethodResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantDepositMethodResp(ctx context.Context, sel ast.SelectionSet, v *view.ListMerchantDepositMethodResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListMerchantDepositMethodResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListMerchantFeeModeResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantFeeModeResp(ctx context.Context, sel ast.SelectionSet, v view.ListMerchantFeeModeResp) graphql.Marshaler {
	return ec._ListMerchantFeeModeResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListMerchantFeeModeResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantFeeModeResp(ctx context.Context, sel ast.SelectionSet, v *view.ListMerchantFeeModeResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListMerchantFeeModeResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListMerchantLineResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantLineResp(ctx context.Context, sel ast.SelectionSet, v view.ListMerchantLineResp) graphql.Marshaler {
	return ec._ListMerchantLineResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListMerchantLineResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantLineResp(ctx context.Context, sel ast.SelectionSet, v *view.ListMerchantLineResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListMerchantLineResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListMerchantLoginHistoryResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantLoginHistoryResp(ctx context.Context, sel ast.SelectionSet, v view.ListMerchantLoginHistoryResp) graphql.Marshaler {
	return ec._ListMerchantLoginHistoryResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListMerchantLoginHistoryResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantLoginHistoryResp(ctx context.Context, sel ast.SelectionSet, v *view.ListMerchantLoginHistoryResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListMerchantLoginHistoryResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListMerchantResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantResp(ctx context.Context, sel ast.SelectionSet, v view.ListMerchantResp) graphql.Marshaler {
	return ec._ListMerchantResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListMerchantResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantResp(ctx context.Context, sel ast.SelectionSet, v *view.ListMerchantResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListMerchantResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListMerchantWithdrawLogResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantWithdrawLogResp(ctx context.Context, sel ast.SelectionSet, v view.ListMerchantWithdrawLogResp) graphql.Marshaler {
	return ec._ListMerchantWithdrawLogResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListMerchantWithdrawLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantWithdrawLogResp(ctx context.Context, sel ast.SelectionSet, v *view.ListMerchantWithdrawLogResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListMerchantWithdrawLogResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListMerchantWithdrawMethodResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantWithdrawMethodResp(ctx context.Context, sel ast.SelectionSet, v view.ListMerchantWithdrawMethodResp) graphql.Marshaler {
	return ec._ListMerchantWithdrawMethodResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListMerchantWithdrawMethodResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListMerchantWithdrawMethodResp(ctx context.Context, sel ast.SelectionSet, v *view.ListMerchantWithdrawMethodResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListMerchantWithdrawMethodResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListRoleResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListRoleResp(ctx context.Context, sel ast.SelectionSet, v view.ListRoleResp) graphql.Marshaler {
	return ec._ListRoleResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListRoleResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListRoleResp(ctx context.Context, sel ast.SelectionSet, v *view.ListRoleResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListRoleResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListSecurityEventResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListSecurityEventResp(ctx context.Context, sel ast.SelectionSet, v view.ListSecurityEventResp) graphql.Marshaler {
	return ec._ListSecurityEventResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListSecurityEventResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListSecurityEventResp(ctx context.Context, sel ast.SelectionSet, v *view.ListSecurityEventResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListSecurityEventResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListSmsRecordResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListSmsRecordResp(ctx context.Context, sel ast.SelectionSet, v view.ListSmsRecordResp) graphql.Marshaler {
	return ec._ListSmsRecordResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListSmsRecordResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListSmsRecordResp(ctx context.Context, sel ast.SelectionSet, v *view.ListSmsRecordResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListSmsRecordResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListSystemLineResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListSystemLineResp(ctx context.Context, sel ast.SelectionSet, v view.ListSystemLineResp) graphql.Marshaler {
	return ec._ListSystemLineResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListSystemLineResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListSystemLineResp(ctx context.Context, sel ast.SelectionSet, v *view.ListSystemLineResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListSystemLineResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListTagResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListTagResp(ctx context.Context, sel ast.SelectionSet, v view.ListTagResp) graphql.Marshaler {
	return ec._ListTagResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListTagResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListTagResp(ctx context.Context, sel ast.SelectionSet, v *view.ListTagResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListTagResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListTemplateResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListTemplateResp(ctx context.Context, sel ast.SelectionSet, v view.ListTemplateResp) graphql.Marshaler {
	return ec._ListTemplateResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListTemplateResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListTemplateResp(ctx context.Context, sel ast.SelectionSet, v *view.ListTemplateResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListTemplateResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserLoginHistoryResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserLoginHistoryResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserLoginHistoryResp) graphql.Marshaler {
	return ec._ListUserLoginHistoryResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserLoginHistoryResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserLoginHistoryResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserLoginHistoryResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserLoginHistoryResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserResp) graphql.Marshaler {
	return ec._ListUserResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserRoleResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserRoleResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserRoleResp) graphql.Marshaler {
	return ec._ListUserRoleResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserRoleResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserRoleResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserRoleResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserRoleResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserTagResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserTagResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserTagResp) graphql.Marshaler {
	return ec._ListUserTagResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserTagResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserTagResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserTagResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserTagResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListUserWhitelistResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserWhitelistResp(ctx context.Context, sel ast.SelectionSet, v view.ListUserWhitelistResp) graphql.Marshaler {
	return ec._ListUserWhitelistResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListUserWhitelistResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListUserWhitelistResp(ctx context.Context, sel ast.SelectionSet, v *view.ListUserWhitelistResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListUserWhitelistResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListVipClaimLogResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListVipClaimLogResp(ctx context.Context, sel ast.SelectionSet, v view.ListVipClaimLogResp) graphql.Marshaler {
	return ec._ListVipClaimLogResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListVipClaimLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListVipClaimLogResp(ctx context.Context, sel ast.SelectionSet, v *view.ListVipClaimLogResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListVipClaimLogResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListVipLevelResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListVipLevelResp(ctx context.Context, sel ast.SelectionSet, v view.ListVipLevelResp) graphql.Marshaler {
	return ec._ListVipLevelResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListVipLevelResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListVipLevelResp(ctx context.Context, sel ast.SelectionSet, v *view.ListVipLevelResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListVipLevelResp(ctx, sel, v)
}

func (ec *executionContext) marshalNListVipUpgradeLogResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListVipUpgradeLogResp(ctx context.Context, sel ast.SelectionSet, v view.ListVipUpgradeLogResp) graphql.Marshaler {
	return ec._ListVipUpgradeLogResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNListVipUpgradeLogResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐListVipUpgradeLogResp(ctx context.Context, sel ast.SelectionSet, v *view.ListVipUpgradeLogResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListVipUpgradeLogResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLoginReqInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginReqInput(ctx context.Context, v interface{}) (view.LoginReqInput, error) {
	res, err := ec.unmarshalInputLoginReqInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLoginResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginResp(ctx context.Context, sel ast.SelectionSet, v view.LoginResp) graphql.Marshaler {
	return ec._LoginResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLoginResp(ctx context.Context, sel ast.SelectionSet, v *view.LoginResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LoginResp(ctx, sel, v)
}

func (ec *executionContext) marshalNMenu2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Menu) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMenu2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenu(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMenu2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenu(ctx context.Context, sel ast.SelectionSet, v *view.Menu) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Menu(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx context.Context, v interface{}) ([]*view.MenuInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*view.MenuInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMenuInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMenuInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInput(ctx context.Context, v interface{}) (*view.MenuInput, error) {
	res, err := ec.unmarshalInputMenuInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMerchant2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Merchant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchant2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchant2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchant(ctx context.Context, sel ast.SelectionSet, v *view.Merchant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Merchant(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMerchantBalanceApplyInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceApplyInput(ctx context.Context, v interface{}) (view.MerchantBalanceApplyInput, error) {
	res, err := ec.unmarshalInputMerchantBalanceApplyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantBalanceAuditInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceAuditInput(ctx context.Context, v interface{}) (view.MerchantBalanceAuditInput, error) {
	res, err := ec.unmarshalInputMerchantBalanceAuditInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantBalanceFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceFilterInput(ctx context.Context, v interface{}) (view.MerchantBalanceFilterInput, error) {
	res, err := ec.unmarshalInputMerchantBalanceFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMerchantBalanceLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.MerchantBalanceLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantBalanceLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantBalanceLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceLog(ctx context.Context, sel ast.SelectionSet, v *view.MerchantBalanceLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantBalanceLog(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMerchantCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantCreateInput(ctx context.Context, v interface{}) (view.MerchantCreateInput, error) {
	res, err := ec.unmarshalInputMerchantCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMerchantDepositLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.MerchantDepositLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantDepositLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantDepositLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositLog(ctx context.Context, sel ast.SelectionSet, v *view.MerchantDepositLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantDepositLog(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantDepositMethod2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.MerchantDepositMethod) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantDepositMethod2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantDepositMethod2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethod(ctx context.Context, sel ast.SelectionSet, v *view.MerchantDepositMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantDepositMethod(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMerchantDepositMethodCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodCreateInput(ctx context.Context, v interface{}) (view.MerchantDepositMethodCreateInput, error) {
	res, err := ec.unmarshalInputMerchantDepositMethodCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantDepositMethodFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodFilterInput(ctx context.Context, v interface{}) (view.MerchantDepositMethodFilterInput, error) {
	res, err := ec.unmarshalInputMerchantDepositMethodFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantDepositMethodUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodUpdateInput(ctx context.Context, v interface{}) (view.MerchantDepositMethodUpdateInput, error) {
	res, err := ec.unmarshalInputMerchantDepositMethodUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMerchantFeeMode2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.MerchantFeeMode) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantFeeMode2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeMode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantFeeMode2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeMode(ctx context.Context, sel ast.SelectionSet, v *view.MerchantFeeMode) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantFeeMode(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMerchantFeeModeCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeCreateInput(ctx context.Context, v interface{}) (view.MerchantFeeModeCreateInput, error) {
	res, err := ec.unmarshalInputMerchantFeeModeCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantFeeModeFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeFilterInput(ctx context.Context, v interface{}) (view.MerchantFeeModeFilterInput, error) {
	res, err := ec.unmarshalInputMerchantFeeModeFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantFeeModeUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeUpdateInput(ctx context.Context, v interface{}) (view.MerchantFeeModeUpdateInput, error) {
	res, err := ec.unmarshalInputMerchantFeeModeUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFilterInput(ctx context.Context, v interface{}) (view.MerchantFilterInput, error) {
	res, err := ec.unmarshalInputMerchantFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMerchantLine2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.MerchantLine) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantLine2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLine(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantLine2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLine(ctx context.Context, sel ast.SelectionSet, v *view.MerchantLine) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantLine(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMerchantLineCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineCreateInput(ctx context.Context, v interface{}) (view.MerchantLineCreateInput, error) {
	res, err := ec.unmarshalInputMerchantLineCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantLineFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineFilterInput(ctx context.Context, v interface{}) (view.MerchantLineFilterInput, error) {
	res, err := ec.unmarshalInputMerchantLineFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantLineUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineUpdateInput(ctx context.Context, v interface{}) (view.MerchantLineUpdateInput, error) {
	res, err := ec.unmarshalInputMerchantLineUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMerchantLoginHistory2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLoginHistoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.MerchantLoginHistory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantLoginHistory2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLoginHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantLoginHistory2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLoginHistory(ctx context.Context, sel ast.SelectionSet, v *view.MerchantLoginHistory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantLoginHistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMerchantUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantUpdateInput(ctx context.Context, v interface{}) (view.MerchantUpdateInput, error) {
	res, err := ec.unmarshalInputMerchantUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMerchantWithdrawLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.MerchantWithdrawLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantWithdrawLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantWithdrawLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawLog(ctx context.Context, sel ast.SelectionSet, v *view.MerchantWithdrawLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantWithdrawLog(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantWithdrawMethod2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.MerchantWithdrawMethod) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantWithdrawMethod2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantWithdrawMethod2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethod(ctx context.Context, sel ast.SelectionSet, v *view.MerchantWithdrawMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantWithdrawMethod(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMerchantWithdrawMethodCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodCreateInput(ctx context.Context, v interface{}) (view.MerchantWithdrawMethodCreateInput, error) {
	res, err := ec.unmarshalInputMerchantWithdrawMethodCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantWithdrawMethodFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodFilterInput(ctx context.Context, v interface{}) (view.MerchantWithdrawMethodFilterInput, error) {
	res, err := ec.unmarshalInputMerchantWithdrawMethodFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMerchantWithdrawMethodUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodUpdateInput(ctx context.Context, v interface{}) (view.MerchantWithdrawMethodUpdateInput, error) {
	res, err := ec.unmarshalInputMerchantWithdrawMethodUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx context.Context, sel ast.SelectionSet, v *view.Meta) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Meta(ctx, sel, v)
}

func (ec *executionContext) marshalNRefreshTokenResp2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRefreshTokenResp(ctx context.Context, sel ast.SelectionSet, v view.RefreshTokenResp) graphql.Marshaler {
	return ec._RefreshTokenResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNRefreshTokenResp2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRefreshTokenResp(ctx context.Context, sel ast.SelectionSet, v *view.RefreshTokenResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RefreshTokenResp(ctx, sel, v)
}

func (ec *executionContext) marshalNRole2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx context.Context, sel ast.SelectionSet, v view.Role) graphql.Marshaler {
	return ec._Role(ctx, sel, &v)
}

func (ec *executionContext) marshalNRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRole(ctx context.Context, sel ast.SelectionSet, v *view.Role) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleCreateInput(ctx context.Context, v interface{}) (view.RoleCreateInput, error) {
	res, err := ec.unmarshalInputRoleCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleFilterInput(ctx context.Context, v interface{}) (view.RoleFilterInput, error) {
	res, err := ec.unmarshalInputRoleFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleUpdateInput(ctx context.Context, v interface{}) (view.RoleUpdateInput, error) {
	res, err := ec.unmarshalInputRoleUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSecurityEvent2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.SecurityEvent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSecurityEvent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSecurityEvent2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEvent(ctx context.Context, sel ast.SelectionSet, v *view.SecurityEvent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SecurityEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSecurityEventCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventCreateInput(ctx context.Context, v interface{}) (view.SecurityEventCreateInput, error) {
	res, err := ec.unmarshalInputSecurityEventCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSecurityEventFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventFilterInput(ctx context.Context, v interface{}) (view.SecurityEventFilterInput, error) {
	res, err := ec.unmarshalInputSecurityEventFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSecurityEventUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventUpdateInput(ctx context.Context, v interface{}) (view.SecurityEventUpdateInput, error) {
	res, err := ec.unmarshalInputSecurityEventUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSmsConfig2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsConfig(ctx context.Context, sel ast.SelectionSet, v view.SmsConfig) graphql.Marshaler {
	return ec._SmsConfig(ctx, sel, &v)
}

func (ec *executionContext) marshalNSmsConfig2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsConfig(ctx context.Context, sel ast.SelectionSet, v *view.SmsConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SmsConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSmsConfigInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsConfigInput(ctx context.Context, v interface{}) (view.SmsConfigInput, error) {
	res, err := ec.unmarshalInputSmsConfigInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSmsRecord2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.SmsRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSmsRecord2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSmsRecord2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsRecord(ctx context.Context, sel ast.SelectionSet, v *view.SmsRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SmsRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSmsRecordFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsRecordFilterInput(ctx context.Context, v interface{}) (view.SmsRecordFilterInput, error) {
	res, err := ec.unmarshalInputSmsRecordFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemLine2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.SystemLine) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemLine2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLine(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemLine2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLine(ctx context.Context, sel ast.SelectionSet, v *view.SystemLine) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemLine(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemLineCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineCreateInput(ctx context.Context, v interface{}) (view.SystemLineCreateInput, error) {
	res, err := ec.unmarshalInputSystemLineCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemLineFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineFilterInput(ctx context.Context, v interface{}) (view.SystemLineFilterInput, error) {
	res, err := ec.unmarshalInputSystemLineFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemLineUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineUpdateInput(ctx context.Context, v interface{}) (view.SystemLineUpdateInput, error) {
	res, err := ec.unmarshalInputSystemLineUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTag2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx context.Context, sel ast.SelectionSet, v view.Tag) graphql.Marshaler {
	return ec._Tag(ctx, sel, &v)
}

func (ec *executionContext) marshalNTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Tag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTag(ctx context.Context, sel ast.SelectionSet, v *view.Tag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTagCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagCreateInput(ctx context.Context, v interface{}) (view.TagCreateInput, error) {
	res, err := ec.unmarshalInputTagCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagFilterInput(ctx context.Context, v interface{}) (view.TagFilterInput, error) {
	res, err := ec.unmarshalInputTagFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagUpdateInput(ctx context.Context, v interface{}) (view.TagUpdateInput, error) {
	res, err := ec.unmarshalInputTagUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTemplate2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.Template) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTemplate2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTemplate2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplate(ctx context.Context, sel ast.SelectionSet, v *view.Template) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Template(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTemplateCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateCreateInput(ctx context.Context, v interface{}) (view.TemplateCreateInput, error) {
	res, err := ec.unmarshalInputTemplateCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTemplateFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateFilterInput(ctx context.Context, v interface{}) (view.TemplateFilterInput, error) {
	res, err := ec.unmarshalInputTemplateFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTemplateUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateUpdateInput(ctx context.Context, v interface{}) (view.TemplateUpdateInput, error) {
	res, err := ec.unmarshalInputTemplateUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTimestamp2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := value.UnmarshalTimestamp(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamp2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := value.MarshalTimestamp(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUint642uint64(ctx context.Context, v interface{}) (uint64, error) {
	res, err := value.UnmarshalUint64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUint642uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	res := value.MarshalUint64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx context.Context, sel ast.SelectionSet, v view.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUser(ctx context.Context, sel ast.SelectionSet, v *view.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserAuth2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserAuth(ctx context.Context, v interface{}) (view.UserAuth, error) {
	res, err := ec.unmarshalInputUserAuth(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserDepositInfo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserDepositInfo(ctx context.Context, sel ast.SelectionSet, v view.UserDepositInfo) graphql.Marshaler {
	return ec._UserDepositInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserDepositInfo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserDepositInfo(ctx context.Context, sel ast.SelectionSet, v *view.UserDepositInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserDepositInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserFilterInput(ctx context.Context, v interface{}) (view.UserFilterInput, error) {
	res, err := ec.unmarshalInputUserFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserLoginHistory2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.UserLoginHistory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserLoginHistory2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserLoginHistory2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistory(ctx context.Context, sel ast.SelectionSet, v *view.UserLoginHistory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserLoginHistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserLoginHistoryFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryFilterInput(ctx context.Context, v interface{}) (view.UserLoginHistoryFilterInput, error) {
	res, err := ec.unmarshalInputUserLoginHistoryFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserRole2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRole(ctx context.Context, sel ast.SelectionSet, v view.UserRole) graphql.Marshaler {
	return ec._UserRole(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserRole2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.UserRole) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserRole2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRole(ctx context.Context, sel ast.SelectionSet, v *view.UserRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserRole(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserRoleCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleCreateInput(ctx context.Context, v interface{}) (view.UserRoleCreateInput, error) {
	res, err := ec.unmarshalInputUserRoleCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserRoleFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleFilterInput(ctx context.Context, v interface{}) (view.UserRoleFilterInput, error) {
	res, err := ec.unmarshalInputUserRoleFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserRoleUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleUpdateInput(ctx context.Context, v interface{}) (view.UserRoleUpdateInput, error) {
	res, err := ec.unmarshalInputUserRoleUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserScore2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserScore(ctx context.Context, sel ast.SelectionSet, v view.UserScore) graphql.Marshaler {
	return ec._UserScore(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserScore2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserScore(ctx context.Context, sel ast.SelectionSet, v *view.UserScore) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserScore(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserStatus2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx context.Context, v interface{}) (view.UserStatus, error) {
	var res view.UserStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserStatus2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx context.Context, sel ast.SelectionSet, v view.UserStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNUserTag2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTag(ctx context.Context, sel ast.SelectionSet, v view.UserTag) graphql.Marshaler {
	return ec._UserTag(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserTag2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.UserTag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserTag2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTag(ctx context.Context, sel ast.SelectionSet, v *view.UserTag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserTag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserTagCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagCreateInput(ctx context.Context, v interface{}) (view.UserTagCreateInput, error) {
	res, err := ec.unmarshalInputUserTagCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserTagFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagFilterInput(ctx context.Context, v interface{}) (view.UserTagFilterInput, error) {
	res, err := ec.unmarshalInputUserTagFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserTagUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagUpdateInput(ctx context.Context, v interface{}) (view.UserTagUpdateInput, error) {
	res, err := ec.unmarshalInputUserTagUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserUpdateInput(ctx context.Context, v interface{}) (view.UserUpdateInput, error) {
	res, err := ec.unmarshalInputUserUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserUpdatePasswordInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserUpdatePasswordInput(ctx context.Context, v interface{}) (view.UserUpdatePasswordInput, error) {
	res, err := ec.unmarshalInputUserUpdatePasswordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserWhitelist2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelist(ctx context.Context, sel ast.SelectionSet, v view.UserWhitelist) graphql.Marshaler {
	return ec._UserWhitelist(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserWhitelist2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.UserWhitelist) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserWhitelist2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelist(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserWhitelist2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelist(ctx context.Context, sel ast.SelectionSet, v *view.UserWhitelist) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserWhitelist(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserWhitelistCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistCreateInput(ctx context.Context, v interface{}) (view.UserWhitelistCreateInput, error) {
	res, err := ec.unmarshalInputUserWhitelistCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserWhitelistFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistFilterInput(ctx context.Context, v interface{}) (view.UserWhitelistFilterInput, error) {
	res, err := ec.unmarshalInputUserWhitelistFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserWhitelistUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistUpdateInput(ctx context.Context, v interface{}) (view.UserWhitelistUpdateInput, error) {
	res, err := ec.unmarshalInputUserWhitelistUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserWithdrawInfo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWithdrawInfo(ctx context.Context, sel ast.SelectionSet, v view.UserWithdrawInfo) graphql.Marshaler {
	return ec._UserWithdrawInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserWithdrawInfo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWithdrawInfo(ctx context.Context, sel ast.SelectionSet, v *view.UserWithdrawInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserWithdrawInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNVipClaimLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipClaimLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.VipClaimLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVipClaimLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipClaimLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVipClaimLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipClaimLog(ctx context.Context, sel ast.SelectionSet, v *view.VipClaimLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VipClaimLog(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVipClaimLogFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipClaimLogFilterInput(ctx context.Context, v interface{}) (view.VipClaimLogFilterInput, error) {
	res, err := ec.unmarshalInputVipClaimLogFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVipLevel2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.VipLevel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVipLevel2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVipLevel2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevel(ctx context.Context, sel ast.SelectionSet, v *view.VipLevel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VipLevel(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVipLevelCreateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelCreateInput(ctx context.Context, v interface{}) (view.VipLevelCreateInput, error) {
	res, err := ec.unmarshalInputVipLevelCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVipLevelFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelFilterInput(ctx context.Context, v interface{}) (view.VipLevelFilterInput, error) {
	res, err := ec.unmarshalInputVipLevelFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVipLevelUpdateInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelUpdateInput(ctx context.Context, v interface{}) (view.VipLevelUpdateInput, error) {
	res, err := ec.unmarshalInputVipLevelUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVipUpgradeLog2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipUpgradeLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*view.VipUpgradeLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVipUpgradeLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipUpgradeLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVipUpgradeLog2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipUpgradeLog(ctx context.Context, sel ast.SelectionSet, v *view.VipUpgradeLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VipUpgradeLog(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVipUpgradeLogFilterInput2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipUpgradeLogFilterInput(ctx context.Context, v interface{}) (view.VipUpgradeLogFilterInput, error) {
	res, err := ec.unmarshalInputVipUpgradeLogFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx context.Context, v interface{}) (view.YesNo, error) {
	var res view.YesNo
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNYesNo2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx context.Context, sel ast.SelectionSet, v view.YesNo) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx context.Context, v interface{}) (*view.AccountType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.AccountType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAccountType(ctx context.Context, sel ast.SelectionSet, v *view.AccountType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAgentFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentFilterInput(ctx context.Context, v interface{}) (*view.AgentFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAgentFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAgentInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAgentInput(ctx context.Context, v interface{}) (*view.AgentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAgentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuditLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐAuditLogInput(ctx context.Context, v interface{}) (*view.AuditLogInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditLogInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBaseFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐBaseFilterInput(ctx context.Context, v interface{}) (*view.BaseFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBaseFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOData2boyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐData(ctx context.Context, sel ast.SelectionSet, v view.Data) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Data(ctx, sel, v)
}

func (ec *executionContext) unmarshalODecimal2ᚖgithubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx context.Context, v interface{}) (*decimal.Decimal, error) {
	if v == nil {
		return nil, nil
	}
	res, err := value.UnmarshalDecimal(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODecimal2ᚖgithubᚗcomᚋshopspringᚋdecimalᚐDecimal(ctx context.Context, sel ast.SelectionSet, v *decimal.Decimal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := value.MarshalDecimal(*v)
	return res
}

func (ec *executionContext) unmarshalOEmailRecordInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEmailRecordInput(ctx context.Context, v interface{}) (*view.EmailRecordInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmailRecordInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐEventInput(ctx context.Context, v interface{}) (*view.EventInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFileInfo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfo(ctx context.Context, sel ast.SelectionSet, v *view.FileInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FileInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFileInfoInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐFileInfoInput(ctx context.Context, v interface{}) (*view.FileInfoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFileInfoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGameFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameFilterInput(ctx context.Context, v interface{}) (*view.GameFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGameFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGameInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameInput(ctx context.Context, v interface{}) (*view.GameInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGameInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGamePlayerInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGamePlayerInput(ctx context.Context, v interface{}) (*view.GamePlayerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGamePlayerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGameTransferRecordInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGameTransferRecordInput(ctx context.Context, v interface{}) (*view.GameTransferRecordInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGameTransferRecordInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGeneralAgentFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentFilterInput(ctx context.Context, v interface{}) (*view.GeneralAgentFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGeneralAgentFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGeneralAgentInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐGeneralAgentInput(ctx context.Context, v interface{}) (*view.GeneralAgentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGeneralAgentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHostsDenyFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyFilterInput(ctx context.Context, v interface{}) (*view.HostsDenyFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHostsDenyFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHostsDenyInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐHostsDenyInput(ctx context.Context, v interface{}) (*view.HostsDenyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHostsDenyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) unmarshalOLineRateFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateFilterInput(ctx context.Context, v interface{}) (*view.LineRateFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLineRateFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLineRateHistoryFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateHistoryFilterInput(ctx context.Context, v interface{}) (*view.LineRateHistoryFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLineRateHistoryFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLineRateHistoryInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateHistoryInput(ctx context.Context, v interface{}) (*view.LineRateHistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLineRateHistoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLineRateInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRateInput(ctx context.Context, v interface{}) (*view.LineRateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLineRateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLineRentFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentFilterInput(ctx context.Context, v interface{}) (*view.LineRentFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLineRentFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLineRentInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐLineRentInput(ctx context.Context, v interface{}) (*view.LineRentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLineRentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMenuInput2ᚕᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInputᚄ(ctx context.Context, v interface{}) ([]*view.MenuInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*view.MenuInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMenuInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMenuInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMerchantBalanceInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceInput(ctx context.Context, v interface{}) (*view.MerchantBalanceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantBalanceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantBalanceLogFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceLogFilterInput(ctx context.Context, v interface{}) (*view.MerchantBalanceLogFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantBalanceLogFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantBalanceLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantBalanceLogInput(ctx context.Context, v interface{}) (*view.MerchantBalanceLogInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantBalanceLogInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantDepositLogFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositLogFilterInput(ctx context.Context, v interface{}) (*view.MerchantDepositLogFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantDepositLogFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantDepositLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositLogInput(ctx context.Context, v interface{}) (*view.MerchantDepositLogInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantDepositLogInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantDepositMethodFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodFilterInput(ctx context.Context, v interface{}) (*view.MerchantDepositMethodFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantDepositMethodFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantDepositMethodInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantDepositMethodInput(ctx context.Context, v interface{}) (*view.MerchantDepositMethodInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantDepositMethodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantFeeModeFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeFilterInput(ctx context.Context, v interface{}) (*view.MerchantFeeModeFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantFeeModeFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantFeeModeInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFeeModeInput(ctx context.Context, v interface{}) (*view.MerchantFeeModeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantFeeModeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantFilterInput(ctx context.Context, v interface{}) (*view.MerchantFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantInput(ctx context.Context, v interface{}) (*view.MerchantInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantLineFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineFilterInput(ctx context.Context, v interface{}) (*view.MerchantLineFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantLineFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantLineInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLineInput(ctx context.Context, v interface{}) (*view.MerchantLineInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantLineInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantLoginHistoryFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLoginHistoryFilterInput(ctx context.Context, v interface{}) (*view.MerchantLoginHistoryFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantLoginHistoryFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantLoginHistoryInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantLoginHistoryInput(ctx context.Context, v interface{}) (*view.MerchantLoginHistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantLoginHistoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantWithdrawLogFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawLogFilterInput(ctx context.Context, v interface{}) (*view.MerchantWithdrawLogFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantWithdrawLogFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantWithdrawLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawLogInput(ctx context.Context, v interface{}) (*view.MerchantWithdrawLogInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantWithdrawLogInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantWithdrawMethodFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodFilterInput(ctx context.Context, v interface{}) (*view.MerchantWithdrawMethodFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantWithdrawMethodFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMerchantWithdrawMethodInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMerchantWithdrawMethodInput(ctx context.Context, v interface{}) (*view.MerchantWithdrawMethodInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantWithdrawMethodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMeta2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐMeta(ctx context.Context, sel ast.SelectionSet, v *view.Meta) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Meta(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOffsetType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐOffsetType(ctx context.Context, v interface{}) (*view.OffsetType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.OffsetType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOffsetType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐOffsetType(ctx context.Context, sel ast.SelectionSet, v *view.OffsetType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPaginationInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐPaginationInput(ctx context.Context, v interface{}) (*view.PaginationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaginationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORangeType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRangeType(ctx context.Context, v interface{}) (*view.RangeType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.RangeType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORangeType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRangeType(ctx context.Context, sel ast.SelectionSet, v *view.RangeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORoleInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐRoleInput(ctx context.Context, v interface{}) (*view.RoleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSecurityEventInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSecurityEventInput(ctx context.Context, v interface{}) (*view.SecurityEventInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSecurityEventInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSmsRecordInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSmsRecordInput(ctx context.Context, v interface{}) (*view.SmsRecordInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSmsRecordInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSortType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSortType(ctx context.Context, v interface{}) (*view.SortType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.SortType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortType2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSortType(ctx context.Context, sel ast.SelectionSet, v *view.SortType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOSystemLineFilterInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineFilterInput(ctx context.Context, v interface{}) (*view.SystemLineFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemLineFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSystemLineInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐSystemLineInput(ctx context.Context, v interface{}) (*view.SystemLineInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemLineInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTagInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTagInput(ctx context.Context, v interface{}) (*view.TagInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTagInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTemplateInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐTemplateInput(ctx context.Context, v interface{}) (*view.TemplateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTemplateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamp2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := value.UnmarshalTimestamp(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamp2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := value.MarshalTimestamp(*v)
	return res
}

func (ec *executionContext) unmarshalOUint642ᚕuint64ᚄ(ctx context.Context, v interface{}) ([]uint64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]uint64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUint642uint64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUint642ᚕuint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUint642uint64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUint642ᚖuint64(ctx context.Context, v interface{}) (*uint64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := value.UnmarshalUint64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUint642ᚖuint64(ctx context.Context, sel ast.SelectionSet, v *uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := value.MarshalUint64(*v)
	return res
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUpload(*v)
	return res
}

func (ec *executionContext) unmarshalOUserInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserInput(ctx context.Context, v interface{}) (*view.UserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserLoginHistoryInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserLoginHistoryInput(ctx context.Context, v interface{}) (*view.UserLoginHistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserLoginHistoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserRoleInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserRoleInput(ctx context.Context, v interface{}) (*view.UserRoleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRoleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserStatus2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx context.Context, v interface{}) (*view.UserStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.UserStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserStatus2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserStatus(ctx context.Context, sel ast.SelectionSet, v *view.UserStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserTagInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserTagInput(ctx context.Context, v interface{}) (*view.UserTagInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserTagInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserWhitelistInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐUserWhitelistInput(ctx context.Context, v interface{}) (*view.UserWhitelistInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserWhitelistInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVipClaimLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipClaimLogInput(ctx context.Context, v interface{}) (*view.VipClaimLogInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVipClaimLogInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVipLevelInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipLevelInput(ctx context.Context, v interface{}) (*view.VipLevelInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVipLevelInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVipUpgradeLogInput2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐVipUpgradeLogInput(ctx context.Context, v interface{}) (*view.VipUpgradeLogInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVipUpgradeLogInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx context.Context, v interface{}) (*view.YesNo, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(view.YesNo)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOYesNo2ᚖboyiᚋpkgᚋdeliveryᚋgraphᚋviewᚐYesNo(ctx context.Context, sel ast.SelectionSet, v *view.YesNo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************

// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/boyi/pkg/Infra/storage/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	storage "boyi/pkg/Infra/storage"
	bytes "bytes"
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockStorageS3 is a mock of StorageS3 interface.
type MockStorageS3 struct {
	ctrl     *gomock.Controller
	recorder *MockStorageS3MockRecorder
}

// MockStorageS3MockRecorder is the mock recorder for MockStorageS3.
type MockStorageS3MockRecorder struct {
	mock *MockStorageS3
}

// NewMockStorageS3 creates a new mock instance.
func NewMockStorageS3(ctrl *gomock.Controller) *MockStorageS3 {
	mock := &MockStorageS3{ctrl: ctrl}
	mock.recorder = &MockStorageS3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageS3) EXPECT() *MockStorageS3MockRecorder {
	return m.recorder
}

// CreatePreSignedUploadURL mocks base method.
func (m *MockStorageS3) CreatePreSignedUploadURL(ctx context.Context, fileInfo storage.FileInfo, expire time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreSignedUploadURL", ctx, fileInfo, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreSignedUploadURL indicates an expected call of CreatePreSignedUploadURL.
func (mr *MockStorageS3MockRecorder) CreatePreSignedUploadURL(ctx, fileInfo, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreSignedUploadURL", reflect.TypeOf((*MockStorageS3)(nil).CreatePreSignedUploadURL), ctx, fileInfo, expire)
}

// DeleteFile mocks base method.
func (m *MockStorageS3) DeleteFile(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockStorageS3MockRecorder) DeleteFile(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockStorageS3)(nil).DeleteFile), ctx, key)
}

// GetFile mocks base method.
func (m *MockStorageS3) GetFile(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockStorageS3MockRecorder) GetFile(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockStorageS3)(nil).GetFile), ctx, key)
}

// ListFiles mocks base method.
func (m *MockStorageS3) ListFiles(ctx context.Context) ([]*s3.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx)
	ret0, _ := ret[0].([]*s3.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockStorageS3MockRecorder) ListFiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockStorageS3)(nil).ListFiles), ctx)
}

// UploadFile mocks base method.
func (m *MockStorageS3) UploadFile(ctx context.Context, key, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, key, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockStorageS3MockRecorder) UploadFile(ctx, key, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockStorageS3)(nil).UploadFile), ctx, key, body)
}

// UploadFileByBuffer mocks base method.
func (m *MockStorageS3) UploadFileByBuffer(ctx context.Context, key string, body *bytes.Buffer, expire time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileByBuffer", ctx, key, body, expire)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFileByBuffer indicates an expected call of UploadFileByBuffer.
func (mr *MockStorageS3MockRecorder) UploadFileByBuffer(ctx, key, body, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileByBuffer", reflect.TypeOf((*MockStorageS3)(nil).UploadFileByBuffer), ctx, key, body, expire)
}

// UploadFileByReader mocks base method.
func (m *MockStorageS3) UploadFileByReader(ctx context.Context, key string, body io.Reader, expire *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileByReader", ctx, key, body, expire)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFileByReader indicates an expected call of UploadFileByReader.
func (mr *MockStorageS3MockRecorder) UploadFileByReader(ctx, key, body, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileByReader", reflect.TypeOf((*MockStorageS3)(nil).UploadFileByReader), ctx, key, body, expire)
}

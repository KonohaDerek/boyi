// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/iface/service.go

// Package mock is a generated GoMock package.
package mock

import (
	claims "boyi/internal/claims"
	dto "boyi/pkg/model/dto"
	option "boyi/pkg/model/option"
	vo "boyi/pkg/model/vo"
	context "context"
	reflect "reflect"
	time "time"

	graphql "github.com/99designs/gqlgen/graphql"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// GetParsedMenuTree mocks base method.
func (m *MockIService) GetParsedMenuTree(c claims.Claims) []*dto.Menu {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParsedMenuTree", c)
	ret0, _ := ret[0].([]*dto.Menu)
	return ret0
}

// GetParsedMenuTree indicates an expected call of GetParsedMenuTree.
func (mr *MockIServiceMockRecorder) GetParsedMenuTree(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParsedMenuTree", reflect.TypeOf((*MockIService)(nil).GetParsedMenuTree), c)
}

// MockIMenu is a mock of IMenu interface.
type MockIMenu struct {
	ctrl     *gomock.Controller
	recorder *MockIMenuMockRecorder
}

// MockIMenuMockRecorder is the mock recorder for MockIMenu.
type MockIMenuMockRecorder struct {
	mock *MockIMenu
}

// NewMockIMenu creates a new mock instance.
func NewMockIMenu(ctrl *gomock.Controller) *MockIMenu {
	mock := &MockIMenu{ctrl: ctrl}
	mock.recorder = &MockIMenuMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMenu) EXPECT() *MockIMenuMockRecorder {
	return m.recorder
}

// GetParsedMenuTree mocks base method.
func (m *MockIMenu) GetParsedMenuTree(c claims.Claims) []*dto.Menu {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParsedMenuTree", c)
	ret0, _ := ret[0].([]*dto.Menu)
	return ret0
}

// GetParsedMenuTree indicates an expected call of GetParsedMenuTree.
func (mr *MockIMenuMockRecorder) GetParsedMenuTree(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParsedMenuTree", reflect.TypeOf((*MockIMenu)(nil).GetParsedMenuTree), c)
}

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// FlushAllCache mocks base method.
func (m *MockIAuthService) FlushAllCache(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAllCache", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAllCache indicates an expected call of FlushAllCache.
func (mr *MockIAuthServiceMockRecorder) FlushAllCache(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAllCache", reflect.TypeOf((*MockIAuthService)(nil).FlushAllCache), ctx)
}

// GetClaimsByToken mocks base method.
func (m *MockIAuthService) GetClaimsByToken(ctx context.Context, token, deviceUID string) (claims.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimsByToken", ctx, token, deviceUID)
	ret0, _ := ret[0].(claims.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimsByToken indicates an expected call of GetClaimsByToken.
func (mr *MockIAuthServiceMockRecorder) GetClaimsByToken(ctx, token, deviceUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimsByToken", reflect.TypeOf((*MockIAuthService)(nil).GetClaimsByToken), ctx, token, deviceUID)
}

// GetClaimsWithTokenAndDevice mocks base method.
func (m *MockIAuthService) GetClaimsWithTokenAndDevice(ctx context.Context, token, deviceID string) (claims.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimsWithTokenAndDevice", ctx, token, deviceID)
	ret0, _ := ret[0].(claims.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimsWithTokenAndDevice indicates an expected call of GetClaimsWithTokenAndDevice.
func (mr *MockIAuthServiceMockRecorder) GetClaimsWithTokenAndDevice(ctx, token, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimsWithTokenAndDevice", reflect.TypeOf((*MockIAuthService)(nil).GetClaimsWithTokenAndDevice), ctx, token, deviceID)
}

// GetToken mocks base method.
func (m *MockIAuthService) GetToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockIAuthServiceMockRecorder) GetToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockIAuthService)(nil).GetToken), ctx, token)
}

// Login mocks base method.
func (m *MockIAuthService) Login(ctx context.Context, in vo.LoginReq) (claims.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, in)
	ret0, _ := ret[0].(claims.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIAuthServiceMockRecorder) Login(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAuthService)(nil).Login), ctx, in)
}

// Logout mocks base method.
func (m *MockIAuthService) Logout(ctx context.Context, c claims.Claims) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockIAuthServiceMockRecorder) Logout(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIAuthService)(nil).Logout), ctx, c)
}

// RefreshToken mocks base method.
func (m *MockIAuthService) RefreshToken(ctx context.Context, c claims.Claims, ttlSec int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, c, ttlSec)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockIAuthServiceMockRecorder) RefreshToken(ctx, c, ttlSec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockIAuthService)(nil).RefreshToken), ctx, c, ttlSec)
}

// Register mocks base method.
func (m *MockIAuthService) Register(ctx context.Context, in vo.RegisterReq) (dto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, in)
	ret0, _ := ret[0].(dto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIAuthServiceMockRecorder) Register(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAuthService)(nil).Register), ctx, in)
}

// SetClaims mocks base method.
func (m *MockIAuthService) SetClaims() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClaims")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// SetClaims indicates an expected call of SetClaims.
func (mr *MockIAuthServiceMockRecorder) SetClaims() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClaims", reflect.TypeOf((*MockIAuthService)(nil).SetClaims))
}

// ValidateHostDeny mocks base method.
func (m *MockIAuthService) ValidateHostDeny(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateHostDeny", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateHostDeny indicates an expected call of ValidateHostDeny.
func (mr *MockIAuthServiceMockRecorder) ValidateHostDeny(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateHostDeny", reflect.TypeOf((*MockIAuthService)(nil).ValidateHostDeny), ctx)
}

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// CreateTouristUser mocks base method.
func (m *MockIUserService) CreateTouristUser(ctx context.Context, deviceUID string) (dto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTouristUser", ctx, deviceUID)
	ret0, _ := ret[0].(dto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTouristUser indicates an expected call of CreateTouristUser.
func (mr *MockIUserServiceMockRecorder) CreateTouristUser(ctx, deviceUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTouristUser", reflect.TypeOf((*MockIUserService)(nil).CreateTouristUser), ctx, deviceUID)
}

// CreateUser mocks base method.
func (m *MockIUserService) CreateUser(ctx context.Context, data *dto.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserServiceMockRecorder) CreateUser(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserService)(nil).CreateUser), ctx, data)
}

// CreateUserLoginHistory mocks base method.
func (m *MockIUserService) CreateUserLoginHistory(ctx context.Context, data *dto.UserLoginHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserLoginHistory", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserLoginHistory indicates an expected call of CreateUserLoginHistory.
func (mr *MockIUserServiceMockRecorder) CreateUserLoginHistory(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserLoginHistory", reflect.TypeOf((*MockIUserService)(nil).CreateUserLoginHistory), ctx, data)
}

// CreateUserRole mocks base method.
func (m *MockIUserService) CreateUserRole(ctx context.Context, data *dto.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRole", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserRole indicates an expected call of CreateUserRole.
func (mr *MockIUserServiceMockRecorder) CreateUserRole(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRole", reflect.TypeOf((*MockIUserService)(nil).CreateUserRole), ctx, data)
}

// CreateUserTag mocks base method.
func (m *MockIUserService) CreateUserTag(ctx context.Context, data *dto.UserTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTag", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserTag indicates an expected call of CreateUserTag.
func (mr *MockIUserServiceMockRecorder) CreateUserTag(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTag", reflect.TypeOf((*MockIUserService)(nil).CreateUserTag), ctx, data)
}

// CreateUserWhitelist mocks base method.
func (m *MockIUserService) CreateUserWhitelist(ctx context.Context, data *dto.UserWhitelist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWhitelist", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserWhitelist indicates an expected call of CreateUserWhitelist.
func (mr *MockIUserServiceMockRecorder) CreateUserWhitelist(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWhitelist", reflect.TypeOf((*MockIUserService)(nil).CreateUserWhitelist), ctx, data)
}

// DeleteUser mocks base method.
func (m *MockIUserService) DeleteUser(ctx context.Context, opt *option.UserWhereOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUserServiceMockRecorder) DeleteUser(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUserService)(nil).DeleteUser), ctx, opt)
}

// DeleteUserRole mocks base method.
func (m *MockIUserService) DeleteUserRole(ctx context.Context, opt *option.UserRoleWhereOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRole", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRole indicates an expected call of DeleteUserRole.
func (mr *MockIUserServiceMockRecorder) DeleteUserRole(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRole", reflect.TypeOf((*MockIUserService)(nil).DeleteUserRole), ctx, opt)
}

// DeleteUserTag mocks base method.
func (m *MockIUserService) DeleteUserTag(ctx context.Context, opt *option.UserTagWhereOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserTag", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserTag indicates an expected call of DeleteUserTag.
func (mr *MockIUserServiceMockRecorder) DeleteUserTag(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserTag", reflect.TypeOf((*MockIUserService)(nil).DeleteUserTag), ctx, opt)
}

// DeleteUserWhitelist mocks base method.
func (m *MockIUserService) DeleteUserWhitelist(ctx context.Context, opt *option.UserWhitelistWhereOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserWhitelist", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserWhitelist indicates an expected call of DeleteUserWhitelist.
func (mr *MockIUserServiceMockRecorder) DeleteUserWhitelist(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWhitelist", reflect.TypeOf((*MockIUserService)(nil).DeleteUserWhitelist), ctx, opt)
}

// GetLastUserLoginHistories mocks base method.
func (m *MockIUserService) GetLastUserLoginHistories(ctx context.Context, opt *option.UserLoginHistoryWhereOption, col *dto.UserLoginHistory) (dto.UserLoginHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUserLoginHistories", ctx, opt, col)
	ret0, _ := ret[0].(dto.UserLoginHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUserLoginHistories indicates an expected call of GetLastUserLoginHistories.
func (mr *MockIUserServiceMockRecorder) GetLastUserLoginHistories(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUserLoginHistories", reflect.TypeOf((*MockIUserService)(nil).GetLastUserLoginHistories), ctx, opt, col)
}

// GetUser mocks base method.
func (m *MockIUserService) GetUser(ctx context.Context, opt *option.UserWhereOption) (dto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, opt)
	ret0, _ := ret[0].(dto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserServiceMockRecorder) GetUser(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserService)(nil).GetUser), ctx, opt)
}

// GetUserByID mocks base method.
func (m *MockIUserService) GetUserByID(ctx context.Context, id uint64) (dto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(dto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIUserServiceMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIUserService)(nil).GetUserByID), ctx, id)
}

// GetUserIDs mocks base method.
func (m *MockIUserService) GetUserIDs(ctx context.Context, opt *option.UserWhereOption) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDs", ctx, opt)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDs indicates an expected call of GetUserIDs.
func (mr *MockIUserServiceMockRecorder) GetUserIDs(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDs", reflect.TypeOf((*MockIUserService)(nil).GetUserIDs), ctx, opt)
}

// GetUserRole mocks base method.
func (m *MockIUserService) GetUserRole(ctx context.Context, opt *option.UserRoleWhereOption) (dto.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", ctx, opt)
	ret0, _ := ret[0].(dto.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockIUserServiceMockRecorder) GetUserRole(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockIUserService)(nil).GetUserRole), ctx, opt)
}

// GetUserTag mocks base method.
func (m *MockIUserService) GetUserTag(ctx context.Context, opt *option.UserTagWhereOption) (dto.UserTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTag", ctx, opt)
	ret0, _ := ret[0].(dto.UserTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTag indicates an expected call of GetUserTag.
func (mr *MockIUserServiceMockRecorder) GetUserTag(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTag", reflect.TypeOf((*MockIUserService)(nil).GetUserTag), ctx, opt)
}

// GetUserWhitelist mocks base method.
func (m *MockIUserService) GetUserWhitelist(ctx context.Context, opt *option.UserWhitelistWhereOption) (dto.UserWhitelist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWhitelist", ctx, opt)
	ret0, _ := ret[0].(dto.UserWhitelist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWhitelist indicates an expected call of GetUserWhitelist.
func (mr *MockIUserServiceMockRecorder) GetUserWhitelist(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWhitelist", reflect.TypeOf((*MockIUserService)(nil).GetUserWhitelist), ctx, opt)
}

// ListUserLoginHistories mocks base method.
func (m *MockIUserService) ListUserLoginHistories(ctx context.Context, opt *option.UserLoginHistoryWhereOption) ([]dto.UserLoginHistory, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserLoginHistories", ctx, opt)
	ret0, _ := ret[0].([]dto.UserLoginHistory)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserLoginHistories indicates an expected call of ListUserLoginHistories.
func (mr *MockIUserServiceMockRecorder) ListUserLoginHistories(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserLoginHistories", reflect.TypeOf((*MockIUserService)(nil).ListUserLoginHistories), ctx, opt)
}

// ListUserRoles mocks base method.
func (m *MockIUserService) ListUserRoles(ctx context.Context, opt *option.UserRoleWhereOption) ([]dto.UserRole, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserRoles", ctx, opt)
	ret0, _ := ret[0].([]dto.UserRole)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserRoles indicates an expected call of ListUserRoles.
func (mr *MockIUserServiceMockRecorder) ListUserRoles(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRoles", reflect.TypeOf((*MockIUserService)(nil).ListUserRoles), ctx, opt)
}

// ListUserTags mocks base method.
func (m *MockIUserService) ListUserTags(ctx context.Context, opt *option.UserTagWhereOption) ([]dto.UserTag, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserTags", ctx, opt)
	ret0, _ := ret[0].([]dto.UserTag)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserTags indicates an expected call of ListUserTags.
func (mr *MockIUserServiceMockRecorder) ListUserTags(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserTags", reflect.TypeOf((*MockIUserService)(nil).ListUserTags), ctx, opt)
}

// ListUserWhitelists mocks base method.
func (m *MockIUserService) ListUserWhitelists(ctx context.Context, opt *option.UserWhitelistWhereOption) ([]dto.UserWhitelist, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserWhitelists", ctx, opt)
	ret0, _ := ret[0].([]dto.UserWhitelist)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserWhitelists indicates an expected call of ListUserWhitelists.
func (mr *MockIUserServiceMockRecorder) ListUserWhitelists(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserWhitelists", reflect.TypeOf((*MockIUserService)(nil).ListUserWhitelists), ctx, opt)
}

// ListUsers mocks base method.
func (m *MockIUserService) ListUsers(ctx context.Context, opt *option.UserWhereOption) ([]dto.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, opt)
	ret0, _ := ret[0].([]dto.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockIUserServiceMockRecorder) ListUsers(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockIUserService)(nil).ListUsers), ctx, opt)
}

// UpdateUser mocks base method.
func (m *MockIUserService) UpdateUser(ctx context.Context, opt *option.UserWhereOption, col *option.UserUpdateColumn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, opt, col)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserServiceMockRecorder) UpdateUser(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserService)(nil).UpdateUser), ctx, opt, col)
}

// UpdateUserLoginHistory mocks base method.
func (m *MockIUserService) UpdateUserLoginHistory(ctx context.Context, opt *option.UserLoginHistoryWhereOption, col *option.UserLoginHistoryUpdateColumn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLoginHistory", ctx, opt, col)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLoginHistory indicates an expected call of UpdateUserLoginHistory.
func (mr *MockIUserServiceMockRecorder) UpdateUserLoginHistory(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLoginHistory", reflect.TypeOf((*MockIUserService)(nil).UpdateUserLoginHistory), ctx, opt, col)
}

// UpdateUserRole mocks base method.
func (m *MockIUserService) UpdateUserRole(ctx context.Context, opt *option.UserRoleWhereOption, col *option.UserRoleUpdateColumn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, opt, col)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockIUserServiceMockRecorder) UpdateUserRole(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockIUserService)(nil).UpdateUserRole), ctx, opt, col)
}

// UpdateUserTag mocks base method.
func (m *MockIUserService) UpdateUserTag(ctx context.Context, opt *option.UserTagWhereOption, col *option.UserTagUpdateColumn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserTag", ctx, opt, col)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserTag indicates an expected call of UpdateUserTag.
func (mr *MockIUserServiceMockRecorder) UpdateUserTag(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserTag", reflect.TypeOf((*MockIUserService)(nil).UpdateUserTag), ctx, opt, col)
}

// UpdateUserWhitelist mocks base method.
func (m *MockIUserService) UpdateUserWhitelist(ctx context.Context, opt *option.UserWhitelistWhereOption, col *option.UserWhitelistUpdateColumn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserWhitelist", ctx, opt, col)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserWhitelist indicates an expected call of UpdateUserWhitelist.
func (mr *MockIUserServiceMockRecorder) UpdateUserWhitelist(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWhitelist", reflect.TypeOf((*MockIUserService)(nil).UpdateUserWhitelist), ctx, opt, col)
}

// UpsertUserLoginInfo mocks base method.
func (m *MockIUserService) UpsertUserLoginInfo(ctx context.Context, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserLoginInfo", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUserLoginInfo indicates an expected call of UpsertUserLoginInfo.
func (mr *MockIUserServiceMockRecorder) UpsertUserLoginInfo(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserLoginInfo", reflect.TypeOf((*MockIUserService)(nil).UpsertUserLoginInfo), ctx, userID)
}

// MockIRoleService is a mock of IRoleService interface.
type MockIRoleService struct {
	ctrl     *gomock.Controller
	recorder *MockIRoleServiceMockRecorder
}

// MockIRoleServiceMockRecorder is the mock recorder for MockIRoleService.
type MockIRoleServiceMockRecorder struct {
	mock *MockIRoleService
}

// NewMockIRoleService creates a new mock instance.
func NewMockIRoleService(ctrl *gomock.Controller) *MockIRoleService {
	mock := &MockIRoleService{ctrl: ctrl}
	mock.recorder = &MockIRoleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRoleService) EXPECT() *MockIRoleServiceMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockIRoleService) CreateRole(ctx context.Context, data *dto.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockIRoleServiceMockRecorder) CreateRole(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIRoleService)(nil).CreateRole), ctx, data)
}

// DeleteRole mocks base method.
func (m *MockIRoleService) DeleteRole(ctx context.Context, opt *option.RoleWhereOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockIRoleServiceMockRecorder) DeleteRole(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIRoleService)(nil).DeleteRole), ctx, opt)
}

// GetRole mocks base method.
func (m *MockIRoleService) GetRole(ctx context.Context, opt *option.RoleWhereOption) (dto.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, opt)
	ret0, _ := ret[0].(dto.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockIRoleServiceMockRecorder) GetRole(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockIRoleService)(nil).GetRole), ctx, opt)
}

// ListRoles mocks base method.
func (m *MockIRoleService) ListRoles(ctx context.Context, opt *option.RoleWhereOption) ([]dto.Role, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", ctx, opt)
	ret0, _ := ret[0].([]dto.Role)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockIRoleServiceMockRecorder) ListRoles(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockIRoleService)(nil).ListRoles), ctx, opt)
}

// UpdateRole mocks base method.
func (m *MockIRoleService) UpdateRole(ctx context.Context, opt *option.RoleWhereOption, col *option.RoleUpdateColumn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, opt, col)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockIRoleServiceMockRecorder) UpdateRole(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockIRoleService)(nil).UpdateRole), ctx, opt, col)
}

// MockITagService is a mock of ITagService interface.
type MockITagService struct {
	ctrl     *gomock.Controller
	recorder *MockITagServiceMockRecorder
}

// MockITagServiceMockRecorder is the mock recorder for MockITagService.
type MockITagServiceMockRecorder struct {
	mock *MockITagService
}

// NewMockITagService creates a new mock instance.
func NewMockITagService(ctrl *gomock.Controller) *MockITagService {
	mock := &MockITagService{ctrl: ctrl}
	mock.recorder = &MockITagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITagService) EXPECT() *MockITagServiceMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockITagService) CreateTag(ctx context.Context, data *dto.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockITagServiceMockRecorder) CreateTag(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockITagService)(nil).CreateTag), ctx, data)
}

// DeleteTag mocks base method.
func (m *MockITagService) DeleteTag(ctx context.Context, opt *option.TagWhereOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockITagServiceMockRecorder) DeleteTag(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockITagService)(nil).DeleteTag), ctx, opt)
}

// GetTag mocks base method.
func (m *MockITagService) GetTag(ctx context.Context, opt *option.TagWhereOption) (dto.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, opt)
	ret0, _ := ret[0].(dto.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockITagServiceMockRecorder) GetTag(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockITagService)(nil).GetTag), ctx, opt)
}

// ListTags mocks base method.
func (m *MockITagService) ListTags(ctx context.Context, opt *option.TagWhereOption) ([]dto.Tag, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, opt)
	ret0, _ := ret[0].([]dto.Tag)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTags indicates an expected call of ListTags.
func (mr *MockITagServiceMockRecorder) ListTags(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockITagService)(nil).ListTags), ctx, opt)
}

// UpdateTag mocks base method.
func (m *MockITagService) UpdateTag(ctx context.Context, opt *option.TagWhereOption, col *option.TagUpdateColumn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, opt, col)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockITagServiceMockRecorder) UpdateTag(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockITagService)(nil).UpdateTag), ctx, opt, col)
}

// MockIAuditLogService is a mock of IAuditLogService interface.
type MockIAuditLogService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuditLogServiceMockRecorder
}

// MockIAuditLogServiceMockRecorder is the mock recorder for MockIAuditLogService.
type MockIAuditLogServiceMockRecorder struct {
	mock *MockIAuditLogService
}

// NewMockIAuditLogService creates a new mock instance.
func NewMockIAuditLogService(ctrl *gomock.Controller) *MockIAuditLogService {
	mock := &MockIAuditLogService{ctrl: ctrl}
	mock.recorder = &MockIAuditLogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuditLogService) EXPECT() *MockIAuditLogServiceMockRecorder {
	return m.recorder
}

// CreateAuditLog mocks base method.
func (m *MockIAuditLogService) CreateAuditLog(ctx context.Context, data *dto.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuditLog", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuditLog indicates an expected call of CreateAuditLog.
func (mr *MockIAuditLogServiceMockRecorder) CreateAuditLog(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuditLog", reflect.TypeOf((*MockIAuditLogService)(nil).CreateAuditLog), ctx, data)
}

// DeleteAuditLog mocks base method.
func (m *MockIAuditLogService) DeleteAuditLog(ctx context.Context, opt *option.AuditLogWhereOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuditLog", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuditLog indicates an expected call of DeleteAuditLog.
func (mr *MockIAuditLogServiceMockRecorder) DeleteAuditLog(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuditLog", reflect.TypeOf((*MockIAuditLogService)(nil).DeleteAuditLog), ctx, opt)
}

// GetAuditLog mocks base method.
func (m *MockIAuditLogService) GetAuditLog(ctx context.Context, opt *option.AuditLogWhereOption) (dto.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLog", ctx, opt)
	ret0, _ := ret[0].(dto.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLog indicates an expected call of GetAuditLog.
func (mr *MockIAuditLogServiceMockRecorder) GetAuditLog(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLog", reflect.TypeOf((*MockIAuditLogService)(nil).GetAuditLog), ctx, opt)
}

// ListAuditLogs mocks base method.
func (m *MockIAuditLogService) ListAuditLogs(ctx context.Context, opt *option.AuditLogWhereOption) ([]dto.AuditLog, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuditLogs", ctx, opt)
	ret0, _ := ret[0].([]dto.AuditLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockIAuditLogServiceMockRecorder) ListAuditLogs(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockIAuditLogService)(nil).ListAuditLogs), ctx, opt)
}

// RecordAuditLogForGraphql mocks base method.
func (m *MockIAuditLogService) RecordAuditLogForGraphql(ctx context.Context, next graphql.ResponseHandler) *graphql.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordAuditLogForGraphql", ctx, next)
	ret0, _ := ret[0].(*graphql.Response)
	return ret0
}

// RecordAuditLogForGraphql indicates an expected call of RecordAuditLogForGraphql.
func (mr *MockIAuditLogServiceMockRecorder) RecordAuditLogForGraphql(ctx, next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAuditLogForGraphql", reflect.TypeOf((*MockIAuditLogService)(nil).RecordAuditLogForGraphql), ctx, next)
}

// UpdateAuditLog mocks base method.
func (m *MockIAuditLogService) UpdateAuditLog(ctx context.Context, opt *option.AuditLogWhereOption, col *option.AuditLogUpdateColumn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuditLog", ctx, opt, col)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuditLog indicates an expected call of UpdateAuditLog.
func (mr *MockIAuditLogServiceMockRecorder) UpdateAuditLog(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuditLog", reflect.TypeOf((*MockIAuditLogService)(nil).UpdateAuditLog), ctx, opt, col)
}

// MockISupportService is a mock of ISupportService interface.
type MockISupportService struct {
	ctrl     *gomock.Controller
	recorder *MockISupportServiceMockRecorder
}

// MockISupportServiceMockRecorder is the mock recorder for MockISupportService.
type MockISupportServiceMockRecorder struct {
	mock *MockISupportService
}

// NewMockISupportService creates a new mock instance.
func NewMockISupportService(ctrl *gomock.Controller) *MockISupportService {
	mock := &MockISupportService{ctrl: ctrl}
	mock.recorder = &MockISupportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISupportService) EXPECT() *MockISupportServiceMockRecorder {
	return m.recorder
}

// AutoDenyHostWithRule mocks base method.
func (m *MockISupportService) AutoDenyHostWithRule(ctx context.Context, t time.Time, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoDenyHostWithRule", ctx, t, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoDenyHostWithRule indicates an expected call of AutoDenyHostWithRule.
func (mr *MockISupportServiceMockRecorder) AutoDenyHostWithRule(ctx, t, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoDenyHostWithRule", reflect.TypeOf((*MockISupportService)(nil).AutoDenyHostWithRule), ctx, t, duration)
}

// CreateHostsDeny mocks base method.
func (m *MockISupportService) CreateHostsDeny(ctx context.Context, data *dto.HostsDeny) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostsDeny", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHostsDeny indicates an expected call of CreateHostsDeny.
func (mr *MockISupportServiceMockRecorder) CreateHostsDeny(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostsDeny", reflect.TypeOf((*MockISupportService)(nil).CreateHostsDeny), ctx, data)
}

// CreateUploadURL mocks base method.
func (m *MockISupportService) CreateUploadURL(ctx context.Context, in []vo.FileInfo, expire time.Duration) ([]vo.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadURL", ctx, in, expire)
	ret0, _ := ret[0].([]vo.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadURL indicates an expected call of CreateUploadURL.
func (mr *MockISupportServiceMockRecorder) CreateUploadURL(ctx, in, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadURL", reflect.TypeOf((*MockISupportService)(nil).CreateUploadURL), ctx, in, expire)
}

// DeleteHostsDeny mocks base method.
func (m *MockISupportService) DeleteHostsDeny(ctx context.Context, opt *option.HostsDenyWhereOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostsDeny", ctx, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHostsDeny indicates an expected call of DeleteHostsDeny.
func (mr *MockISupportServiceMockRecorder) DeleteHostsDeny(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostsDeny", reflect.TypeOf((*MockISupportService)(nil).DeleteHostsDeny), ctx, opt)
}

// GetHostsDeny mocks base method.
func (m *MockISupportService) GetHostsDeny(ctx context.Context, opt *option.HostsDenyWhereOption) (dto.HostsDeny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsDeny", ctx, opt)
	ret0, _ := ret[0].(dto.HostsDeny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsDeny indicates an expected call of GetHostsDeny.
func (mr *MockISupportServiceMockRecorder) GetHostsDeny(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsDeny", reflect.TypeOf((*MockISupportService)(nil).GetHostsDeny), ctx, opt)
}

// ListHostsDeny mocks base method.
func (m *MockISupportService) ListHostsDeny(ctx context.Context, opt *option.HostsDenyWhereOption) ([]dto.HostsDeny, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostsDeny", ctx, opt)
	ret0, _ := ret[0].([]dto.HostsDeny)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHostsDeny indicates an expected call of ListHostsDeny.
func (mr *MockISupportServiceMockRecorder) ListHostsDeny(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostsDeny", reflect.TypeOf((*MockISupportService)(nil).ListHostsDeny), ctx, opt)
}

// UpdateHostsDeny mocks base method.
func (m *MockISupportService) UpdateHostsDeny(ctx context.Context, opt *option.HostsDenyWhereOption, col *option.HostsDenyUpdateColumn) (dto.HostsDeny, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostsDeny", ctx, opt, col)
	ret0, _ := ret[0].(dto.HostsDeny)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostsDeny indicates an expected call of UpdateHostsDeny.
func (mr *MockISupportServiceMockRecorder) UpdateHostsDeny(ctx, opt, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostsDeny", reflect.TypeOf((*MockISupportService)(nil).UpdateHostsDeny), ctx, opt, col)
}

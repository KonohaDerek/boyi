package platform

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"boyi/internal/claims"
	"boyi/pkg/Infra/storage"
	"boyi/pkg/delivery/graph/view"
	"boyi/pkg/model/dto"
	"boyi/pkg/model/option"
	"context"
	"time"
)

// CreateCommonUser is the resolver for the CreateCommonUser field.
func (r *mutationResolver) CreateCommonUser(ctx context.Context, in view.CreateCommonUserReqInput) (*view.CreateCommonUserResp, error) {
	var (
		resp view.CreateCommonUserResp
	)

	//	驗證登入
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return nil, err
	}

	req := in.ConvertToDTO()

	// 註冊使用者
	user, err := r.authSvc.Register(ctx, req)
	if err != nil {
		return nil, err
	}

	// 執行Mapper
	return resp.FromUser(user, storage.PlatformFileRestfulURI), nil
}

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, in view.LoginReqInput) (*view.LoginResp, error) {
	var resp view.LoginResp

	result, err := r.authSvc.Login(ctx, in.ConvertToVo(ctx))
	if err != nil {
		return nil, err
	}
	resp = view.LoginResp{
		Token: result.Token,
	}
	return resp.FromClaims(result), nil
}

// Logout is the resolver for the Logout field.
func (r *mutationResolver) Logout(ctx context.Context) (uint64, error) {
	c, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	if err := r.authSvc.Logout(ctx, c); err != nil {
		return 0, err
	}

	return 1, nil
}

// FlushAllCache is the resolver for the FlushAllCache field.
func (r *mutationResolver) FlushAllCache(ctx context.Context) (uint64, error) {
	if err := r.authSvc.FlushAllCache(ctx); err != nil {
		return 0, err
	}
	return 1, nil
}

// RefreshToken is the resolver for the RefreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context) (*view.RefreshTokenResp, error) {
	var (
		resp *view.RefreshTokenResp
	)
	c, err := claims.GetClaims(ctx)
	if err != nil {
		return nil, err
	}

	if err := r.authSvc.RefreshToken(ctx, &c); err != nil {
		return nil, err
	}

	resp = &view.RefreshTokenResp{
		Token:   c.Token,
		Expires: time.Now().Add(refreshTokenTTLSeconds * time.Second).UTC(),
	}
	return resp, nil
}

// Me is the resolver for the Me field.
func (r *queryResolver) Me(ctx context.Context) (*view.Claims, error) {
	var (
		resp *view.Claims
	)
	c, err := claims.GetClaims(ctx)
	if err != nil {
		return nil, err
	}
	user, err := r.userSvc.GetUser(ctx, &option.UserWhereOption{
		User: dto.User{
			ID: c.Id,
		},
	})
	if err != nil {
		return nil, err
	}

	resp = resp.
		FromClaims(c).
		FromUser(user, storage.PlatformFileRestfulURI)

	return resp, nil
}

package platform

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"boyi/internal/claims"
	"boyi/pkg/delivery/graph/view"
	"boyi/pkg/model/dto"
	"boyi/pkg/model/option"
	"context"
)

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, in view.TagCreateInput) (uint64, error) {
	var (
		tag dto.Tag
	)
	u, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	tag = in.ConvertToDTO()
	tag.CreateUserID = u.Id
	if err := r.tagSvc.CreateTag(ctx, &tag); err != nil {
		return 0, err
	}

	return tag.ID, nil
}

// UpdateTag is the resolver for the updateTag field.
func (r *mutationResolver) UpdateTag(ctx context.Context, filter view.TagFilterInput, in view.TagUpdateInput) (uint64, error) {
	var (
		opt  option.TagWhereOption
		cols option.TagUpdateColumn
	)

	u, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	opt = filter.ConvertToOption()
	cols = in.ConvertToOption()
	cols.UpdateUserID = u.Id

	if err := r.tagSvc.UpdateTag(ctx, &opt, &cols); err != nil {
		return 0, err
	}

	return 1, nil
}

// DeleteTag is the resolver for the deleteTag field.
func (r *mutationResolver) DeleteTag(ctx context.Context, filter view.TagFilterInput) (uint64, error) {
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	var opt = filter.ConvertToOption()
	if err := r.tagSvc.DeleteTag(ctx, &opt); err != nil {
		return 0, err
	}

	return 1, nil
}

// GetTag is the resolver for the getTag field.
func (r *queryResolver) GetTag(ctx context.Context, filter view.TagFilterInput) (*view.Tag, error) {
	var (
		opt  option.TagWhereOption
		resp view.Tag
	)
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return nil, err
	}

	opt = filter.ConvertToOption()
	result, err := r.tagSvc.GetTag(ctx, &opt)
	if err != nil {
		return nil, err
	}

	return resp.FromDTO(result), nil
}

// ListTag is the resolver for the listTag field.
func (r *queryResolver) ListTag(ctx context.Context, filter view.TagFilterInput, pagination *view.PaginationInput) (*view.ListTagResp, error) {
	var (
		opt  option.TagWhereOption
		resp view.ListTagResp
	)
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return nil, err
	}

	opt = filter.ConvertToOption()
	if pagination != nil {
		opt.Pagination = pagination.ConvertToPagination()
	}

	result, total, err := r.tagSvc.ListTags(ctx, &opt)
	if err != nil {
		return nil, err
	}

	resp.Meta = &view.Meta{
		Total: uint64(total),
	}
	resp.Tags = make([]*view.Tag, 0, len(result))
	viewTags := make([]view.Tag, len(result))
	for i := range result {
		resp.Tags = append(resp.Tags, viewTags[i].FromDTO(result[i]))
	}

	return &resp, nil
}

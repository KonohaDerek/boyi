package platform

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"boyi/internal/claims"
	"boyi/pkg/delivery/graph/view"
	"boyi/pkg/model/dto"
	"boyi/pkg/model/option"
	"context"
	"fmt"
)

// CreateHostsDeny is the resolver for the createHostsDeny field.
func (r *mutationResolver) CreateHostsDeny(ctx context.Context, in view.HostsDenyCreateInput) (*view.HostsDeny, error) {
	var (
		result dto.HostsDeny
		resp   view.HostsDeny
	)
	claims, err := claims.VerifyRole(ctx, dto.API_HostsDeny_Create.String())
	if err != nil {
		return nil, err
	}

	result = in.ConvertToDTO(claims)

	err = r.supportSvc.CreateHostsDeny(ctx, &result)
	if err != nil {
		return nil, err
	}

	return resp.FromDTO(result), nil
}

// UpdateHostsDeny is the resolver for the updateHostsDeny field.
func (r *mutationResolver) UpdateHostsDeny(ctx context.Context, filter view.HostsDenyFilterInput, in view.HostsDenyUpdateInput) (*view.HostsDeny, error) {
	var (
		opt  option.HostsDenyWhereOption
		cols option.HostsDenyUpdateColumn
		resp view.HostsDeny
	)

	claims, err := claims.VerifyRole(ctx, dto.API_HostsDeny_Update.String())
	if err != nil {
		return nil, err
	}

	opt = filter.ConvertToOption()
	cols = in.ConvertToOption(claims)

	result, err := r.supportSvc.UpdateHostsDeny(ctx, &opt, &cols)
	if err != nil {
		return nil, err
	}
	return resp.FromDTO(result), nil
}

// DeleteHostsDeny is the resolver for the deleteHostsDeny field.
func (r *mutationResolver) DeleteHostsDeny(ctx context.Context, filter view.HostsDenyFilterInput) (uint64, error) {
	_, err := claims.VerifyRole(ctx, dto.API_HostsDeny_Delete.String())
	if err != nil {
		return 0, err
	}

	var opt = filter.ConvertToOption()
	if err := r.supportSvc.DeleteHostsDeny(ctx, &opt); err != nil {
		return 0, err
	}

	return 1, nil
}

// ConfigSms is the resolver for the configSms field.
func (r *mutationResolver) ConfigSms(ctx context.Context, in view.SmsConfigInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: ConfigSms - configSms"))
}

// ConfigEmail is the resolver for the configEmail field.
func (r *mutationResolver) ConfigEmail(ctx context.Context, in view.EmailConfigInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: ConfigEmail - configEmail"))
}

// CreateTemplate is the resolver for the createTemplate field.
func (r *mutationResolver) CreateTemplate(ctx context.Context, in view.TemplateCreateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: CreateTemplate - createTemplate"))
}

// UpdateTemplate is the resolver for the updateTemplate field.
func (r *mutationResolver) UpdateTemplate(ctx context.Context, filter view.TemplateFilterInput, in view.TemplateUpdateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: UpdateTemplate - updateTemplate"))
}

// DeleteTemplate is the resolver for the deleteTemplate field.
func (r *mutationResolver) DeleteTemplate(ctx context.Context, filter view.TemplateFilterInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: DeleteTemplate - deleteTemplate"))
}

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, in view.TagCreateInput) (uint64, error) {
	var (
		tag dto.Tag
	)
	u, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	tag = in.ConvertToDTO()
	tag.CreateUserID = u.Id
	if err := r.tagSvc.CreateTag(ctx, &tag); err != nil {
		return 0, err
	}

	return tag.ID, nil
}

// UpdateTag is the resolver for the updateTag field.
func (r *mutationResolver) UpdateTag(ctx context.Context, filter view.TagFilterInput, in view.TagUpdateInput) (uint64, error) {
	var (
		opt  option.TagWhereOption
		cols option.TagUpdateColumn
	)

	u, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	opt = filter.ConvertToOption()
	cols = in.ConvertToOption()
	cols.UpdateUserID = u.Id

	if err := r.tagSvc.UpdateTag(ctx, &opt, &cols); err != nil {
		return 0, err
	}

	return 1, nil
}

// DeleteTag is the resolver for the deleteTag field.
func (r *mutationResolver) DeleteTag(ctx context.Context, filter view.TagFilterInput) (uint64, error) {
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	var opt = filter.ConvertToOption()
	if err := r.tagSvc.DeleteTag(ctx, &opt); err != nil {
		return 0, err
	}

	return 1, nil
}

// CreateSecurityEvent is the resolver for the createSecurityEvent field.
func (r *mutationResolver) CreateSecurityEvent(ctx context.Context, in view.SecurityEventCreateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: CreateSecurityEvent - createSecurityEvent"))
}

// UpdateSecurityEvent is the resolver for the updateSecurityEvent field.
func (r *mutationResolver) UpdateSecurityEvent(ctx context.Context, filter view.SecurityEventFilterInput, in view.SecurityEventUpdateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: UpdateSecurityEvent - updateSecurityEvent"))
}

// DeleteSecurityEvent is the resolver for the deleteSecurityEvent field.
func (r *mutationResolver) DeleteSecurityEvent(ctx context.Context, filter view.SecurityEventFilterInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: DeleteSecurityEvent - deleteSecurityEvent"))
}

// GetHostsDeny is the resolver for the getHostsDeny field.
func (r *queryResolver) GetHostsDeny(ctx context.Context, filter view.HostsDenyFilterInput) (*view.HostsDeny, error) {
	var (
		opt  option.HostsDenyWhereOption
		resp view.HostsDeny
	)

	_, err := claims.VerifyRole(ctx, dto.API_HostsDeny_Get.String())
	if err != nil {
		return nil, err
	}

	opt = filter.ConvertToOption()

	result, err := r.supportSvc.GetHostsDeny(ctx, &opt)
	if err != nil {
		return nil, err
	}

	return resp.FromDTO(result), nil
}

// ListHostsDeny is the resolver for the listHostsDeny field.
func (r *queryResolver) ListHostsDeny(ctx context.Context, filter *view.HostsDenyFilterInput, pagination *view.PaginationInput) (*view.ListHostsDenyResp, error) {
	var (
		opt  option.HostsDenyWhereOption
		resp view.ListHostsDenyResp
	)

	_, err := claims.VerifyRole(ctx, dto.API_HostsDeny_Get.String())
	if err != nil {
		return nil, err
	}

	if filter != nil {
		opt = filter.ConvertToOption()
	}

	if pagination != nil {
		opt.Pagination = pagination.ConvertToPagination()
	}

	result, total, err := r.supportSvc.ListHostsDeny(ctx, &opt)
	if err != nil {
		return nil, err
	}

	resp = view.ListHostsDenyResp{
		Meta: &view.Meta{
			Total: uint64(total),
		},
		HostsDenys: make([]*view.HostsDeny, 0, len(result)),
	}

	viewCSS := make([]view.HostsDeny, len(result))
	for i := range result {
		resp.HostsDenys = append(resp.HostsDenys, viewCSS[i].FromDTO(result[i]))
	}

	return &resp, nil
}

// ListTemplate is the resolver for the listTemplate field.
func (r *queryResolver) ListTemplate(ctx context.Context, filter view.TemplateFilterInput, pagination *view.PaginationInput) (*view.ListTemplateResp, error) {
	panic(fmt.Errorf("not implemented: ListTemplate - listTemplate"))
}

// ListAuditLog is the resolver for the listAuditLog field.
func (r *queryResolver) ListAuditLog(ctx context.Context, filter view.AuditLogFilterInput, pagination *view.PaginationInput) (*view.ListAuditLogResp, error) {
	var (
		opt  option.AuditLogWhereOption
		resp view.ListAuditLogResp
	)
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return &resp, err
	}

	opt = filter.ConvertToOption()
	if pagination != nil {
		opt.Pagination = pagination.ConvertToPagination()
	}

	result, total, err := r.auditLogSvc.ListAuditLogs(ctx, &opt)
	if err != nil {
		return nil, err
	}

	resp.Meta = &view.Meta{
		Total: uint64(total),
	}
	resp.AuditLogs = make([]*view.AuditLog, 0, len(result))
	viewAuditLog := make([]view.AuditLog, len(result))
	for i := range result {
		resp.AuditLogs = append(resp.AuditLogs, viewAuditLog[i].FromDTO(result[i]))
	}

	return &resp, nil
}

// GetTag is the resolver for the getTag field.
func (r *queryResolver) GetTag(ctx context.Context, filter view.TagFilterInput) (*view.Tag, error) {
	var (
		opt  option.TagWhereOption
		resp view.Tag
	)
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return nil, err
	}

	opt = filter.ConvertToOption()
	result, err := r.tagSvc.GetTag(ctx, &opt)
	if err != nil {
		return nil, err
	}

	return resp.FromDTO(result), nil
}

// ListTag is the resolver for the listTag field.
func (r *queryResolver) ListTag(ctx context.Context, filter view.TagFilterInput, pagination *view.PaginationInput) (*view.ListTagResp, error) {
	var (
		opt  option.TagWhereOption
		resp view.ListTagResp
	)
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return nil, err
	}

	opt = filter.ConvertToOption()
	if pagination != nil {
		opt.Pagination = pagination.ConvertToPagination()
	}

	result, total, err := r.tagSvc.ListTags(ctx, &opt)
	if err != nil {
		return nil, err
	}

	resp.Meta = &view.Meta{
		Total: uint64(total),
	}
	resp.Tags = make([]*view.Tag, 0, len(result))
	viewTags := make([]view.Tag, len(result))
	for i := range result {
		resp.Tags = append(resp.Tags, viewTags[i].FromDTO(result[i]))
	}

	return &resp, nil
}

// ListSecurityEvent is the resolver for the listSecurityEvent field.
func (r *queryResolver) ListSecurityEvent(ctx context.Context, filter view.SecurityEventFilterInput, pagination *view.PaginationInput) (*view.ListSecurityEventResp, error) {
	panic(fmt.Errorf("not implemented: ListSecurityEvent - listSecurityEvent"))
}

// GetSmsConfig is the resolver for the getSmsConfig field.
func (r *queryResolver) GetSmsConfig(ctx context.Context) (*view.SmsConfig, error) {
	panic(fmt.Errorf("not implemented: GetSmsConfig - getSmsConfig"))
}

// ListSmsRecord is the resolver for the listSmsRecord field.
func (r *queryResolver) ListSmsRecord(ctx context.Context, filter view.SmsRecordFilterInput, pagination *view.PaginationInput) (*view.ListSmsRecordResp, error) {
	panic(fmt.Errorf("not implemented: ListSmsRecord - listSmsRecord"))
}

// GetEmailConfig is the resolver for the getEmailConfig field.
func (r *queryResolver) GetEmailConfig(ctx context.Context) (*view.EmailConfig, error) {
	panic(fmt.Errorf("not implemented: GetEmailConfig - getEmailConfig"))
}

// ListEmailRecord is the resolver for the listEmailRecord field.
func (r *queryResolver) ListEmailRecord(ctx context.Context, filter view.EmailRecordFilterInput, pagination *view.PaginationInput) (*view.ListEmailRecordResp, error) {
	panic(fmt.Errorf("not implemented: ListEmailRecord - listEmailRecord"))
}

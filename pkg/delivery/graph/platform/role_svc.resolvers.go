package platform

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"boyi/internal/claims"
	"boyi/pkg/delivery/graph/view"
	"boyi/pkg/model/dto"
	"boyi/pkg/model/option"
	"context"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, in view.RoleCreateInput) (uint64, error) {
	var (
		role dto.Role
	)
	claims, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	if err := claims.VerifyRole(
		dto.API_Manager_Role_Create.String()); err != nil {
		return 0, err
	}

	role = in.ConvertToDTO()
	role.CreateUserID = claims.Id
	if err := r.roleSvc.CreateRole(ctx, &role); err != nil {
		return 0, err
	}

	return role.ID, nil
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, filter view.RoleFilterInput, in view.RoleUpdateInput) (uint64, error) {
	var (
		opt  option.RoleWhereOption
		cols option.RoleUpdateColumn
	)

	claims, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	if err := claims.VerifyRole(
		dto.API_Manager_Role_Update.String()); err != nil {
		return 0, err
	}

	opt = filter.ConvertToOption()
	cols = in.ConvertToOption()
	cols.UpdateUserID = claims.Id

	if err := r.roleSvc.UpdateRole(ctx, &opt, &cols); err != nil {
		return 0, err
	}

	return 1, nil
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, filter view.RoleFilterInput) (uint64, error) {
	claims, err := claims.GetClaims(ctx)
	if err != nil {
		return 0, err
	}

	if err := claims.VerifyRole(
		dto.API_Manager_Role_Delete.String()); err != nil {
		return 0, err
	}

	var opt = filter.ConvertToOption()
	if err := r.roleSvc.DeleteRole(ctx, &opt); err != nil {
		return 0, err
	}

	return 1, nil
}

// GetRole is the resolver for the getRole field.
func (r *queryResolver) GetRole(ctx context.Context, filter view.RoleFilterInput) (*view.Role, error) {
	var (
		opt  option.RoleWhereOption
		resp view.Role
	)
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return &resp, err
	}

	opt = filter.ConvertToOption()
	result, err := r.roleSvc.GetRole(ctx, &opt)
	if err != nil {
		return nil, err
	}

	return resp.FromDTO(result), nil
}

// ListRole is the resolver for the listRole field.
func (r *queryResolver) ListRole(ctx context.Context, filter view.RoleFilterInput, pagination *view.PaginationInput) (*view.ListRoleResp, error) {
	var (
		opt  option.RoleWhereOption
		resp view.ListRoleResp
	)
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return &resp, err
	}

	opt = filter.ConvertToOption()
	if pagination != nil {
		opt.Pagination = pagination.ConvertToPagination()
	}

	result, total, err := r.roleSvc.ListRoles(ctx, &opt)
	if err != nil {
		return nil, err
	}

	resp.Meta = &view.Meta{
		Total: uint64(total),
	}
	resp.Roles = make([]*view.Role, 0, len(result))
	viewRoles := make([]view.Role, len(result))
	for i := range result {
		resp.Roles = append(resp.Roles, viewRoles[i].FromDTO(result[i]))
	}

	return &resp, nil
}

package platform

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"boyi/internal/claims"
	"boyi/pkg/delivery/graph/view"
	"boyi/pkg/model/option"
	"context"
	"fmt"
)

// CreateAuditLog is the resolver for the createAuditLog field.
func (r *mutationResolver) CreateAuditLog(ctx context.Context, in view.AuditLogCreateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented"))
}

// GetAuditLog is the resolver for the getAuditLog field.
func (r *queryResolver) GetAuditLog(ctx context.Context, filter view.AuditLogFilterInput) (*view.AuditLog, error) {
	var (
		opt  option.AuditLogWhereOption
		resp view.AuditLog
	)
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return &resp, err
	}

	opt = filter.ConvertToOption()
	result, err := r.auditLogSvc.GetAuditLog(ctx, &opt)
	if err != nil {
		return nil, err
	}

	return resp.FromDTO(result), nil
}

// ListAuditLog is the resolver for the listAuditLog field.
func (r *queryResolver) ListAuditLog(ctx context.Context, filter view.AuditLogFilterInput, pagination *view.PaginationInput) (*view.ListAuditLogResp, error) {
	var (
		opt  option.AuditLogWhereOption
		resp view.ListAuditLogResp
	)
	_, err := claims.GetClaims(ctx)
	if err != nil {
		return &resp, err
	}

	opt = filter.ConvertToOption()
	if pagination != nil {
		opt.Pagination = pagination.ConvertToPagination()
	}

	result, total, err := r.auditLogSvc.ListAuditLogs(ctx, &opt)
	if err != nil {
		return nil, err
	}

	resp.Meta = &view.Meta{
		Total: uint64(total),
	}
	resp.AuditLogs = make([]*view.AuditLog, 0, len(result))
	viewAuditLog := make([]view.AuditLog, len(result))
	for i := range result {
		resp.AuditLogs = append(resp.AuditLogs, viewAuditLog[i].FromDTO(result[i]))
	}

	return &resp, nil
}

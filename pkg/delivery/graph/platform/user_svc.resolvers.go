package platform

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"boyi/pkg/delivery/graph/view"
	"context"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, in view.CreateUserReqInput) (*view.CreateUserResp, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, filter view.UserFilterInput, in view.UserUpdateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, filter view.UserFilterInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// UpdateUserPassword is the resolver for the updateUserPassword field.
func (r *mutationResolver) UpdateUserPassword(ctx context.Context, in view.UserUpdatePasswordInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: UpdateUserPassword - updateUserPassword"))
}

// CreateUserWhitelist is the resolver for the createUserWhitelist field.
func (r *mutationResolver) CreateUserWhitelist(ctx context.Context, in view.UserWhitelistCreateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: CreateUserWhitelist - createUserWhitelist"))
}

// UpdateUserWhitelist is the resolver for the updateUserWhitelist field.
func (r *mutationResolver) UpdateUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput, in view.UserWhitelistUpdateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: UpdateUserWhitelist - updateUserWhitelist"))
}

// DeleteUserWhitelist is the resolver for the deleteUserWhitelist field.
func (r *mutationResolver) DeleteUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: DeleteUserWhitelist - deleteUserWhitelist"))
}

// CreateUserRole is the resolver for the createUserRole field.
func (r *mutationResolver) CreateUserRole(ctx context.Context, in view.UserRoleCreateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: CreateUserRole - createUserRole"))
}

// UpdateUserRole is the resolver for the updateUserRole field.
func (r *mutationResolver) UpdateUserRole(ctx context.Context, filter view.UserRoleFilterInput, in view.UserRoleUpdateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: UpdateUserRole - updateUserRole"))
}

// DeleteUserRole is the resolver for the deleteUserRole field.
func (r *mutationResolver) DeleteUserRole(ctx context.Context, filter view.UserRoleFilterInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: DeleteUserRole - deleteUserRole"))
}

// CreateUserTag is the resolver for the createUserTag field.
func (r *mutationResolver) CreateUserTag(ctx context.Context, in view.UserTagCreateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: CreateUserTag - createUserTag"))
}

// UpdateUserTag is the resolver for the updateUserTag field.
func (r *mutationResolver) UpdateUserTag(ctx context.Context, filter view.UserTagFilterInput, in view.UserTagUpdateInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: UpdateUserTag - updateUserTag"))
}

// DeleteUserTag is the resolver for the deleteUserTag field.
func (r *mutationResolver) DeleteUserTag(ctx context.Context, filter view.UserTagFilterInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: DeleteUserTag - deleteUserTag"))
}

// BanUser is the resolver for the banUser field.
func (r *mutationResolver) BanUser(ctx context.Context, filter view.UserFilterInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: BanUser - banUser"))
}

// UnbanUser is the resolver for the unbanUser field.
func (r *mutationResolver) UnbanUser(ctx context.Context, filter view.UserFilterInput) (uint64, error) {
	panic(fmt.Errorf("not implemented: UnbanUser - unbanUser"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, filter view.UserFilterInput) (*view.User, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

// ListUser is the resolver for the listUser field.
func (r *queryResolver) ListUser(ctx context.Context, filter view.UserFilterInput, pagination *view.PaginationInput) (*view.ListUserResp, error) {
	panic(fmt.Errorf("not implemented: ListUser - listUser"))
}

// GetUserWhitelist is the resolver for the getUserWhitelist field.
func (r *queryResolver) GetUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput) (*view.UserWhitelist, error) {
	panic(fmt.Errorf("not implemented: GetUserWhitelist - getUserWhitelist"))
}

// ListUserWhitelist is the resolver for the listUserWhitelist field.
func (r *queryResolver) ListUserWhitelist(ctx context.Context, filter view.UserWhitelistFilterInput, pagination *view.PaginationInput) (*view.ListUserWhitelistResp, error) {
	panic(fmt.Errorf("not implemented: ListUserWhitelist - listUserWhitelist"))
}

// GetUserRole is the resolver for the getUserRole field.
func (r *queryResolver) GetUserRole(ctx context.Context, filter view.UserRoleFilterInput) (*view.UserRole, error) {
	panic(fmt.Errorf("not implemented: GetUserRole - getUserRole"))
}

// ListUserRole is the resolver for the listUserRole field.
func (r *queryResolver) ListUserRole(ctx context.Context, filter view.UserRoleFilterInput, pagination *view.PaginationInput) (*view.ListUserRoleResp, error) {
	panic(fmt.Errorf("not implemented: ListUserRole - listUserRole"))
}

// GetUserTag is the resolver for the getUserTag field.
func (r *queryResolver) GetUserTag(ctx context.Context, filter view.UserTagFilterInput) (*view.UserTag, error) {
	panic(fmt.Errorf("not implemented: GetUserTag - getUserTag"))
}

// ListUserTag is the resolver for the listUserTag field.
func (r *queryResolver) ListUserTag(ctx context.Context, filter view.UserTagFilterInput, pagination *view.PaginationInput) (*view.ListUserTagResp, error) {
	panic(fmt.Errorf("not implemented: ListUserTag - listUserTag"))
}

// ListUserLoginHistory is the resolver for the listUserLoginHistory field.
func (r *queryResolver) ListUserLoginHistory(ctx context.Context, filter view.UserLoginHistoryFilterInput, pagination *view.PaginationInput) (*view.ListUserLoginHistoryResp, error) {
	panic(fmt.Errorf("not implemented: ListUserLoginHistory - listUserLoginHistory"))
}

// UserWithdrawInfo is the resolver for the userWithdrawInfo field.
func (r *queryResolver) UserWithdrawInfo(ctx context.Context, filter view.UserFilterInput) (*view.UserWithdrawInfo, error) {
	panic(fmt.Errorf("not implemented: UserWithdrawInfo - userWithdrawInfo"))
}

// UserDepositInfo is the resolver for the userDepositInfo field.
func (r *queryResolver) UserDepositInfo(ctx context.Context, filter view.UserFilterInput) (*view.UserDepositInfo, error) {
	panic(fmt.Errorf("not implemented: UserDepositInfo - userDepositInfo"))
}

// UserScore is the resolver for the userScore field.
func (r *queryResolver) UserScore(ctx context.Context, filter view.UserFilterInput) (*view.UserScore, error) {
	panic(fmt.Errorf("not implemented: UserScore - userScore"))
}

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package view

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/shopspring/decimal"
)

type Data interface {
	IsData()
	GetID() uint64
}

type Agent struct {
	// 代理ID
	ID uint64 `json:"id"`
	// 代理名稱
	Name string `json:"name"`
	// 代理帳號
	Account string `json:"account"`
}

type AgentCreateInput struct {
	// 代理名稱
	Name string `json:"name"`
	// 代理帳號
	Account string `json:"account"`
	// 代理密碼
	Password string `json:"password"`
	// 代理備註
	Remark *string `json:"remark,omitempty"`
}

type AgentFilterInput struct {
	Agent      *AgentInput      `json:"agent,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type AgentInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 代理名稱
	Name *string `json:"name,omitempty"`
}

type AgentUpdateInput struct {
	// 代理名稱
	Name *string `json:"name,omitempty"`
	// 代理帳號
	Account *string `json:"account,omitempty"`
	// 代理密碼
	Password *string `json:"password,omitempty"`
	// 代理備註
	Remark *string `json:"remark,omitempty"`
}

// 審計日誌
type AuditLog struct {
	ID           uint64    `json:"id"`
	UserID       uint64    `json:"userID"`
	Method       string    `json:"method"`
	RequestInput string    `json:"requestInput"`
	CreatedAt    time.Time `json:"createdAt"`
}

type AuditLogFilterInput struct {
	AuditLog   *AuditLogInput   `json:"auditLog,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type AuditLogInput struct {
	ID           *uint64 `json:"id,omitempty"`
	UserID       *uint64 `json:"userID,omitempty"`
	Method       *string `json:"method,omitempty"`
	RequestInput *string `json:"requestInput,omitempty"`
}

type BaseFilterInput struct {
	IDs              []uint64   `json:"IDs,omitempty"`
	SearchIn         *string    `json:"searchIn,omitempty"`
	Keyword          *string    `json:"keyword,omitempty"`
	CreatedAtLt      *uint64    `json:"createdAtLT,omitempty"`
	CreatedAtLte     *uint64    `json:"createdAtLTE,omitempty"`
	CreatedAtGt      *uint64    `json:"createdAtGT,omitempty"`
	CreatedAtGte     *uint64    `json:"createdAtGTE,omitempty"`
	SortField        *string    `json:"sortField,omitempty"`
	SortType         *SortType  `json:"sortType,omitempty"`
	RangeField       *string    `json:"rangeField,omitempty"`
	RangeType        *RangeType `json:"rangeType,omitempty"`
	LessThan         *int64     `json:"lessThan,omitempty"`
	LessThanEqual    *int64     `json:"lessThanEqual,omitempty"`
	GreaterThan      *int64     `json:"greaterThan,omitempty"`
	GreaterThanEqual *int64     `json:"greaterThanEqual,omitempty"`
}

type ClaimVipRewardInput struct {
	// VIP等級
	VipLevel uint64 `json:"vipLevel"`
}

type Claims struct {
	// id
	ID uint64 `json:"id"`
	// 帳號類型
	AccountType AccountType `json:"accountType"`
	// 狀態
	Status UserStatus `json:"status"`
	// 用户名
	Username string `json:"username"`
	// 別名（聊天室顯示用）
	AliasName string `json:"aliasName"`
	// 頭像鏈結
	AvatarURL  string           `json:"avatarURL"`
	Whitelists []*UserWhitelist `json:"whitelists"`
	Menu       []*Menu          `json:"menu"`
}

type Common struct {
	CreatorID   *uint64    `json:"creatorID,omitempty"`
	CreatorName *string    `json:"creatorName,omitempty"`
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	UpdaterID   *uint64    `json:"updaterID,omitempty"`
	UpdaterName *string    `json:"updaterName,omitempty"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
}

type CreateCommonUserReqInput struct {
	Username    string      `json:"username"`
	Password    string      `json:"password"`
	AccountType AccountType `json:"accountType"`
}

type CreateCommonUserResp struct {
	User *User `json:"user"`
}

type CreateUploadURLInput struct {
	ExpireSec *int64           `json:"expireSec,omitempty"`
	Files     []*FileInfoInput `json:"files"`
}

type CreateUploadURLResp struct {
	Files []*FileInfo `json:"files"`
}

type CreateUserReqInput struct {
	Username    string      `json:"username"`
	Password    string      `json:"password"`
	AccountType AccountType `json:"accountType"`
	AliasName   string      `json:"aliasName"`
}

type CreateUserResp struct {
	User *User `json:"user"`
}

type DataList struct {
	Data []Data `json:"data"`
	Meta *Meta  `json:"meta"`
}

type EmailConfig struct {
	// SMTP Server
	SMTPServer string `json:"smtpServer"`
	// SMTP Port
	SMTPPort int64 `json:"smtpPort"`
	// SMTP User
	SMTPUser string `json:"smtpUser"`
	// SMTP From
	SMTPFrom string `json:"smtpFrom"`
	// SMTP From Name
	SMTPFromName string `json:"smtpFromName"`
	// SMTP SSL
	SMTPSsl YesNo `json:"smtpSSL"`
}

type EmailConfigInput struct {
	// SMTP Server
	SMTPServer string `json:"smtpServer"`
	// SMTP Port
	SMTPPort int64 `json:"smtpPort"`
	// SMTP User
	SMTPUser string `json:"smtpUser"`
	// SMTP Password
	SMTPPassword string `json:"smtpPassword"`
	// SMTP From
	SMTPFrom string `json:"smtpFrom"`
	// SMTP From Name
	SMTPFromName string `json:"smtpFromName"`
	// SMTP SSL
	SMTPSsl YesNo `json:"smtpSSL"`
}

type EmailRecord struct {
	// id
	ID uint64 `json:"id"`
	// Email收信地址
	Email string `json:"email"`
	// Email主旨
	Subject string `json:"subject"`
	// Email內容
	Content string `json:"content"`
	// Email發送時間
	SendTime time.Time `json:"sendTime"`
	// SMTP Server
	SMTPServer string `json:"smtpServer"`
	// SMTP Port
	SMTPPort int64 `json:"smtpPort"`
	// SMTP User
	SMTPUser string `json:"smtpUser"`
	// SMTP From
	SMTPFrom string `json:"smtpFrom"`
	// SMTP From Name
	SMTPFromName string `json:"smtpFromName"`
	// SMTP SSL
	SMTPSsl YesNo `json:"smtpSSL"`
	// 建立時間
	CreatedAt time.Time `json:"createdAt"`
	// 建立者
	CreateUserID uint64 `json:"createUserID"`
}

type EmailRecordFilterInput struct {
	EmailRecord *EmailRecordInput `json:"emailRecord,omitempty"`
	BaseFilter  *BaseFilterInput  `json:"baseFilter,omitempty"`
}

type EmailRecordInput struct {
	// Email發送紀錄ID
	ID *uint64 `json:"id,omitempty"`
	// Email收信地址
	Email *string `json:"email,omitempty"`
}

type Event struct {
	// 活動ID
	ID uint64 `json:"id"`
	// 活動名稱
	Name string `json:"name"`
	// 活動描述
	Description string `json:"description"`
	// 活動開始時間
	StartTime time.Time `json:"startTime"`
	// 活動結束時間
	EndTime time.Time `json:"endTime"`
	// 活動備註
	Remark *string `json:"remark,omitempty"`
}

type EventCreateInput struct {
	// 活動名稱
	Name string `json:"name"`
	// 活動描述
	Description string `json:"description"`
	// 活動開始時間
	StartTime time.Time `json:"startTime"`
	// 活動結束時間
	EndTime time.Time `json:"endTime"`
	// 活動備註
	Remark *string `json:"remark,omitempty"`
}

type EventFilterInput struct {
	Event      *EventInput      `json:"event,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type EventInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 活動名稱
	Name *string `json:"name,omitempty"`
	// 活動開始時間
	StartTime *time.Time `json:"startTime,omitempty"`
	// 活動結束時間
	EndTime *time.Time `json:"endTime,omitempty"`
}

type EventUpdateInput struct {
	// 活動名稱
	Name *string `json:"name,omitempty"`
	// 活動描述
	Description *string `json:"description,omitempty"`
	// 活動開始時間
	StartTime *time.Time `json:"startTime,omitempty"`
	// 活動結束時間
	EndTime *time.Time `json:"endTime,omitempty"`
	// 活動備註
	Remark *string `json:"remark,omitempty"`
}

type File struct {
	ID          uint64 `json:"id"`
	Name        string `json:"name"`
	Content     string `json:"content"`
	ContentType string `json:"contentType"`
}

func (File) IsData()            {}
func (this File) GetID() uint64 { return this.ID }

// 檔案資訊
type FileInfo struct {
	FileName  string `json:"fileName"`
	UploadURL string `json:"uploadURL"`
}

type FileInfoInput struct {
	FileName string `json:"fileName"`
	// 檔案大小
	Size int64 `json:"size"`
	// 檔案 MD5 The base64-encoded 128-bit MD5 digest
	Md5 string `json:"md5"`
}

type Game struct {
	// 遊戲ID
	ID uint64 `json:"id"`
	// 遊戲名稱
	Name string `json:"name"`
	// 遊戲描述
	Description string `json:"description"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type GameCreateInput struct {
	// 遊戲名稱
	Name string `json:"name"`
	// 遊戲描述
	Description string `json:"description"`
	// 遊戲備註
	Remark *string `json:"remark,omitempty"`
}

type GameFilterInput struct {
	Game       *GameInput       `json:"game,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type GameInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 遊戲名稱
	Name *string `json:"name,omitempty"`
}

type GamePlayer struct {
	ID             uint64          `json:"id"`
	Username       string          `json:"username"`
	Nickname       string          `json:"nickname"`
	Balance        decimal.Decimal `json:"balance"`
	LastLoginTime  time.Time       `json:"lastLoginTime"`
	LastLogoutTime time.Time       `json:"lastLogoutTime"`
	CreatedAt      time.Time       `json:"createdAt"`
	UpdatedAt      time.Time       `json:"updatedAt"`
}

type GamePlayerFilterInput struct {
	// 遊戲玩家
	GamePlayer *GamePlayerInput `json:"gamePlayer,omitempty"`
	// 基本過濾條件
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type GamePlayerInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 遊戲玩家名稱
	Name *string `json:"name,omitempty"`
	// 遊戲玩家帳號
	Account *string `json:"account,omitempty"`
	// 遊戲玩家備註
	Remark *string `json:"remark,omitempty"`
}

type GameTransferRecord struct {
	ID           uint64          `json:"id"`
	GamePlayerID uint64          `json:"gamePlayerId"`
	GameID       uint64          `json:"gameId"`
	GameName     string          `json:"gameName"`
	Amount       decimal.Decimal `json:"amount"`
	Remark       string          `json:"remark"`
	CreatedAt    time.Time       `json:"createdAt"`
	UpdatedAt    time.Time       `json:"updatedAt"`
}

type GameTransferRecordFilterInput struct {
	// 遊戲轉帳記錄
	GameTransferRecord *GameTransferRecordInput `json:"gameTransferRecord,omitempty"`
	// 基本過濾條件
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type GameTransferRecordInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 遊戲玩家ID
	GamePlayerID *uint64 `json:"gamePlayerId,omitempty"`
	// 遊戲ID
	GameID *uint64 `json:"gameId,omitempty"`
	// 遊戲名稱
	GameName *string `json:"gameName,omitempty"`
	// 遊戲轉帳金額
	Amount *decimal.Decimal `json:"amount,omitempty"`
	// 遊戲轉帳備註
	Remark *string `json:"remark,omitempty"`
}

type GameUpdateInput struct {
	// 遊戲名稱
	Name *string `json:"name,omitempty"`
	// 遊戲描述
	Description *string `json:"description,omitempty"`
	// 遊戲備註
	Remark *string `json:"remark,omitempty"`
}

type GeneralAgent struct {
	// 全民代理ID
	ID uint64 `json:"id"`
	// 全民代理名稱
	Name string `json:"name"`
	// 全民代理帳號
	Account string `json:"account"`
}

type GeneralAgentCreateInput struct {
	// 全民代理名稱
	Name string `json:"name"`
	// 全民代理帳號
	Account string `json:"account"`
	// 全民代理密碼
	Password string `json:"password"`
	// 全民代理備註
	Remark *string `json:"remark,omitempty"`
}

type GeneralAgentFilterInput struct {
	GeneralAgent *GeneralAgentInput `json:"generalAgent,omitempty"`
	BaseFilter   *BaseFilterInput   `json:"baseFilter,omitempty"`
}

type GeneralAgentInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 全民代理名稱
	Name *string `json:"name,omitempty"`
}

type GeneralAgentUpdateInput struct {
	// 全民代理名稱
	Name *string `json:"name,omitempty"`
	// 全民代理帳號
	Account *string `json:"account,omitempty"`
	// 全民代理密碼
	Password *string `json:"password,omitempty"`
	// 全民代理備註
	Remark *string `json:"remark,omitempty"`
}

// 黑名單系統
type HostsDeny struct {
	// id
	ID uint64 `json:"id"`
	// ip
	IPAddress string `json:"ipAddress"`
	// 是否啟用
	IsEnabled YesNo `json:"isEnabled"`
	// 備註
	Remark string `json:"remark"`
	// 建立時間
	CreatedAt time.Time `json:"createdAt"`
	// 建立者
	CreateUserID uint64 `json:"createUserID"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
	// 更新者
	UpdateUserID uint64 `json:"updateUserID"`
}

type HostsDenyCreateInput struct {
	// IP
	IPAddress string `json:"ipAddress"`
	// 是否啟用
	IsEnabled YesNo `json:"isEnabled"`
	// 備註
	Remark *string `json:"remark,omitempty"`
}

type HostsDenyFilterInput struct {
	HostsDeny  *HostsDenyInput  `json:"hostsDeny,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type HostsDenyInput struct {
	// id
	ID *uint64 `json:"id,omitempty"`
	// IP
	IPAddress *string `json:"ipAddress,omitempty"`
	// 是否啟用
	IsEnabled *YesNo `json:"isEnabled,omitempty"`
}

type HostsDenyUpdateInput struct {
	// IP
	IPAddress *string `json:"ipAddress,omitempty"`
	// 是否啟用
	IsEnabled *YesNo `json:"isEnabled,omitempty"`
	// 備註
	Remark *string `json:"remark,omitempty"`
}

type HubClient struct {
	UserID  uint64       `json:"userID"`
	Devices []*HubDevice `json:"devices"`
}

type HubDevice struct {
	Token     string `json:"token"`
	DeviceUID string `json:"deviceUID"`
	RoomID    uint64 `json:"roomID"`
}

type LineRate struct {
	// 線路費率ID
	ID uint64 `json:"id"`
	// 線路費率名稱
	Name string `json:"name"`
	// 線路費率描述
	Description string `json:"description"`
	// 線路費率
	Rate decimal.Decimal `json:"rate"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type LineRateCreateInput struct {
	// 線路費率名稱
	Name string `json:"name"`
	// 線路費率描述
	Description string `json:"description"`
	// 線路費率備註
	Remark *string `json:"remark,omitempty"`
}

type LineRateFilterInput struct {
	LineRate   *LineRateInput   `json:"lineRate,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type LineRateHistory struct {
	// 線路費率歷史ID
	ID uint64 `json:"id"`
	// 線路費率歷史名稱
	Name string `json:"name"`
	// 線路費率歷史描述
	Description string `json:"description"`
	// 線路費率
	Rate decimal.Decimal `json:"rate"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type LineRateHistoryFilterInput struct {
	LineRateHistory *LineRateHistoryInput `json:"lineRateHistory,omitempty"`
	BaseFilter      *BaseFilterInput      `json:"baseFilter,omitempty"`
}

type LineRateHistoryInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 線路費率ID
	LineRateID *uint64 `json:"lineRateId,omitempty"`
	// 線路費率名稱
	Name *string `json:"name,omitempty"`
}

type LineRateInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 線路費率名稱
	Name *string `json:"name,omitempty"`
}

type LineRateUpdateInput struct {
	// 線路費率名稱
	Name *string `json:"name,omitempty"`
	// 線路費率描述
	Description *string `json:"description,omitempty"`
	// 線路費率備註
	Remark *string `json:"remark,omitempty"`
}

type LineRent struct {
	// 線路租借ID
	ID uint64 `json:"id"`
	// 線路租借名稱
	Name string `json:"name"`
	// 線路租借描述
	Description string `json:"description"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type LineRentCreateInput struct {
	// 線路租借名稱
	Name string `json:"name"`
	// 線路租借描述
	Description string `json:"description"`
	// 線路租借備註
	Remark *string `json:"remark,omitempty"`
}

type LineRentFilterInput struct {
	LineRent   *LineRentInput   `json:"lineRent,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type LineRentInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 線路租借名稱
	Name *string `json:"name,omitempty"`
}

type LineRentUpdateInput struct {
	// 線路租借名稱
	Name *string `json:"name,omitempty"`
	// 線路租借描述
	Description *string `json:"description,omitempty"`
	// 線路租借備註
	Remark *string `json:"remark,omitempty"`
}

type ListAgentResp struct {
	Agents []*Agent `json:"agents"`
	Meta   *Meta    `json:"meta"`
}

// 審計日誌查詢
type ListAuditLogResp struct {
	AuditLogs []*AuditLog `json:"auditLogs"`
	Meta      *Meta       `json:"meta"`
}

type ListEmailRecordResp struct {
	EmailRecords []*EmailRecord `json:"emailRecords"`
	Meta         *Meta          `json:"meta"`
}

type ListEventResp struct {
	Events []*Event `json:"events"`
	Meta   *Meta    `json:"meta"`
}

type ListGamePlayerResp struct {
	Players []*GamePlayer `json:"players"`
	Meta    *Meta         `json:"meta"`
}

type ListGameResp struct {
	// 遊戲列表
	List []*Game `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

type ListGameTransferRecordResp struct {
	Records []*GameTransferRecord `json:"records"`
	Meta    *Meta                 `json:"meta"`
}

type ListGeneralAgentResp struct {
	GeneralAgents []*GeneralAgent `json:"generalAgents"`
	Meta          *Meta           `json:"meta"`
}

// 黑名單列表
type ListHostsDenyResp struct {
	HostsDenys []*HostsDeny `json:"hostsDenys"`
	Meta       *Meta        `json:"meta"`
}

type ListLineRateHistoryResp struct {
	// 線路費率歷史列表
	List []*LineRateHistory `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

type ListLineRateResp struct {
	// 線路費率列表
	List []*LineRate `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

type ListLineRentResp struct {
	// 線路租借列表
	List []*LineRent `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

type ListMerchantBalanceLogResp struct {
	List  []*MerchantBalanceLog `json:"list"`
	Total uint64                `json:"total"`
}

type ListMerchantDepositLogResp struct {
	List  []*MerchantDepositLog `json:"list"`
	Total uint64                `json:"total"`
}

type ListMerchantDepositMethodResp struct {
	List  []*MerchantDepositMethod `json:"list"`
	Total uint64                   `json:"total"`
}

type ListMerchantFeeModeResp struct {
	List  []*MerchantFeeMode `json:"list"`
	Total uint64             `json:"total"`
}

type ListMerchantLineResp struct {
	// 商戶線路列表
	List []*MerchantLine `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

type ListMerchantLoginHistoryResp struct {
	List  []*MerchantLoginHistory `json:"list"`
	Total uint64                  `json:"total"`
}

type ListMerchantResp struct {
	// 商家列表
	List []*Merchant `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

type ListMerchantWithdrawLogResp struct {
	List  []*MerchantWithdrawLog `json:"list"`
	Total uint64                 `json:"total"`
}

type ListMerchantWithdrawMethodResp struct {
	List  []*MerchantWithdrawMethod `json:"list"`
	Total uint64                    `json:"total"`
}

type ListMetadata struct {
	Count *uint64 `json:"count,omitempty"`
}

type ListRoleResp struct {
	Roles []*Role `json:"roles"`
	Meta  *Meta   `json:"meta"`
}

// 安全設定列表
type ListSecurityEventResp struct {
	SecurityEvents []*SecurityEvent `json:"securityEvents"`
	Meta           *Meta            `json:"meta"`
}

type ListSmsRecordResp struct {
	SmsRecords []*SmsRecord `json:"smsRecords"`
	Meta       *Meta        `json:"meta"`
}

type ListSystemLineResp struct {
	// 系統線路列表
	List []*SystemLine `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

// 標籤列表
type ListTagResp struct {
	Tags []*Tag `json:"tags"`
	Meta *Meta  `json:"meta"`
}

// 模板列表
type ListTemplateResp struct {
	Templates []*Template `json:"templates"`
	Meta      *Meta       `json:"meta"`
}

type ListUserLoginHistoryResp struct {
	UserLoginHistories []*UserLoginHistory `json:"userLoginHistories"`
	Meta               *Meta               `json:"meta,omitempty"`
}

type ListUserResp struct {
	Users []*User `json:"users"`
	Meta  *Meta   `json:"meta"`
}

type ListUserRoleResp struct {
	UserRoles []*UserRole `json:"userRoles"`
	Meta      *Meta       `json:"meta"`
}

type ListUserTagResp struct {
	UserTags []*UserTag `json:"userTags"`
	Meta     *Meta      `json:"meta"`
}

type ListUserWhitelistResp struct {
	UserWhitelists []*UserWhitelist `json:"userWhitelists"`
	Meta           *Meta            `json:"meta"`
}

type ListVipClaimLogResp struct {
	// 領取日誌列表
	List []*VipClaimLog `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

type ListVipLevelResp struct {
	// VIP等級列表
	List []*VipLevel `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

type ListVipUpgradeLogResp struct {
	// 升級日誌列表
	List []*VipUpgradeLog `json:"list"`
	// 總數
	Total uint64 `json:"total"`
}

type LoginReqInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type LoginResp struct {
	Token     string `json:"token"`
	DeviceUID string `json:"deviceUID"`
	UserAgent string `json:"userAgent"`
}

type Menu struct {
	Name     string  `json:"name"`
	Key      string  `json:"key"`
	SuperKey string  `json:"superKey"`
	Next     []*Menu `json:"next"`
}

type MenuInput struct {
	Key  string       `json:"key"`
	Next []*MenuInput `json:"next"`
}

type Merchant struct {
	// 商家ID
	ID uint64 `json:"id"`
	// 商家名稱
	Name string `json:"name"`
	// 商家描述
	Description string `json:"description"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// "更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type MerchantBalanceApplyInput struct {
	// 商戶餘額異動金額
	Amount decimal.Decimal `json:"amount"`
	// 商戶餘額異動描述
	Description *string `json:"description,omitempty"`
}

type MerchantBalanceAuditInput struct {
	// 商戶餘額異動審核意見
	Opinion *string `json:"opinion,omitempty"`
}

type MerchantBalanceFilterInput struct {
	MerchantBalance *MerchantBalanceInput `json:"merchantBalance,omitempty"`
	BaseFilter      *BaseFilterInput      `json:"baseFilter,omitempty"`
}

type MerchantBalanceInput struct {
	ID *uint64 `json:"id,omitempty"`
}

type MerchantBalanceLog struct {
	ID          uint64          `json:"id"`
	MerchantID  uint64          `json:"merchantId"`
	Amount      decimal.Decimal `json:"amount"`
	Description string          `json:"description"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

type MerchantBalanceLogFilterInput struct {
	MerchantBalanceLog *MerchantBalanceLogInput `json:"merchantBalanceLog,omitempty"`
	BaseFilter         *BaseFilterInput         `json:"baseFilter,omitempty"`
}

type MerchantBalanceLogInput struct {
	ID *uint64 `json:"id,omitempty"`
}

type MerchantCreateInput struct {
	// 商戶名稱
	Name string `json:"name"`
	// 商戶備註
	Remark *string `json:"remark,omitempty"`
}

type MerchantDepositLog struct {
	ID          uint64          `json:"id"`
	MerchantID  uint64          `json:"merchantId"`
	Amount      decimal.Decimal `json:"amount"`
	Description string          `json:"description"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

type MerchantDepositLogFilterInput struct {
	MerchantDepositLog *MerchantDepositLogInput `json:"merchantDepositLog,omitempty"`
	BaseFilter         *BaseFilterInput         `json:"baseFilter,omitempty"`
}

type MerchantDepositLogInput struct {
	ID *uint64 `json:"id,omitempty"`
}

type MerchantDepositMethod struct {
	ID          uint64    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type MerchantDepositMethodCreateInput struct {
	// 商戶存款方式名稱
	Name string `json:"name"`
	// 商戶存款方式描述
	Description *string `json:"description,omitempty"`
}

type MerchantDepositMethodFilterInput struct {
	MerchantDepositMethod *MerchantDepositMethodInput `json:"merchantDepositMethod,omitempty"`
	BaseFilter            *BaseFilterInput            `json:"baseFilter,omitempty"`
}

type MerchantDepositMethodInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 商戶存款方式名稱
	Name *string `json:"name,omitempty"`
	// 商戶存款方式描述
	Description *string `json:"description,omitempty"`
}

type MerchantDepositMethodUpdateInput struct {
	// 商戶存款方式名稱
	Name *string `json:"name,omitempty"`
	// 商戶存款方式描述
	Description *string `json:"description,omitempty"`
}

type MerchantFeeMode struct {
	ID          uint64    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type MerchantFeeModeCreateInput struct {
	// 商戶費率模式名稱
	Name string `json:"name"`
	// 商戶費率模式描述
	Description *string `json:"description,omitempty"`
}

type MerchantFeeModeFilterInput struct {
	MerchantFeeMode *MerchantFeeModeInput `json:"merchantFeeMode,omitempty"`
	BaseFilter      *BaseFilterInput      `json:"baseFilter,omitempty"`
}

type MerchantFeeModeInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 商戶費率模式名稱
	Name *string `json:"name,omitempty"`
	// 商戶費率模式描述
	Description *string `json:"description,omitempty"`
}

type MerchantFeeModeUpdateInput struct {
	// 商戶費率模式名稱
	Name *string `json:"name,omitempty"`
	// 商戶費率模式描述
	Description *string `json:"description,omitempty"`
}

type MerchantFilterInput struct {
	Merchant   *MerchantInput   `json:"merchant,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type MerchantInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 商戶名稱
	Name *string `json:"name,omitempty"`
	// 商戶備註
	Remark *string `json:"remark,omitempty"`
}

type MerchantLine struct {
	// 商戶線路ID
	ID uint64 `json:"id"`
	// 商戶線路名稱
	Name string `json:"name"`
	// 商戶線路描述
	Description string `json:"description"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type MerchantLineCreateInput struct {
	// 商戶線路名稱
	Name string `json:"name"`
	// 商戶線路描述
	Description string `json:"description"`
	// 商戶線路備註
	Remark *string `json:"remark,omitempty"`
}

type MerchantLineFilterInput struct {
	MerchantLine *MerchantLineInput `json:"merchantLine,omitempty"`
	BaseFilter   *BaseFilterInput   `json:"baseFilter,omitempty"`
}

type MerchantLineInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 商戶線路名稱
	Name *string `json:"name,omitempty"`
}

type MerchantLineUpdateInput struct {
	// 商戶線路名稱
	Name *string `json:"name,omitempty"`
	// 商戶線路描述
	Description *string `json:"description,omitempty"`
	// 商戶線路備註
	Remark *string `json:"remark,omitempty"`
}

type MerchantLoginHistory struct {
	ID         uint64    `json:"id"`
	MerchantID uint64    `json:"merchantId"`
	IP         string    `json:"ip"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
}

type MerchantLoginHistoryFilterInput struct {
	MerchantLoginHistory *MerchantLoginHistoryInput `json:"merchantLoginHistory,omitempty"`
	BaseFilter           *BaseFilterInput           `json:"baseFilter,omitempty"`
}

type MerchantLoginHistoryInput struct {
	ID *uint64 `json:"id,omitempty"`
}

type MerchantUpdateInput struct {
	// 商戶名稱
	Name *string `json:"name,omitempty"`
	// 商戶備註
	Remark *string `json:"remark,omitempty"`
}

type MerchantWithdrawLog struct {
	ID          uint64          `json:"id"`
	MerchantID  uint64          `json:"merchantId"`
	Amount      decimal.Decimal `json:"amount"`
	Description string          `json:"description"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

type MerchantWithdrawLogFilterInput struct {
	MerchantWithdrawLog *MerchantWithdrawLogInput `json:"merchantWithdrawLog,omitempty"`
	BaseFilter          *BaseFilterInput          `json:"baseFilter,omitempty"`
}

type MerchantWithdrawLogInput struct {
	ID *uint64 `json:"id,omitempty"`
}

type MerchantWithdrawMethod struct {
	ID          uint64    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type MerchantWithdrawMethodCreateInput struct {
	// 商戶出款方式名稱
	Name string `json:"name"`
	// 商戶出款方式描述
	Description *string `json:"description,omitempty"`
}

type MerchantWithdrawMethodFilterInput struct {
	MerchantWithdrawMethod *MerchantWithdrawMethodInput `json:"merchantWithdrawMethod,omitempty"`
	BaseFilter             *BaseFilterInput             `json:"baseFilter,omitempty"`
}

type MerchantWithdrawMethodInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 商戶出款方式名稱
	Name *string `json:"name,omitempty"`
	// 商戶出款方式描述
	Description *string `json:"description,omitempty"`
}

type MerchantWithdrawMethodUpdateInput struct {
	// 商戶出款方式名稱
	Name *string `json:"name,omitempty"`
	// 商戶出款方式描述
	Description *string `json:"description,omitempty"`
}

type Meta struct {
	Total     uint64  `json:"total"`
	Page      *uint64 `json:"page,omitempty"`
	PerPage   *uint64 `json:"perPage,omitempty"`
	TotalPage *uint64 `json:"totalPage,omitempty"`
}

type Mutation struct {
}

type PaginationInput struct {
	Page       *uint64     `json:"page,omitempty"`
	PerPage    *uint64     `json:"perPage,omitempty"`
	OffsetType *OffsetType `json:"offsetType,omitempty"`
	OffsetID   *uint64     `json:"offsetID,omitempty"`
	Limit      *uint64     `json:"limit,omitempty"`
}

type Query struct {
}

type RefreshTokenResp struct {
	Token   string    `json:"token"`
	Expires time.Time `json:"expires"`
}

type RegisterReqInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Role struct {
	ID                 uint64      `json:"id"`
	Name               string      `json:"name"`
	Authority          []*Menu     `json:"authority"`
	SupportAccountType AccountType `json:"supportAccountType"`
	CreatedAt          time.Time   `json:"createdAt"`
	CreateUserID       uint64      `json:"createUserID"`
	UpdatedAt          time.Time   `json:"updatedAt"`
	UpdateUserID       uint64      `json:"updateUserID"`
}

type RoleCreateInput struct {
	Name               string       `json:"name"`
	SupportAccountType AccountType  `json:"supportAccountType"`
	Authority          []*MenuInput `json:"authority"`
}

type RoleFilterInput struct {
	Role       *RoleInput       `json:"role,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type RoleInput struct {
	ID                 *uint64      `json:"id,omitempty"`
	Name               *string      `json:"name,omitempty"`
	SupportAccountType *AccountType `json:"supportAccountType,omitempty"`
}

type RoleUpdateInput struct {
	Name               *string      `json:"name,omitempty"`
	SupportAccountType *AccountType `json:"supportAccountType,omitempty"`
	Authority          []*MenuInput `json:"authority,omitempty"`
}

// 安全設定
type SecurityEvent struct {
	// id
	ID uint64 `json:"id"`
	// 事件名稱
	Name string `json:"name"`
	// 事件描述
	Description string `json:"description"`
	// 是否啟用
	IsEnable YesNo `json:"isEnable"`
	// 建立時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
	// 建立者
	CreateUserID uint64 `json:"createUserID"`
	// 更新者
	UpdateUserID uint64 `json:"updateUserID"`
}

type SecurityEventCreateInput struct {
	// 事件名稱
	Name string `json:"name"`
	// 事件描述
	Description *string `json:"description,omitempty"`
}

type SecurityEventFilterInput struct {
	SecurityEvent *SecurityEventInput `json:"securityEvent,omitempty"`
	BaseFilter    *BaseFilterInput    `json:"baseFilter,omitempty"`
}

type SecurityEventInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 事件名稱
	Name *string `json:"name,omitempty"`
}

type SecurityEventUpdateInput struct {
	// 事件名稱
	Name *string `json:"name,omitempty"`
	// 事件描述
	Description *string `json:"description,omitempty"`
}

type SmsConfig struct {
	// 短信發送帳號
	Account string `json:"account"`
	// 短信發送網址
	URL string `json:"url"`
}

type SmsConfigInput struct {
	// 短信發送帳號
	Account string `json:"account"`
	// 短信發送密碼
	Password string `json:"password"`
	// 短信發送網址
	URL string `json:"url"`
}

type SmsRecord struct {
	// id
	ID uint64 `json:"id"`
	// 短信收信電話
	PhoneNumber string `json:"phoneNumber"`
	// 短信內容
	Content string `json:"content"`
	// 短信發送時間
	SendTime time.Time `json:"sendTime"`
	// 短信發送帳號
	Account string `json:"account"`
	// 短信發送網址
	URL string `json:"url"`
	// 建立時間
	CreatedAt time.Time `json:"createdAt"`
	// 建立者
	CreateUserID uint64 `json:"createUserID"`
}

type SmsRecordFilterInput struct {
	SmsRecord  *SmsRecordInput  `json:"smsRecord,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type SmsRecordInput struct {
	// 短信發送紀錄ID
	ID *uint64 `json:"id,omitempty"`
	// 短信收信電話
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

type Subscription struct {
}

type SystemLine struct {
	// 系統線路ID
	ID uint64 `json:"id"`
	// 系統線路名稱
	Name string `json:"name"`
	// 系統線路描述
	Description string `json:"description"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type SystemLineCreateInput struct {
	// 系統線路名稱
	Name string `json:"name"`
	// 系統線路描述
	Description string `json:"description"`
	// 系統線路備註
	Remark *string `json:"remark,omitempty"`
}

type SystemLineFilterInput struct {
	SystemLine *SystemLineInput `json:"systemLine,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type SystemLineInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 系統線路名稱
	Name *string `json:"name,omitempty"`
}

type SystemLineUpdateInput struct {
	// 系統線路名稱
	Name *string `json:"name,omitempty"`
	// 系統線路描述
	Description *string `json:"description,omitempty"`
	// 系統線路備註
	Remark *string `json:"remark,omitempty"`
}

// 標籤
type Tag struct {
	// id
	ID   uint64 `json:"id"`
	Name string `json:"name"`
	// 色碼 # 000000
	RGBHex string `json:"RGBHex"`
	// 是否啟用
	IsEnable     YesNo     `json:"isEnable"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
	CreateUserID uint64    `json:"createUserID"`
	UpdateUserID uint64    `json:"updateUserID"`
}

type TagCreateInput struct {
	Name string `json:"name"`
	// 色碼 # 000000
	RGBHex string `json:"RGBHex"`
}

type TagFilterInput struct {
	Tag        *TagInput        `json:"tag,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type TagInput struct {
	ID       *uint64 `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	IsEnable *YesNo  `json:"isEnable,omitempty"`
}

type TagUpdateInput struct {
	Name     *string `json:"name,omitempty"`
	RGBHex   *string `json:"RGBHex,omitempty"`
	IsEnable *YesNo  `json:"isEnable,omitempty"`
}

// 模板
type Template struct {
	ID uint64 `json:"id"`
	// 模板名稱
	Name string `json:"name"`
	// 模板內容
	Content string `json:"content"`
	// 建立時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type TemplateCreateInput struct {
	// 模板名稱
	Name string `json:"name"`
	// 模板內容
	Content string `json:"content"`
	// 模板描述
	Description *string `json:"description,omitempty"`
}

type TemplateFilterInput struct {
	Template   *TemplateInput   `json:"template,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type TemplateInput struct {
	ID   *uint64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type TemplateUpdateInput struct {
	// 模板名稱
	Name *string `json:"name,omitempty"`
	// 模板內容
	Content *string `json:"content,omitempty"`
	// 模板描述
	Description *string `json:"description,omitempty"`
}

type User struct {
	// id
	ID uint64 `json:"id"`
	// 帳號類型
	AccountType AccountType `json:"accountType"`
	// 狀態
	Status UserStatus `json:"status"`
	// 用户名
	Username string `json:"username"`
	// 別名（聊天室顯示用)
	AliasName string `json:"aliasName"`
	// 電子郵件
	Email string `json:"email"`
	// 居住地區
	Area string `json:"area"`
	// 備註
	Notes string `json:"notes"`
	// 頭像鏈結
	AvatarURL string `json:"avatarURL"`
	// 最後登陸時間
	LastLoginAt time.Time `json:"lastLoginAt"`
	// 最後登陸的IP
	LastLoginIP string `json:"lastLoginIP"`
	// 是否已刪除
	IsDelete YesNo `json:"isDelete"`
	// 建立时间
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
	// 更新人
	UpdateUserID uint64           `json:"updateUserID"`
	Roles        []*UserRole      `json:"roles"`
	Whitelists   []*UserWhitelist `json:"whitelists"`
	Tags         []*UserTag       `json:"tags"`
}

type UserAuth struct {
	Token     string `json:"token"`
	DeviceUID string `json:"deviceUID"`
}

type UserDepositInfo struct {
	ID              uint64    `json:"id"`
	UserID          uint64    `json:"userID"`
	BankName        string    `json:"bankName"`
	BankBranch      string    `json:"bankBranch"`
	BankAccount     string    `json:"bankAccount"`
	BankAccountName string    `json:"bankAccountName"`
	CreatedAt       time.Time `json:"createdAt"`
	UpdatedAt       time.Time `json:"updatedAt"`
	CreateUserID    uint64    `json:"createUserID"`
	UpdateUserID    uint64    `json:"updateUserID"`
}

type UserFilterInput struct {
	User       *UserInput       `json:"user,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
	TagIDs     []uint64         `json:"tagIDs,omitempty"`
	RoleIDs    []uint64         `json:"roleIDs,omitempty"`
}

type UserInput struct {
	// id
	ID *uint64 `json:"id,omitempty"`
	// 帳號類型
	AccountType *AccountType `json:"accountType,omitempty"`
	// 狀態
	Status *UserStatus `json:"status,omitempty"`
	// 用户名
	Username *string `json:"username,omitempty"`
	// 別名（聊天室顯示用）
	AliasName *string `json:"aliasName,omitempty"`
	// 電子郵件
	Email *string `json:"email,omitempty"`
	// 居住地區
	Area *string `json:"area,omitempty"`
	// 備註
	Notes *string `json:"notes,omitempty"`
	// 頭像鏈結
	AvatarURL *string `json:"avatarURL,omitempty"`
}

type UserLoginHistory struct {
	ID                 uint64    `json:"id"`
	UserID             uint64    `json:"userID"`
	IPAddress          string    `json:"ipAddress"`
	Country            string    `json:"country"`
	AdministrativeArea string    `json:"administrativeArea"`
	DeviceOs           DeviceOs  `json:"deviceOS"`
	CreatedAt          time.Time `json:"createdAt"`
}

type UserLoginHistoryFilterInput struct {
	BaseFilter       *BaseFilterInput       `json:"baseFilter,omitempty"`
	UserLoginHistory *UserLoginHistoryInput `json:"userLoginHistory,omitempty"`
}

type UserLoginHistoryInput struct {
	UserID *uint64 `json:"userID,omitempty"`
}

type UserRole struct {
	// id
	ID uint64 `json:"id"`
	// user id
	UserID uint64 `json:"userID"`
	// 角色 id
	RoleID uint64 `json:"roleID"`
	// 是否為管理員
	IsAdmin YesNo `json:"isAdmin"`
	// 創建 user id
	CreateUserID uint64 `json:"createUserID"`
	// 更新 user id
	UpdateUserID uint64 `json:"updateUserID"`
	// 建立时间
	CreatedAt time.Time `json:"createdAt"`
	// 建立时间
	UpdatedAt time.Time `json:"updatedAt"`
	// 角色
	Role *Role `json:"role"`
}

type UserRoleCreateInput struct {
	// user id
	UserID uint64 `json:"userID"`
	// 角色 id
	RoleID uint64 `json:"roleID"`
	// 是否為管理員
	IsAdmin YesNo `json:"isAdmin"`
}

type UserRoleFilterInput struct {
	UserRole   *UserRoleInput   `json:"userRole,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type UserRoleInput struct {
	// id
	ID *uint64 `json:"id,omitempty"`
	// user id
	UserID *uint64 `json:"userID,omitempty"`
	// ip 地址
	RoleID *uint64 `json:"roleID,omitempty"`
	// 是否為管理員
	IsAdmin *YesNo `json:"isAdmin,omitempty"`
}

type UserRoleUpdateInput struct {
	RoleID *uint64 `json:"roleID,omitempty"`
}

type UserScore struct {
	ID           uint64          `json:"id"`
	UserID       uint64          `json:"userID"`
	Score        decimal.Decimal `json:"score"`
	CreatedAt    time.Time       `json:"createdAt"`
	UpdatedAt    time.Time       `json:"updatedAt"`
	CreateUserID uint64          `json:"createUserID"`
	UpdateUserID uint64          `json:"updateUserID"`
}

type UserTag struct {
	// id
	ID           uint64    `json:"id"`
	UserID       uint64    `json:"userID"`
	TagID        uint64    `json:"tagID"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
	CreateUserID uint64    `json:"createUserID"`
	UpdateUserID uint64    `json:"updateUserID"`
	Tag          *Tag      `json:"tag"`
}

type UserTagCreateInput struct {
	UserID uint64 `json:"userID"`
	TagID  uint64 `json:"tagID"`
}

type UserTagFilterInput struct {
	UserTag    *UserTagInput    `json:"userTag,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type UserTagInput struct {
	ID     *uint64 `json:"id,omitempty"`
	UserID *uint64 `json:"userID,omitempty"`
	TagID  *uint64 `json:"tagID,omitempty"`
}

type UserTagUpdateInput struct {
	TagID *uint64 `json:"tagID,omitempty"`
}

type UserUpdateInput struct {
	// 狀態
	Status *UserStatus `json:"status,omitempty"`
	// 別名（聊天室顯示用）
	AliasName *string `json:"aliasName,omitempty"`
	// 居住地區
	Area *string `json:"area,omitempty"`
	// 備註
	Notes *string `json:"notes,omitempty"`
	// 頭像鏈結
	AvatarContent *graphql.Upload `json:"avatarContent,omitempty"`
	// 帳戶類型 使用者 / 員工 / 客服
	AccountType *AccountType `json:"accountType,omitempty"`
}

type UserUpdatePasswordInput struct {
	UserID   uint64 `json:"userID"`
	Password string `json:"password"`
}

type UserWhitelist struct {
	// id
	ID uint64 `json:"id"`
	// user id
	UserID uint64 `json:"userID"`
	// ip 地址
	IPAddress string `json:"ipAddress"`
	// 建立时间
	CreatedAt time.Time `json:"createdAt"`
}

type UserWhitelistCreateInput struct {
	UserID    uint64 `json:"userID"`
	IPAddress string `json:"ipAddress"`
}

type UserWhitelistFilterInput struct {
	UserWhitelist *UserWhitelistInput `json:"userWhitelist,omitempty"`
	BaseFilter    *BaseFilterInput    `json:"baseFilter,omitempty"`
}

type UserWhitelistInput struct {
	// id
	ID *uint64 `json:"id,omitempty"`
	// user id
	UserID *uint64 `json:"userID,omitempty"`
	// ip 地址
	IPAddress *string `json:"ipAddress,omitempty"`
}

type UserWhitelistUpdateInput struct {
	IPAddress *string `json:"ipAddress,omitempty"`
}

type UserWithdrawInfo struct {
	ID              uint64    `json:"id"`
	UserID          uint64    `json:"userID"`
	BankName        string    `json:"bankName"`
	BankBranch      string    `json:"bankBranch"`
	BankAccount     string    `json:"bankAccount"`
	BankAccountName string    `json:"bankAccountName"`
	CreatedAt       time.Time `json:"createdAt"`
	UpdatedAt       time.Time `json:"updatedAt"`
	CreateUserID    uint64    `json:"createUserID"`
	UpdateUserID    uint64    `json:"updateUserID"`
}

type VipClaimLog struct {
	// 領取日誌ID
	ID uint64 `json:"id"`
	// 用戶ID
	UserID uint64 `json:"userID"`
	// VIP等級ID
	VipLevelID uint64 `json:"vipLevelID"`
	// 領取時間
	ClaimAt time.Time `json:"claimAt"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type VipClaimLogFilterInput struct {
	// 領取日誌
	VipClaimLog *VipClaimLogInput `json:"vipClaimLog,omitempty"`
	BaseFilter  *BaseFilterInput  `json:"baseFilter,omitempty"`
}

type VipClaimLogInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 用戶ID
	UserID *uint64 `json:"userID,omitempty"`
	// VIP等級
	VipLevel *uint64 `json:"vipLevel,omitempty"`
	// 領取時間
	ClaimTime *time.Time `json:"claimTime,omitempty"`
}

type VipLevel struct {
	// VIP等級ID
	ID uint64 `json:"id"`
	// VIP等級名稱
	Name string `json:"name"`
	// VIP等級描述
	Description string `json:"description"`
	// VIP等級圖標
	Icon *string `json:"icon,omitempty"`
	// VIP等級排序
	Sort *uint64 `json:"sort,omitempty"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type VipLevelCreateInput struct {
	// VIP等級
	Level uint64 `json:"level"`
	// VIP等級名稱
	Name string `json:"name"`
	// VIP等級描述
	Description *string `json:"description,omitempty"`
	// VIP等級圖標
	Icon *string `json:"icon,omitempty"`
	// VIP等級排序
	Sort *uint64 `json:"sort,omitempty"`
}

type VipLevelFilterInput struct {
	// VIP等級
	VipLevel   *VipLevelInput   `json:"vipLevel,omitempty"`
	BaseFilter *BaseFilterInput `json:"baseFilter,omitempty"`
}

type VipLevelInput struct {
	ID *uint64 `json:"id,omitempty"`
	// VIP等級
	Level *uint64 `json:"level,omitempty"`
	// VIP等級名稱
	Name *string `json:"name,omitempty"`
}

type VipLevelUpdateInput struct {
	// VIP等級
	Level *uint64 `json:"level,omitempty"`
	// VIP等級名稱
	Name *string `json:"name,omitempty"`
	// VIP等級描述
	Description *string `json:"description,omitempty"`
	// VIP等級圖標
	Icon *string `json:"icon,omitempty"`
	// VIP等級排序
	Sort *uint64 `json:"sort,omitempty"`
}

type VipUpgradeLog struct {
	// 升級日誌ID
	ID uint64 `json:"id"`
	// 用戶ID
	UserID uint64 `json:"userID"`
	// VIP等級ID
	VipLevelID uint64 `json:"vipLevelID"`
	// 升級時間
	UpgradeAt time.Time `json:"upgradeAt"`
	// 創建時間
	CreatedAt time.Time `json:"createdAt"`
	// 更新時間
	UpdatedAt time.Time `json:"updatedAt"`
}

type VipUpgradeLogFilterInput struct {
	// 升級日誌
	VipUpgradeLog *VipUpgradeLogInput `json:"vipUpgradeLog,omitempty"`
	BaseFilter    *BaseFilterInput    `json:"baseFilter,omitempty"`
}

type VipUpgradeLogInput struct {
	ID *uint64 `json:"id,omitempty"`
	// 用戶ID
	UserID *uint64 `json:"userID,omitempty"`
	// 升級前VIP等級
	VipLevelFrom *uint64 `json:"vipLevelFrom,omitempty"`
	// 升級後VIP等級
	VipLevelTo *uint64 `json:"vipLevelTo,omitempty"`
	// 升級時間
	UpgradeTime *time.Time `json:"upgradeTime,omitempty"`
}

type AccountType string

const (
	AccountTypeUnknown AccountType = "Unknown"
	// 系統管理員
	AccountTypeAdmin AccountType = "Admin"
	// 系統
	AccountTypeSystem AccountType = "System"
	// 管理員
	AccountTypeManager AccountType = "Manager"
	// 客服
	AccountTypeCustomerService AccountType = "CustomerService"
	// 一般會員
	AccountTypeMember AccountType = "Member"
	// 遊客
	AccountTypeTourist AccountType = "Tourist"
)

var AllAccountType = []AccountType{
	AccountTypeUnknown,
	AccountTypeAdmin,
	AccountTypeSystem,
	AccountTypeManager,
	AccountTypeCustomerService,
	AccountTypeMember,
	AccountTypeTourist,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypeUnknown, AccountTypeAdmin, AccountTypeSystem, AccountTypeManager, AccountTypeCustomerService, AccountTypeMember, AccountTypeTourist:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeviceOs string

const (
	DeviceOsUnknown DeviceOs = "Unknown"
	// IOS
	DeviceOsIos DeviceOs = "IOS"
	// Android
	DeviceOsAndroid DeviceOs = "Android"
	// Windows
	DeviceOsWindows DeviceOs = "Windows"
	// Mac
	DeviceOsMac DeviceOs = "Mac"
	// 其他
	DeviceOsOther DeviceOs = "Other"
)

var AllDeviceOs = []DeviceOs{
	DeviceOsUnknown,
	DeviceOsIos,
	DeviceOsAndroid,
	DeviceOsWindows,
	DeviceOsMac,
	DeviceOsOther,
}

func (e DeviceOs) IsValid() bool {
	switch e {
	case DeviceOsUnknown, DeviceOsIos, DeviceOsAndroid, DeviceOsWindows, DeviceOsMac, DeviceOsOther:
		return true
	}
	return false
}

func (e DeviceOs) String() string {
	return string(e)
}

func (e *DeviceOs) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceOs(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceOS", str)
	}
	return nil
}

func (e DeviceOs) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 更多資訊類型
type MoreInformationType string

const (
	MoreInformationTypeUnknown MoreInformationType = "Unknown"
	MoreInformationTypeHTML    MoreInformationType = "HTML"
	MoreInformationTypeURL     MoreInformationType = "URL"
)

var AllMoreInformationType = []MoreInformationType{
	MoreInformationTypeUnknown,
	MoreInformationTypeHTML,
	MoreInformationTypeURL,
}

func (e MoreInformationType) IsValid() bool {
	switch e {
	case MoreInformationTypeUnknown, MoreInformationTypeHTML, MoreInformationTypeURL:
		return true
	}
	return false
}

func (e MoreInformationType) String() string {
	return string(e)
}

func (e *MoreInformationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MoreInformationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MoreInformationType", str)
	}
	return nil
}

func (e MoreInformationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OffsetType string

const (
	OffsetTypeUnknown OffsetType = "Unknown"
	OffsetTypeOld     OffsetType = "Old"
	OffsetTypeNew     OffsetType = "New"
)

var AllOffsetType = []OffsetType{
	OffsetTypeUnknown,
	OffsetTypeOld,
	OffsetTypeNew,
}

func (e OffsetType) IsValid() bool {
	switch e {
	case OffsetTypeUnknown, OffsetTypeOld, OffsetTypeNew:
		return true
	}
	return false
}

func (e OffsetType) String() string {
	return string(e)
}

func (e *OffsetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OffsetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OffsetType", str)
	}
	return nil
}

func (e OffsetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Position string

const (
	PositionTop    Position = "Top"
	PositionBottom Position = "Bottom"
	PositionLeft   Position = "Left"
	PositionRight  Position = "Right"
)

var AllPosition = []Position{
	PositionTop,
	PositionBottom,
	PositionLeft,
	PositionRight,
}

func (e Position) IsValid() bool {
	switch e {
	case PositionTop, PositionBottom, PositionLeft, PositionRight:
		return true
	}
	return false
}

func (e Position) String() string {
	return string(e)
}

func (e *Position) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Position(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Position", str)
	}
	return nil
}

func (e Position) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RangeType string

const (
	RangeTypeByDateTime RangeType = "ByDateTime"
	RangeTypeByNumber   RangeType = "ByNumber"
)

var AllRangeType = []RangeType{
	RangeTypeByDateTime,
	RangeTypeByNumber,
}

func (e RangeType) IsValid() bool {
	switch e {
	case RangeTypeByDateTime, RangeTypeByNumber:
		return true
	}
	return false
}

func (e RangeType) String() string {
	return string(e)
}

func (e *RangeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RangeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RangeType", str)
	}
	return nil
}

func (e RangeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortType string

const (
	SortTypeUnknown SortType = "Unknown"
	SortTypeAsc     SortType = "ASC"
	SortTypeDesc    SortType = "DESC"
)

var AllSortType = []SortType{
	SortTypeUnknown,
	SortTypeAsc,
	SortTypeDesc,
}

func (e SortType) IsValid() bool {
	switch e {
	case SortTypeUnknown, SortTypeAsc, SortTypeDesc:
		return true
	}
	return false
}

func (e SortType) String() string {
	return string(e)
}

func (e *SortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortType", str)
	}
	return nil
}

func (e SortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusUnknown UserStatus = "Unknown"
	// 未驗證
	UserStatusUnVerified UserStatus = "UnVerified"
	// 啟用中
	UserStatusActived UserStatus = "Actived"
	// 鎖定
	UserStatusLocked UserStatus = "Locked"
	// 停用中
	UserStatusDisabled UserStatus = "Disabled"
	// 已刪除
	UserStatusDeleted UserStatus = "Deleted"
)

var AllUserStatus = []UserStatus{
	UserStatusUnknown,
	UserStatusUnVerified,
	UserStatusActived,
	UserStatusLocked,
	UserStatusDisabled,
	UserStatusDeleted,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusUnknown, UserStatusUnVerified, UserStatusActived, UserStatusLocked, UserStatusDisabled, UserStatusDeleted:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type YesNo string

const (
	YesNoUnknown YesNo = "Unknown"
	YesNoYes     YesNo = "Yes"
	YesNoNo      YesNo = "No"
)

var AllYesNo = []YesNo{
	YesNoUnknown,
	YesNoYes,
	YesNoNo,
}

func (e YesNo) IsValid() bool {
	switch e {
	case YesNoUnknown, YesNoYes, YesNoNo:
		return true
	}
	return false
}

func (e YesNo) String() string {
	return string(e)
}

func (e *YesNo) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = YesNo(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid YesNo", str)
	}
	return nil
}

func (e YesNo) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
